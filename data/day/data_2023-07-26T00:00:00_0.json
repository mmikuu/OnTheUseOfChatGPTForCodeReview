{
    "data": {
        "search": {
            "edges": [
                {
                    "node": {
                        "number": 1638,
                        "title": "Anomaly detection notifications and support for more languages",
                        "repository": {
                            "nameWithOwner": "TeamCodeStream/codestream",
                            "primaryLanguage": {
                                "name": "TypeScript"
                            }
                        },
                        "createdAt": "2023-07-26T15:09:38Z",
                        "mergedAt": "2023-07-28T17:47:53Z",
                        "url": "https://github.com/TeamCodeStream/codestream/pull/1638",
                        "state": "MERGED",
                        "author": {
                            "login": "marcelofarias"
                        },
                        "editor": null,
                        "body": "",
                        "comments": {
                            "nodes": []
                        },
                        "reviews": {
                            "edges": [
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "@CalvinAllen does this need to be awaited? can it fire and forget? i forget the syntax... _ = _workspace.Try... ?",
                                                        "author": {
                                                            "login": "bcanzanella"
                                                        },
                                                        "url": "https://github.com/TeamCodeStream/codestream/pull/1638#discussion_r1275312395",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "ef68e8b",
                                                            "authoredDate": "2023-07-26T15:57:26Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "??",
                                                        "author": {
                                                            "login": "bcanzanella"
                                                        },
                                                        "url": "https://github.com/TeamCodeStream/codestream/pull/1638#discussion_r1275314852",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "ef68e8b",
                                                            "authoredDate": "2023-07-26T15:57:26Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Based on all the data I saw, we should get the numbers from Function/* rather than WebTransaction/Function/*. Also: https://chat.openai.com/share/04814a64-5872-4665-a427-2b672e2a7297",
                                                        "author": {
                                                            "login": "marcelofarias"
                                                        },
                                                        "url": "https://github.com/TeamCodeStream/codestream/pull/1638#discussion_r1275340806",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "ef68e8b",
                                                            "authoredDate": "2023-07-26T15:57:26Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "i think my question was more of \"what is xit?\"",
                                                        "author": {
                                                            "login": "bcanzanella"
                                                        },
                                                        "url": "https://github.com/TeamCodeStream/codestream/pull/1638#discussion_r1276383343",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "ef68e8b",
                                                            "authoredDate": "2023-07-26T15:57:26Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "got it, disabled.",
                                                        "author": {
                                                            "login": "bcanzanella"
                                                        },
                                                        "url": "https://github.com/TeamCodeStream/codestream/pull/1638#discussion_r1276445418",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "ef68e8b",
                                                            "authoredDate": "2023-07-26T15:57:26Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "@bcanzanella Not certain; I can play around with it and see - but yeah, I believe that's one variation of doing it, IIRC",
                                                        "author": {
                                                            "login": "CalvinAllen"
                                                        },
                                                        "url": "https://github.com/TeamCodeStream/codestream/pull/1638#discussion_r1276451635",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "ef68e8b",
                                                            "authoredDate": "2023-07-26T15:57:26Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "def a nice-to-have, was just thinking what we can do to eek out as much perf from VS as we can.",
                                                        "author": {
                                                            "login": "bcanzanella"
                                                        },
                                                        "url": "https://github.com/TeamCodeStream/codestream/pull/1638#discussion_r1276458352",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "ef68e8b",
                                                            "authoredDate": "2023-07-26T15:57:26Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "APPROVED",
                                        "bodyText": "\ud83c\udf1f",
                                        "comments": {
                                            "edges": []
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Done.",
                                                        "author": {
                                                            "login": "CalvinAllen"
                                                        },
                                                        "url": "https://github.com/TeamCodeStream/codestream/pull/1638#discussion_r1277710865",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "ef68e8b",
                                                            "authoredDate": "2023-07-26T15:57:26Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "textMatches": [
                        {
                            "property": "comments.body"
                        }
                    ]
                },
                {
                    "node": {
                        "number": 92,
                        "title": "Fix #74: Correct for Lens Distortion for ray angle calculation",
                        "repository": {
                            "nameWithOwner": "Theta-Limited/OpenAthenaAndroid",
                            "primaryLanguage": {
                                "name": "Java"
                            }
                        },
                        "createdAt": "2023-07-26T00:27:05Z",
                        "mergedAt": null,
                        "url": "https://github.com/Theta-Limited/OpenAthenaAndroid/pull/92",
                        "state": "CLOSED",
                        "author": {
                            "login": "mkrupczak3"
                        },
                        "editor": {
                            "login": "mkrupczak3"
                        },
                        "body": "[![AutoPR Running](https://img.shields.io/badge/AutoPR-running-yellow)](https://github.com/Theta-Limited/OpenAthenaAndroid/actions/runs/5662910110)\n\nFixes #74\n\n## Status\n\nThis pull request is being autonomously generated by [AutoPR](https://github.com/irgolic/AutoPR).\n\n<details open>\n<summary>\ud83d\udcd6 Looking at files</summary>\n\n> <details>\n> <summary>\ud83d\udcac Asked for InitialFileSelect</summary>\n> \n> > <details>\n> > <summary>Prompt</summary>\n> > \n> > ~~~\n> > Hey, somebody just opened an issue in my repo, could you help me write a pull request?\n> > \n> > Given context variables enclosed by +-+:\n> > \n> > Issue:\n> > +-+\n> > #74 Correct for Lens Distortion for ray angle calculation\n> > \n> > mkrupczak3: Our current calculation for ray angle from a selected image point is entirely based on the idealized [pinhole camera model](https://towardsdatascience.com/camera-intrinsic-matrix-with-example-in-python-d79bf2478c12?gi=8bd7b436d2d3). This makes no consideration of the properties of the actual camera lens, which introduces its own image distortion subtly different than may be expected in the pinhole camera model. These distortions may be especially pronounced with fisheye cameras or zoom lenses at larger focal lengths:\n> > https://en.wikipedia.org/wiki/Distortion_(optics)\n> > \n> > This deviation due to distortion is noticeably more pronounced near the edges of images, causing the marked point to deviate from the desired calculated location.\n> > \n> > A different project called PIX4D, which is used for drone mapping and photogrammetry, has published how they account for lens distortion. Proper angle calculation is very important for photogrammetry's technique of stitching together images taken from different angles, so we may assume their model is reasonably accurate:\n> > \n> > https://support.pix4d.com/hc/en-us/articles/202559089-How-are-the-Internal-and-External-Camera-Parameters-defined\n> > \n> > We need to store R\u2081, R\u2082, R\u2083, T\u2081, and T\u2082 for common camera models, and use the equations as defined above to apply a correction for lens distortion which then allows us to use the pinhole camera model appropriately for ray angle calculation\n> > \n> > @sethgcanada \n> > \n> > \n> > mkrupczak3: It turns out we don't have to re-work these equations like I thought, all that's needed is code to solve for Xd and Yd and use those for trig angle calculation instead of un-corrected Xh and Yh as is done currently\n> > \n> > \n> > mkrupczak3: One implementation problem is that often drone images are scaled up or down from their original size, while the calibrated distortion parameters are in terms of pixels of the image size that was used for calibration. \n> > \n> > We cannot assume the size of the image loaded will be the same as the size that the parameters are calculated for (such as if it is automatically scaled down when sent over a messaging app): Therefore it is necessary to adjust the distortion parameters based on the image scale.\n> > \n> > Interestingly, the distortion parameters won't scale linearly with the image scale. I haven't checked the math, but I believe they may be defined however, by mathematical formula(s) involving the original parameter and an arbitrary scale value `n` (see the last entry [here](https://chat.openai.com/share/f35a1b48-461c-4dd6-bd44-f19d0fdbe45c))\n> > \n> > In brief, this suggests that the new distortion coefficients for the scaled resolution image could be:\n> > \n> > R1' = R1 / n^2\n> > R2' = R2 / n^4\n> > R3' = R3 / n^6\n> > T1' = T1 / n\n> > T2' = T2 / n\n> > \n> > The [existing code in MetadataExtractor.java](https://github.com/Theta-Limited/OpenAthenaAndroid/blob/8ef35c8b48f308b85bb79c288721e707f59184fd/app/src/main/java/com/openathena/MetadataExtractor.java#L785) calculates `scaleRatio` based on the digital zoom (center crop) ratio, the image width, and the expected full resolution width of the image (the vertical size is not used because these pixels are often cropped automatically to make an image fit 16:9 frame). This scale ratio may likely be used as `n` for the equations listed above.\n> > \n> > From there, once the distortion equation is applied, Xd and Yd may be calculated, and then the ray angle may be calculated using each of their tangents with the focal length (in pixels) as normal:\n> > https://github.com/Theta-Limited/OpenAthenaAndroid/blob/8ef35c8b48f308b85bb79c288721e707f59184fd/app/src/main/java/com/openathena/MetadataExtractor.java#L872\n> > \n> > \n> > mkrupczak3: Another really good description of the math of image distortion:\n> > \n> > https://www.mathworks.com/help/vision/ug/camera-calibration.html#:~:text=The%20intrinsic%20parameters%20represent%20the,plane%20using%20the%20intrinsics%20parameters.\n> > \n> > \n> > mkrupczak3: Oh, @sethgcanada  forgot to mention, there are two different distortion models depending on the type of lens: `perspective` or `fisheye`. See [the earlier page from PIX4D](https://support.pix4d.com/hc/en-us/articles/202559089-How-are-the-Internal-and-External-Camera-Parameters-defined) for the relevant equations for each. \n> > \n> > While the scale equations for perspective lenses are as described above, you will need to do some linear algebra to determine the appropriate image scale conversions for `c`, `d`, `e`, and `f` if the lensType is a fisheye camera and the image resolution is scaled different from what is expected.\n> > \n> > Here's an example of what the JSON entries for a `perspective` and a `fisheye` camera will look like:\n> > \n> > `perspective`:\n> > ```JSON\n> >     {\n> >       \"makeModel\": \"skydio2\",\n> >       \"isThermal\": false,\n> >       \"ccdWidthMMPerPixel\": \"6.14571/4056.0\",\n> >       \"ccdHeightMMPerPixel\": \"4.504078/3040.0\",\n> >       \"widthPixels\": 4056,\n> >       \"heightPixels\": 3040,\n> >       \"comment\": \"Skydio 2 and 2+ Sony IMX577 1/2.3\u201d 12.3MP CMOS\",\n> >       \"lensType\": \"perspective\",\n> >       \"radialR1\": 0.134437,\n> >       \"radialR2\": -0.24607,\n> >       \"radialR3\": 0.104529,\n> >       \"tangentialT1\": -0.000175531,\n> >       \"tangentialT2\": -0.000580392\n> >     }\n> > ```\n> > \n> > `fisheye`:\n> > ```JSON\n> >     {\n> >       \"makeModel\": \"parrotBEBOP 2\",\n> >       \"isThermal\": false,\n> >       \"ccdWidthMMPerPixel\": \"5.7344/4096.0\",\n> >       \"ccdHeightMMPerPixel\": \"4.648/3072.0\",\n> >       \"widthPixels\": 4096,\n> >       \"heightPixels\": 3072,\n> >       \"comment\": \"1/2.3in 14 MP unnamed sensor\",\n> >       \"lensType\": \"fisheye\",\n> >       \"c\": 1101.96,\n> >       \"d\": 0.0,\n> >       \"e\": 0.0,\n> >       \"f\": 1101.96\n> >     }\n> > ```    \n> > \n> > For example: in `MetadataExtractor.java`, to get the `JSONObject` matching the `ExifInterface` `exif` of an image being analyzed you would run the following:\n> > ```\n> > JSONObject matchingDrone = getMatchingDrone(exif);\n> > ```\n> > \n> > From there, to obtain the `lensType` String you would run:\n> > ```\n> > String lensType = matchingDrone.getString(\"lensType\");\n> > ```\n> > \n> > All the necessary remaining quantitative parameters can be gotten with respective:\n> > ```\n> > String key = \"xxx\";\n> > Double value = matchingDrone.getDouble(key);\n> > ```\n> > \n> > You may also use the `JSONObject` function `.has(String key)` as a safe way to check if a key exists:\n> > ```\n> > if (drone != null && drone.has(\"focalLength\")) {\n> >     doSomething();\n> > }\n> > ```\n> > \n> > \n> > mkrupczak3: Also if the values for distortion parameters are all 0.0, then this actually means the data is missing. In this case, just use the existing pinhole camera model without correcting for distortion\n> > \n> > \n> > mkrupczak3: My \n> > \n> > > One implementation problem is that often drone images are scaled up or down from their original size, while the calibrated distortion parameters are in terms of pixels of the image size that was used for calibration.\n> > > \n> > > We cannot assume the size of the image loaded will be the same as the size that the parameters are calculated for (such as if it is automatically scaled down when sent over a messaging app): Therefore it is necessary to adjust the distortion parameters based on the image scale.\n> > > \n> > > Interestingly, the distortion parameters won't scale linearly with the image scale. I haven't checked the math, but I believe they may be defined however, by mathematical formula(s) involving the original parameter and an arbitrary scale value `n` (see the last entry [here](https://chat.openai.com/share/f35a1b48-461c-4dd6-bd44-f19d0fdbe45c))\n> > > \n> > > In brief, this suggests that the new distortion coefficients for the scaled resolution image could be:\n> > > \n> > > R1' = R1 / n^2 R2' = R2 / n^4 R3' = R3 / n^6 T1' = T1 / n T2' = T2 / n\n> > > \n> > > The [existing code in MetadataExtractor.java](https://github.com/Theta-Limited/OpenAthenaAndroid/blob/8ef35c8b48f308b85bb79c288721e707f59184fd/app/src/main/java/com/openathena/MetadataExtractor.java#L785) calculates `scaleRatio` based on the digital zoom (center crop) ratio, the image width, and the expected full resolution width of the image (the vertical size is not used because these pixels are often cropped automatically to make an image fit 16:9 frame). This scale ratio may likely be used as `n` for the equations listed above.\n> > > \n> > > From there, once the distortion equation is applied, Xd and Yd may be calculated, and then the ray angle may be calculated using each of their tangents with the focal length (in pixels) as normal:\n> > > \n> > > https://github.com/Theta-Limited/OpenAthenaAndroid/blob/8ef35c8b48f308b85bb79c288721e707f59184fd/app/src/main/java/com/openathena/MetadataExtractor.java#L872\n> > \n> > These equations were wrong, there's no need to alter any of the distortion parameters based on the size of the image. The current code which applies the scale correction for fx, fy, cx, and cy is already there and should be all that's needed\n> > \n> > \n> > mkrupczak3: via ChatGPT:\n> > \n> > > I apologize for the confusion earlier. Here's a step-by-step process to calculate \u03b8x and \u03b8y from a pixel in a distorted image:\n> > > \n> > > 1. **Undistort the pixel coordinates**: The first step is to correct the distorted pixel coordinates to undistorted pixel coordinates. This is typically done using an iterative process, as the distortion equations are nonlinear and do not have a simple inverse. You might start with an initial guess for the undistorted coordinates (for example, the distorted coordinates), and then repeatedly apply the distortion model and adjust the coordinates until the distorted coordinates match the observed coordinates. The distortion model equations are given by:\n> > > \n> > >     xdistorted = x(1 + k1*r^2 + k2*r^4 + k3*r^6) + [2 * p1 * x * y + p2 * (r^2 + 2 * x^2)]\n> > >     ydistorted = y(1 + k1*r^2 + k2*r^4 + k3*r^6) + [p1 * (r^2 + 2 *y^2) + 2 * p2 * x * y]\n> > > \n> > >     Here, (x, y) are the undistorted pixel locations in normalized image coordinates, (xdistorted, ydistorted) are the distorted pixel locations, r^2 = x^2 + y^2, and k1, k2, k3, p1, and p2 are the distortion coefficients.\n> > > \n> > > 2. **Normalize the pixel coordinates**: Subtract the principal point coordinates (cx, cy) from the undistorted pixel coordinates, and divide by the focal length (fx, fy) to convert the pixel coordinates to normalized image coordinates. This will give you the coordinates (x, y) of the point in the camera's image plane, in units of the focal length.\n> > > \n> > >     xnormalized = (xundistorted - cx) / fx\n> > >     ynormalized = (yundistorted - cy) / fy\n> > > \n> > > 3. **Convert to angles**: The normalized image coordinates (xnormalized, ynormalized) represent the tangent of the angles from the principal axis. So you can use the arctangent function to convert these coordinates to angles. The horizontal angle \u03b8x is given by \u03b8x = atan(xnormalized), and the vertical angle \u03b8y is given by \u03b8y = atan(ynormalized).\n> > > \n> > > Please note that these angles are relative to the principal axis of the camera, which is the line from the camera center through the principal point. The angles are positive in the direction of increasing pixel coordinates, and are measured in radians. The horizontal angle is zero for points on the principal axis, positive for points to the right of the principal axis, and negative for points to the left. Similarly, the vertical angle is zero for points on the principal axis, positive for points below the principal axis (since y-coordinates increase downwards in image coordinates), and negative for points above.\n> > \n> > \n> > mkrupczak3: More from ChatGPT on using Newton's method for finding the homogeneous point given the known distorted point in the original image:\n> > \n> > > The distortion equations are nonlinear and do not have a simple closed-form inverse, which is why an iterative approach is often used to solve for the undistorted coordinates. However, it is possible to approximate the inverse using a series expansion, or to solve for the undistorted coordinates using a numerical method such as Newton's method.\n> > > \n> > > Here is an example of how you might use Newton's method to solve for the undistorted x-coordinate given the distorted x-coordinate:\n> > > \n> > > 1. Start with an initial guess for the undistorted x-coordinate. A good initial guess might be the distorted x-coordinate.\n> > > \n> > > 2. Calculate the distorted x-coordinate using the distortion model equation:\n> > > \n> > >     xdistorted = x(1 + k1*r^2 + k2*r^4 + k3*r^6) + [2 * p1 * x * y + p2 * (r^2 + 2 * x^2)]\n> > > \n> > > 3. Calculate the difference between the calculated distorted x-coordinate and the given distorted x-coordinate.\n> > > \n> > > 4. If the difference is less than a small tolerance, stop and return the current guess for the undistorted x-coordinate.\n> > > \n> > > 5. Otherwise, calculate the derivative of the distortion model equation with respect to the undistorted x-coordinate, and use this to update the guess for the undistorted x-coordinate:\n> > > \n> > >     x = x - (xdistorted - xcalculated) / derivative\n> > > \n> > > 6. Repeat steps 2-5 until the difference is less than the tolerance or the maximum number of iterations is reached.\n> > > \n> > > This process can be repeated for the y-coordinate.\n> > > \n> > > Please note that this method requires calculating the derivative of the distortion model equation, which can be complex due to the nonlinear terms. It also requires choosing a suitable tolerance and maximum number of iterations. If the method does not converge, it may be necessary to try a different initial guess or to use a different numerical method.\n> > \n> > \n> > mkrupczak3: The accuracy issue seems to be most pronounced with fisheye lenses, see an example here:\n> > \n> > ![fisheye_fail_optimized](https://github.com/Theta-Limited/OpenAthenaAndroid/assets/25494111/bd20259e-6a86-4a91-b291-e24bb3082340)\n> > \n> > This issue may be related to the user reported issue #79 \n> > \n> > \n> > \n> > \n> > +-+\n> > \n> > The list of files in the repo is:\n> > ```.gitignore (240 tokens)\n> > .gitmodules (55 tokens)\n> > LICENSE (8075 tokens)\n> > README.md (2786 tokens)\n> > build.gradle (92 tokens)\n> > gradle.properties (333 tokens)\n> > gradlew (2469 tokens)\n> > gradlew.bat (975 tokens)\n> > settings.gradle (138 tokens)\n> > transifex.yml (95 tokens)\n> > .idea/.gitignore (16 tokens)\n> > .idea/OpenAthenaAndroid.iml (337 tokens)\n> > .idea/compiler.xml (55 tokens)\n> > .idea/gradle.xml (344 tokens)\n> > .idea/misc.xml (917 tokens)\n> > .idea/modules.xml (394 tokens)\n> > .idea/vcs.xml (66 tokens)\n> > app/.gitignore (2 tokens)\n> > app/build.gradle (541 tokens)\n> > app/proguard-rules.pro (198 tokens)\n> > .github/workflows/autopr.yml (544 tokens)\n> > app/debug/output-metadata.json (178 tokens)\n> > app/mgrs/.gitignore (3 tokens)\n> > app/mgrs/gradlew (2233 tokens)\n> > app/mgrs/gradlew.bat (923 tokens)\n> > gradle/wrapper/gradle-wrapper.properties (85 tokens)\n> > metadata/en-US/full_description.txt (93 tokens)\n> > metadata/en-US/short_description.txt (11 tokens)\n> > metadata/zh-CN/full_description.txt (0 tokens)\n> > metadata/zh-CN/short_description.txt (0 tokens)\n> > app/src/main/AndroidManifest.xml (1260 tokens)\n> > metadata/en-US/changelogs/10.txt (20 tokens)\n> > metadata/en-US/changelogs/11.txt (5 tokens)\n> > metadata/en-US/changelogs/12.txt (11 tokens)\n> > metadata/en-US/changelogs/13.txt (1 tokens)\n> > metadata/en-US/changelogs/14.txt (7 tokens)\n> > metadata/en-US/changelogs/15.txt (12 tokens)\n> > metadata/en-US/changelogs/8.txt (161 tokens)\n> > metadata/en-US/changelogs/9.txt (86 tokens)\n> > app/mgrs/gradle/wrapper/gradle-wrapper.properties (84 tokens)\n> > app/mgrs/src/main/AndroidManifest.xml (47 tokens)\n> > app/src/main/javadoc/overview.html (639 tokens)\n> > app/src/main/resources/mgrs.properties (1140 tokens)\n> > app/src/test/resources/.gitattributes (203 tokens)\n> > app/src/test/resources/README (370 tokens)\n> > app/src/test/resources/java.policy (8943 tokens)\n> > app/src/test/resources/lang-708-input.txt (2693 tokens)\n> > app/src/test/resources/log4j.properties (130 tokens)\n> > app/src/main/java/samples/XMPCoreCoverage.java (12891 tokens)\n> > app/src/main/java/samples/XMPCoreCoverageConst.java (5246 tokens)\n> > app/src/main/res/drawable-v24/ic_launcher_foreground.xml (1061 tokens)\n> > app/src/main/res/drawable/ic_launcher_background.xml (2638 tokens)\n> > app/src/main/res/layout-land/activity_about.xml (991 tokens)\n> > app/src/main/res/layout-land/activity_main.xml (2280 tokens)\n> > app/src/main/res/layout-land/activity_prefs.xml (2354 tokens)\n> > app/src/main/res/layout/activity_about.xml (947 tokens)\n> > app/src/main/res/layout/activity_log.xml (442 tokens)\n> > app/src/main/res/layout/activity_main.xml (1989 tokens)\n> > app/src/main/res/layout/activity_prefs.xml (2078 tokens)\n> > app/src/main/res/layout/activity_selection.xml (329 tokens)\n> > app/src/main/res/menu/menu_main.xml (320 tokens)\n> > app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml (98 tokens)\n> > app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml (98 tokens)\n> > app/src/main/res/values-fr/strings.xml (3981 tokens)\n> > app/src/main/res/values-ja/strings.xml (4781 tokens)\n> > app/src/main/res/values-ko/strings.xml (5981 tokens)\n> > app/src/main/res/values-land/dimens.xml (26 tokens)\n> > app/src/main/res/values-night/themes.xml (318 tokens)\n> > app/src/main/res/values-pl/strings.xml (4453 tokens)\n> > app/src/main/res/values-ru/strings.xml (6457 tokens)\n> > app/src/main/res/values-uk/strings.xml (6475 tokens)\n> > app/src/main/res/values-w1240dp/dimens.xml (26 tokens)\n> > app/src/main/res/values-w600dp/dimens.xml (26 tokens)\n> > app/src/main/res/values-zh/strings.xml (4727 tokens)\n> > app/src/main/res/values/colors.xml (161 tokens)\n> > app/src/main/res/values/dimens.xml (26 tokens)\n> > app/src/main/res/values/strings.xml (3221 tokens)\n> > app/src/main/res/values/themes.xml (454 tokens)\n> > app/src/main/res/xml/backup_rules.xml (160 tokens)\n> > app/src/main/res/xml/data_extraction_rules.xml (221 tokens)\n> > app/src/main/resources/META-INF/MANIFEST.MF (205 tokens)\n> > app/mgrs/src/main/res/values/strings.xml (8 tokens)\n> > app/src/androidTest/java/com/openathena/ExampleInstrumentedTest.java (248 tokens)\n> > app/src/main/java/com/openathena/AboutActivity.java (3054 tokens)\n> > app/src/main/java/com/openathena/ActivityLog.java (2599 tokens)\n> > app/src/main/java/com/openathena/AthenaActivity.java (6999 tokens)\n> > app/src/main/java/com/openathena/AthenaApp.java (1627 tokens)\n> > app/src/main/java/com/openathena/CK42_Gauss_Kr\u00fcger_Translator.java (2137 tokens)\n> > app/src/main/java/com/openathena/CoordTranslator.java (778 tokens)\n> > app/src/main/java/com/openathena/CursorOnTargetSender.java (4168 tokens)\n> > app/src/main/java/com/openathena/DEMParser.java (13895 tokens)\n> > app/src/main/java/com/openathena/DTEDParser.java (632 tokens)\n> > app/src/main/java/com/openathena/DroneParameterProvider.java (67 tokens)\n> > app/src/main/java/com/openathena/DroneParametersFromJSON.java (951 tokens)\n> > app/src/main/java/com/openathena/EGM96OffsetAdapter.java (374 tokens)\n> > app/src/main/java/com/openathena/EGMOffsetProvider.java (44 tokens)\n> > app/src/main/java/com/openathena/MainActivity.java (19638 tokens)\n> > app/src/main/java/com/openathena/MarkableImageView.java (5449 tokens)\n> > app/src/main/java/com/openathena/MetadataExtractor.java (15022 tokens)\n> > app/src/main/java/com/openathena/MissingDataException.java (249 tokens)\n> > app/src/main/java/com/openathena/PrefsActivity.java (2144 tokens)\n> > app/src/main/java/com/openathena/RequestedValueOOBException.java (326 tokens)\n> > app/src/main/java/com/openathena/SelectionActivity.java (2161 tokens)\n> > app/src/main/java/com/openathena/TargetGetter.java (6617 tokens)\n> > app/src/main/java/com/openathena/WGS84_CK42_Geodetic_Translator.java (3211 tokens)\n> > app/src/main/java/com/openathena/geodataAxisParams.java (110 tokens)\n> > app/src/main/java/org/slf4j/ILoggerFactory.java (735 tokens)\n> > app/src/main/java/org/slf4j/IMarkerFactory.java (940 tokens)\n> > app/src/main/java/org/slf4j/Logger.java (8492 tokens)\n> > app/src/main/java/org/slf4j/LoggerFactory.java (7159 tokens)\n> > app/src/main/java/org/slf4j/LoggerFactoryFriend.java (280 tokens)\n> > app/src/main/java/org/slf4j/MDC.java (3347 tokens)\n> > app/src/main/java/org/slf4j/Marker.java (1541 tokens)\n> > app/src/main/java/org/slf4j/MarkerFactory.java (1164 tokens)\n> > app/src/main/java/org/slf4j/package.html (91 tokens)\n> > app/src/main/resources/META-INF/proguard/org.threeten.bp.pro (24 tokens)\n> > app/src/main/resources/META-INF/services/org.threeten.bp.zone.ZoneRulesProvider (17 tokens)\n> > app/src/test/java/com/openathena/ExampleUnitTest.java (130 tokens)\n> > app/src/test/java/org/slf4j/BasicMarkerTest.java (2875 tokens)\n> > app/src/test/java/org/slf4j/Differentiator.java (442 tokens)\n> > app/src/test/java/org/slf4j/DoubleCheckedInt.java (2150 tokens)\n> > app/src/test/java/org/slf4j/LoggerAccessingThread.java (845 tokens)\n> > app/src/test/java/org/slf4j/NoBindingTest.java (684 tokens)\n> > app/src/main/java/com/adobe/xmp/XMPConst.java (2660 tokens)\n> > app/src/main/java/com/adobe/xmp/XMPDateTime.java (1171 tokens)\n> > app/src/main/java/com/adobe/xmp/XMPDateTimeFactory.java (1769 tokens)\n> > app/src/main/java/com/adobe/xmp/XMPError.java (292 tokens)\n> > app/src/main/java/com/adobe/xmp/XMPException.java (363 tokens)\n> > app/src/main/java/com/adobe/xmp/XMPIterator.java (954 tokens)\n> > app/src/main/java/com/adobe/xmp/XMPMeta.java (15441 tokens)\n> > app/src/main/java/com/adobe/xmp/XMPMetaFactory.java (3149 tokens)\n> > app/src/main/java/com/adobe/xmp/XMPPathFactory.java (3761 tokens)\n> > app/src/main/java/com/adobe/xmp/XMPSchemaRegistry.java (1806 tokens)\n> > app/src/main/java/com/adobe/xmp/XMPUtils.java (6110 tokens)\n> > app/src/main/java/com/adobe/xmp/XMPVersionInfo.java (342 tokens)\n> > app/src/main/java/com/adobe/xmp/package.html (152 tokens)\n> > app/src/main/java/com/agilesrc/dem4j/BoundingBox.java (1605 tokens)```\n> > \n> > Should we take a look at any files? If so, pick only a few files (max 5000 tokens). \n> > Respond with a very short rationale, and a list of files.\n> > If looking at files would be a waste of time with regard to the issue, respond with an empty list.\n> > ~~~\n> > \n> > </details>\n> > \n> > <details open>\n> > <summary>Response</summary>\n> > \n> > ~~~\n> > We should definitely take a look at the following files, as they are most likely to be relevant to the issue raised:\n> > \n> > 1. `app/src/main/java/com/openathena/MetadataExtractor.java`: This file computes the scale ratio and calculates the ray angle. The issue pertains to the calculation of the ray angle and this file has been directly mentioned multiple times throughout the issue description.\n> > \n> > 2. `app/src/main/java/com/openathena/DroneParametersFromJSON.java`: This file might help us understand how drone specific parameters, such as R1, R2, etc., are received and used within the application's context. These parameters are key to the issue at hand.\n> > \n> > 3. `app/src/main/java/com/openathena/AthenaActivity.java`: This could be relevant as it's the main activity and could potentially use the ray angle calculations done in the `MetadataExtractor.java`.\n> > \n> > 4. `app/src/main/java/com/openathena/TargetGetter.java`: This file might be relevant as it's related to target processing, and the issue is about correcting the targeting due to lens distortions.\n> > \n> > 5. `app/src/main/java/com/openathena/MainActivity.java`: This is the main entry point of the application. It might give us more context about how and where the calculations related to the issue are used.\n> > \n> > These files are chosen based on the detailed context given in the issue and their likelihood of containing relevant code for solving the problem.\n> > ~~~\n> > \n> > </details>\n> </details>\n> \n> <details open>\n> <summary>\ud83d\udee4 Ran InitialFileSelectResponse on rail</summary>\n> \n> > <details>\n> > <summary>Prompt</summary>\n> > \n> > ~~~xml\n> > \n> > Given the following document surrounded by `+++++`, answer the following questions. \n> > If the answer doesn't exist in the document, enter `null`.\n> > \n> > +++++\n> > We should definitely take a look at the following files, as they are most likely to be relevant to the issue raised:\n> > \n> > 1. `app/src/main/java/com/openathena/MetadataExtractor.java`: This file computes the scale ratio and calculates the ray angle. The issue pertains to the calculation of the ray angle and this file has been directly mentioned multiple times throughout the issue description.\n> > \n> > 2. `app/src/main/java/com/openathena/DroneParametersFromJSON.java`: This file might help us understand how drone specific parameters, such as R1, R2, etc., are received and used within the application's context. These parameters are key to the issue at hand.\n> > \n> > 3. `app/src/main/java/com/openathena/AthenaActivity.java`: This could be relevant as it's the main activity and could potentially use the ray angle calculations done in the `MetadataExtractor.java`.\n> > \n> > 4. `app/src/main/java/com/openathena/TargetGetter.java`: This file might be relevant as it's related to target processing, and the issue is about correcting the targeting due to lens distortions.\n> > \n> > 5. `app/src/main/java/com/openathena/MainActivity.java`: This is the main entry point of the application. It might give us more context about how and where the calculations related to the issue are used.\n> > \n> > These files are chosen based on the detailed context given in the issue and their likelihood of containing relevant code for solving the problem.\n> > +++++\n> > \n> > Extract information from this document and return a JSON that follows the correct schema.\n> > If looking at files would be a waste of time, please submit an empty list.\n> > \n> > \n> > Given below is XML that describes the information to extract from this document and the tags to extract it into.\n> > \n> > \n> > <output>\n> >     <list name=\"filepaths\">\n> >         <string description=\"Files in this repository that we should look at.\"/>\n> >     </list>\n> > </output>\n> > \n> > \n> > ~~~\n> > \n> > </details>\n> > \n> > <details>\n> > <summary>Raw output</summary>\n> > \n> > ~~~json\n> > {\n> >   \"filepaths\": [\n> >     \"app/src/main/java/com/openathena/MetadataExtractor.java\",\n> >     \"app/src/main/java/com/openathena/DroneParametersFromJSON.java\",\n> >     \"app/src/main/java/com/openathena/AthenaActivity.java\",\n> >     \"app/src/main/java/com/openathena/TargetGetter.java\",\n> >     \"app/src/main/java/com/openathena/MainActivity.java\"\n> >   ]\n> > }\n> > ~~~\n> > \n> > </details>\n> > \n> > <details>\n> > <summary>Parsed output</summary>\n> > \n> > ~~~json\n> > {\n> >   \"filepaths\": [\n> >     \"app/src/main/java/com/openathena/MetadataExtractor.java\",\n> >     \"app/src/main/java/com/openathena/DroneParametersFromJSON.java\",\n> >     \"app/src/main/java/com/openathena/AthenaActivity.java\",\n> >     \"app/src/main/java/com/openathena/TargetGetter.java\",\n> >     \"app/src/main/java/com/openathena/MainActivity.java\"\n> >   ]\n> > }\n> > ~~~\n> > \n> > </details>\n> > \n> > <details open>\n> > <summary>Validated output</summary>\n> > \n> > ~~~json\n> > {\n> >   \"filepaths\": [\n> >     \"app/src/main/java/com/openathena/MetadataExtractor.java\",\n> >     \"app/src/main/java/com/openathena/DroneParametersFromJSON.java\",\n> >     \"app/src/main/java/com/openathena/AthenaActivity.java\",\n> >     \"app/src/main/java/com/openathena/TargetGetter.java\",\n> >     \"app/src/main/java/com/openathena/MainActivity.java\"\n> >   ]\n> > }\n> > ~~~\n> > \n> > </details>\n> </details>\n</details>\n\n<img src=\"https://media0.giphy.com/media/l3nWhI38IWDofyDrW/giphy.gif\" width=\"200\" height=\"200\"/>",
                        "comments": {
                            "nodes": [
                                {
                                    "createdAt": "2023-07-26T00:27:10Z",
                                    "bodyText": "Thank you for your submission! We really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.AutoPR seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.You have signed the CLA already but the status is still pending? Let us recheck it.",
                                    "url": "https://github.com/Theta-Limited/OpenAthenaAndroid/pull/92#issuecomment-1650750318",
                                    "author": {
                                        "login": "CLAassistant"
                                    }
                                }
                            ]
                        },
                        "reviews": {
                            "edges": []
                        }
                    },
                    "textMatches": [
                        {
                            "property": "body"
                        }
                    ]
                }
            ],
            "pageInfo": {
                "endCursor": "Y3Vyc29yOjI=",
                "hasNextPage": false,
                "hasPreviousPage": false,
                "startCursor": "Y3Vyc29yOjE="
            },
            "issueCount": 2
        }
    }
}