{
    "data": {
        "search": {
            "edges": [
                {
                    "node": {
                        "number": 198,
                        "title": "Use \"inherit left, wildcard right\" behavior in base URL application and constructor string parsing.",
                        "repository": {
                            "nameWithOwner": "whatwg/urlpattern",
                            "primaryLanguage": {
                                "name": "HTML"
                            }
                        },
                        "createdAt": "2023-10-27T20:40:22Z",
                        "mergedAt": "2023-11-07T21:53:28Z",
                        "url": "https://github.com/whatwg/urlpattern/pull/198",
                        "state": "MERGED",
                        "author": {
                            "login": "jeremyroman"
                        },
                        "editor": {
                            "login": "pr-preview"
                        },
                        "body": "The following changes apply to patterns which are constructed using a base URL, the constructor string syntax, or both -- but not any pattern which explicitly specifies components separately without a base URL.\n\n* Components are not inherited from a base URL if an \"earlier\" component is explicitly specified.\n* In the string format, unspecified \"later\" components are implicitly wildcarded, rather than required to be empty (with the exception of the port, which is always taken to be specified when the hostname is).\n* Username and password are never implicitly specified or inherited.\n\nFor example:\n1. `\"https://example.com/*\"` also matches with any username, password, search, and hash. Previously this would be written `\"https://*:*@example.com/*\\\\?*#*\"`.\n2. `new URLPattern({ pathname: \"/login\" }, \"https://example.com/?q=hello\")` accepts any query string and hash, not only `\"?q=hello\"` and `\"\"`.\n3. `\"https://*:*\"` or `{protocol: \"https\"}` means \"any HTTPS URL, on any port\", and `\"https://*\"` means \"any HTTPS URL on the default port (443)\". These have the same meaning whether or not a base URL is provided, since specifying the protocol prohibits inheritance of other components.\n\nThis makes patterns more expansive than before, in cases where wildcards are likely to be desirable.\n\nThe logic of inheriting components from a base URL dictionary is also similarly changed in a way that may make it _not_ match where it did before, but more consistently with the above and with how relative URL strings are resolved. For example, `new URLPattern(\"https://example.com/foo?q=1#hello\").test({pathname: \"/foo\", hash: \"hello\", baseURL: \"https://example.com/bar?q=1\"})` previously returned `true` but will now be `false`, since the search component is not inherited when the pathname is specified. This is analogous to how `new URL(\"/foo#hello\", \"https://example.com/bar?q=1\")` works. The reverse is also possible; in both cases this is quite niche.\n\nFixes #179.\n\n---\n\n<!--\nThank you for contributing to the URL Pattern Standard! Please describe the change you are making and complete the checklist below if your change is not editorial.\nWhen editing this comment after the PR is created, check that PR-Preview doesn't overwrite your changes.\nIf you think your PR is ready to land, please double-check that the build is passing and the checklist is complete before pinging.\n-->\n\n- [x] At least two implementers are interested (and none opposed):\n   * Google Chrome\n   * Safari (per https://github.com/whatwg/urlpattern/issues/179#issuecomment-1735850741)\n- [x] [Tests](https://github.com/web-platform-tests/wpt) are written and can be reviewed and commented upon at:\n   * https://chromium-review.googlesource.com/c/chromium/src/+/4975595\n- [x] [Implementation bugs](https://github.com/whatwg/meta/blob/main/MAINTAINERS.md#handling-pull-requests) are filed:\n   * Chromium: https://bugs.chromium.org/p/chromium/issues/detail?id=1468446\n   * Gecko: https://bugzilla.mozilla.org/show_bug.cgi?id=1731418 (vendor does not yet implement the spec)\n   * WebKit: [no known URLPattern bug] (vendor does not yet implement the spec)\n   * Deno: https://github.com/denoland/deno/issues/21073\n   * kenchris/urlpattern-polyfill: https://github.com/kenchris/urlpattern-polyfill/issues/122\n- [x] [MDN issue](https://github.com/whatwg/meta/blob/main/MAINTAINERS.md#handling-pull-requests) is filed: https://github.com/mdn/content/issues/30024\n- [x] The top of this comment includes a [clear commit message](https://github.com/whatwg/meta/blob/main/COMMITTING.md) to use. <!-- If you created this PR from a single commit, Github copied its message. Otherwise, you need to add a commit message yourself. -->\n\n(See [WHATWG Working Mode: Changes](https://whatwg.org/working-mode#changes) for more details.)\n\n\n<!--\n    This comment and the below content is programmatically generated.\n    You may add a comma-separated list of anchors you'd like a\n    direct link to below (e.g. #idl-serializers, #idl-sequence):\n\n    Don't remove this comment or modify anything below this line.\n    If you don't want a preview generated for this pull request,\n    just replace the whole of this comment's content by \"no preview\"\n    and remove what's below.\n-->\n***\n<a href=\"https://whatpr.org/urlpattern/198.html\" title=\"Last updated on Nov 7, 2023, 6:15 PM UTC (7cad49e)\">Preview</a> | <a href=\"https://whatpr.org/urlpattern/198/c8d5072...7cad49e.html\" title=\"Last updated on Nov 7, 2023, 6:15 PM UTC (7cad49e)\">Diff</a>",
                        "reviews": {
                            "edges": [
                                {
                                    "node": {
                                        "state": "APPROVED",
                                        "bodyText": "Normatively LGTM, just editorial suggestions",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Maybe add or or two examples with searches and hashes here.",
                                                        "author": {
                                                            "login": "domenic"
                                                        },
                                                        "url": "https://github.com/whatwg/urlpattern/pull/198#discussion_r1382895363",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "2d122ee",
                                                            "authoredDate": "2023-10-31T02:54:03Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n              <p>In the constructor string algorithm, the pathname, search and hash are wildcarded if earlier components are specified but later ones are not. For example, \"`https://example.com/foo`\" matches any search and any hash. Similarly, \"`https://example.com`\" matches any URL on that origin. The username and password components are always wildcard unless they are explicitly specified.\n          \n          \n            \n              <p>In the constructor string algorithm, the pathname, search, and hash are wildcarded if earlier components are specified but later ones are not. For example, \"`https://example.com/foo`\" matches any search and any hash. Similarly, \"`https://example.com`\" matches any URL on that origin. The username and password components are always wildcard unless they are explicitly specified.\n          \n      \n    \n    \n  \n\nper https://whatwg.org/style-guide#grammar",
                                                        "author": {
                                                            "login": "domenic"
                                                        },
                                                        "url": "https://github.com/whatwg/urlpattern/pull/198#discussion_r1382895800",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "2d122ee",
                                                            "authoredDate": "2023-10-31T02:54:03Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "The new version of this note doesn't make a lot of sense. Previously, it was contrasting new URLPattern({ pathname: 'foo' }) and the constructor string parser. Now, it's stating two disconnected facts: one about the { pathname: 'foo' } version, and one about the constructor string parser. And for some reason it's using \"instead\" to contrast them, even though the two disconnected facts are actually very similar.\nI think maybe this note could be deleted, now that the treatment is more symmetric? Or maybe something like the following:\n\nWhen constructing a pattern using a {{URLPatternInit}} like new URLPattern({ pathname: 'foo' }) any missing components will be defaulted to wildcards. For the constructor string case, a somewhat-similar behavior applies: missing components are treated as either the empty string, or as wildcards, depending on what components do appear in the input string. In particular, missing components which appear \"later\" than present components are treated as wildcards, whereas missing components that appear \"earlier\" than present components are treated as the empty string.\nTo accomplish this behavior, missing components aren't set in the parser's result until a later component is encountered, as part of the change state algorithm.",
                                                        "author": {
                                                            "login": "domenic"
                                                        },
                                                        "url": "https://github.com/whatwg/urlpattern/pull/198#discussion_r1382900095",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "2d122ee",
                                                            "authoredDate": "2023-10-31T02:54:03Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                1. If |parser|'s [=constructor string parser/state=] is \"<a for=\"constructor string parser/state\">`protocol`</a>\", \"<a for=\"constructor string parser/state\">`authority`</a>\", \"<a for=\"constructor string parser/state\">`username`</a>\", \"<a for=\"constructor string parser/state\">`password`</a>\", \"<a for=\"constructor string parser/state\">`hostname`</a>\", or \"<a for=\"constructor string parser/state\">`port`</a>\"; |new state| is \"<a for=\"constructor string parser/state\">`search`</a>\", or \"<a for=\"constructor string parser/state\">`hash`</a>\"; and |parser|'s [=constructor string parser/result=][\"{{URLPatternInit/pathname}}\"] does not [=map/exist=], then:\n          \n          \n            \n                1. If |parser|'s [=constructor string parser/state=] is \"<a for=\"constructor string parser/state\">`protocol`</a>\", \"<a for=\"constructor string parser/state\">`authority`</a>\", \"<a for=\"constructor string parser/state\">`username`</a>\", \"<a for=\"constructor string parser/state\">`password`</a>\", \"<a for=\"constructor string parser/state\">`hostname`</a>\", or \"<a for=\"constructor string parser/state\">`port`</a>\"; |new state| is \"<a for=\"constructor string parser/state\">`search`</a>\" or \"<a for=\"constructor string parser/state\">`hash`</a>\"; and |parser|'s [=constructor string parser/result=][\"{{URLPatternInit/pathname}}\"] does not [=map/exist=], then:",
                                                        "author": {
                                                            "login": "domenic"
                                                        },
                                                        "url": "https://github.com/whatwg/urlpattern/pull/198#discussion_r1382903472",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "2d122ee",
                                                            "authoredDate": "2023-10-31T02:54:03Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Is this notion of \"more specific\" shared by both inheritance schemes? If so, maybe this helpful note should be moved somewhere more generic? Then the discussions of \"later\" can link to it.\nHowever, they do seem subtlely different, so probably there's not much to be done here. (I guess, is it possible to give a similar nice list-based explanation for the constructor string parsing?)",
                                                        "author": {
                                                            "login": "domenic"
                                                        },
                                                        "url": "https://github.com/whatwg/urlpattern/pull/198#discussion_r1382905677",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "2d122ee",
                                                            "authoredDate": "2023-10-31T02:54:03Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                  Username and password are also never inherited when constructing patterns, only for a URL being matched.\n          \n          \n            \n                  Username and password are also never inherited from the base URL when constructing a new {{URLPattern}} from a {{URLPatternInit}}. (They are, however, inherited from the base URL supplied as an argument to {{URLPattern/test()}} or {{URLPattern/exec()}}, for the URL being matched.)",
                                                        "author": {
                                                            "login": "domenic"
                                                        },
                                                        "url": "https://github.com/whatwg/urlpattern/pull/198#discussion_r1382907942",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "2d122ee",
                                                            "authoredDate": "2023-10-31T02:54:03Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "I think this algorithm has a persistent, existing problem of conflating \"not present\" and null. This is worse now because you're doing the right thing and doing \"exists\" checks in your new spec text, but the spec text right below it is doing \"null\" checks.\nProbably you should fix them all to be \"exists\" checks.",
                                                        "author": {
                                                            "login": "domenic"
                                                        },
                                                        "url": "https://github.com/whatwg/urlpattern/pull/198#discussion_r1382910296",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "2d122ee",
                                                            "authoredDate": "2023-10-31T02:54:03Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "and -> or here and below, I think?",
                                                        "author": {
                                                            "login": "domenic"
                                                        },
                                                        "url": "https://github.com/whatwg/urlpattern/pull/198#discussion_r1382913335",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "2d122ee",
                                                            "authoredDate": "2023-10-31T02:54:03Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Added a couple of additional examples, one with more going on with search and hash, and another with a base URL which doesn't inherit the search.",
                                                        "author": {
                                                            "login": "jeremyroman"
                                                        },
                                                        "url": "https://github.com/whatwg/urlpattern/pull/198#discussion_r1384014327",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "2d122ee",
                                                            "authoredDate": "2023-10-31T02:54:03Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Okay, removed.",
                                                        "author": {
                                                            "login": "jeremyroman"
                                                        },
                                                        "url": "https://github.com/whatwg/urlpattern/pull/198#discussion_r1384018280",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "2d122ee",
                                                            "authoredDate": "2023-10-31T02:54:03Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "It is essentially the same notion (with a couple of subtleties), but it so happens that the constructor string syntax doesn't have any way to specify, e.g., just a port with no hostname or protocol, or a password without a username, so only a few cases are actually possible there.\nBecause how it applies to the two cases is different, in normative text (and implementation code) it's a little simpler to just deal with cases that are possible rather than the underlying principle.\nI've expanded the constructor string note to refer to this one a little. I could give the first of these lists there, but I'm not sure how much clarity it adds.",
                                                        "author": {
                                                            "login": "jeremyroman"
                                                        },
                                                        "url": "https://github.com/whatwg/urlpattern/pull/198#discussion_r1384074592",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "2d122ee",
                                                            "authoredDate": "2023-10-31T02:54:03Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Done, with slightly different wording.",
                                                        "author": {
                                                            "login": "jeremyroman"
                                                        },
                                                        "url": "https://github.com/whatwg/urlpattern/pull/198#discussion_r1384083154",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "2d122ee",
                                                            "authoredDate": "2023-10-31T02:54:03Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "I'm unsure. The WHATWG style guide is silent and I haven't found another style reference, probably because \"none of\" in formal writing generally doesn't go directly into a list. To me \"none of A, B, and C\" seems most natural (i.e., none of the elements in this set, which consists of A, B, and C), but \"or\" doesn't sound wrong either.\nAnother alternative would be \"neither...nor\", but for three or more items it's usual to repeat \"nor\" which gets pretty tedious for like 7 items that we get to (even more than the famous USPS creed):\n\nIf init contains neither \"protocol\", nor \"hostname\", nor \"port\", nor \"pathname\", nor \"search\", nor \"hash\", ...\n\nYet another would be to use \"any\" instead of \"none\" and move the negation earlier, but it reads as a little more verbose too:\n\nIf init does not contain any of \"protocol\", \"hostname\", \"port\", \"pathname\", \"search\", and \"hash\", ...\n\nI don't think it's ambiguous in any case; what do you think?",
                                                        "author": {
                                                            "login": "jeremyroman"
                                                        },
                                                        "url": "https://github.com/whatwg/urlpattern/pull/198#discussion_r1384092770",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "2d122ee",
                                                            "authoredDate": "2023-10-31T02:54:03Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "APPROVED",
                                        "bodyText": "LGTM with more nits, not all of which I'm sure about. @sisidovski did you want to take a look?",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                <dd>\"*\"\n          \n          \n            \n                <dd>\"`*`\"",
                                                        "author": {
                                                            "login": "domenic"
                                                        },
                                                        "url": "https://github.com/whatwg/urlpattern/pull/198#discussion_r1384406042",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "551c882",
                                                            "authoredDate": "2023-11-06T22:59:52Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Maybe insert a </div><div class=\"note\"> before this since logically it feels like there are two notes here.",
                                                        "author": {
                                                            "login": "domenic"
                                                        },
                                                        "url": "https://github.com/whatwg/urlpattern/pull/198#discussion_r1384407040",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "551c882",
                                                            "authoredDate": "2023-11-06T22:59:52Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "LGTM",
                                                        "author": {
                                                            "login": "domenic"
                                                        },
                                                        "url": "https://github.com/whatwg/urlpattern/pull/198#discussion_r1384407785",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "2d122ee",
                                                            "authoredDate": "2023-10-31T02:54:03Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                  Username and password are also never inherited from a base URL when constructing a {{URLPattern}}. (They are, however, inherited from the base URL supplied as an argument to {{URLPattern/test()}} or {{URLPattern/exec()}}.)\n          \n          \n            \n                  Username and password are also never inherited from a base URL when constructing a {{URLPattern}}. (They are, however, inherited from the base URL when parsing a URL from the string supplied as an argument to {{URLPattern/test()}} or {{URLPattern/exec()}}.)",
                                                        "author": {
                                                            "login": "domenic"
                                                        },
                                                        "url": "https://github.com/whatwg/urlpattern/pull/198#discussion_r1384408204",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "551c882",
                                                            "authoredDate": "2023-11-06T22:59:52Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "ChatGPT agrees with \"and\": https://chat.openai.com/share/550e4e1f-39cf-4a01-8664-85cdbb399d2b. (Bard is incoherent.)\nI might go with\n\nIf init does not contain \"protocol\", \"hostname\", \"port\", \"pathname\", \"search\", or \"hash\", ...\n\nbut I don't think we need to spend any more time on this. I agree people will understand either way :)",
                                                        "author": {
                                                            "login": "domenic"
                                                        },
                                                        "url": "https://github.com/whatwg/urlpattern/pull/198#discussion_r1384410615",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "2d122ee",
                                                            "authoredDate": "2023-10-31T02:54:03Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n              1. If |init|[\"{{URLPatternInit/protocol}}\"] [=map/exists=] then set |result|[\"{{URLPatternInit/protocol}}\"] to the result of [=process protocol for init=] given |init|[\"{{URLPatternInit/protocol}}\"] and |type|.\n          \n          \n            \n              1. If |init|[\"{{URLPatternInit/protocol}}\"] [=map/exists=], then set |result|[\"{{URLPatternInit/protocol}}\"] to the result of [=process protocol for init=] given |init|[\"{{URLPatternInit/protocol}}\"] and |type|.\n          \n      \n    \n    \n  \n\nhere and below feels slightly nicer to me.",
                                                        "author": {
                                                            "login": "domenic"
                                                        },
                                                        "url": "https://github.com/whatwg/urlpattern/pull/198#discussion_r1384411013",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "551c882",
                                                            "authoredDate": "2023-11-06T22:59:52Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "APPROVED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Do we want a mention the exception of port here as other components are explicitly mentioned? It also makes sense not having it since we have a note in L723 though.",
                                                        "author": {
                                                            "login": "sisidovski"
                                                        },
                                                        "url": "https://github.com/whatwg/urlpattern/pull/198#discussion_r1384450011",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "551c882",
                                                            "authoredDate": "2023-11-06T22:59:52Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Just to confirm, |type| will be pattern only when constructing, right? match() and exec() also process URLPatternInit, but |type| is \"url\" in that case so I believe this is correct.",
                                                        "author": {
                                                            "login": "sisidovski"
                                                        },
                                                        "url": "https://github.com/whatwg/urlpattern/pull/198#discussion_r1384529372",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "551c882",
                                                            "authoredDate": "2023-11-06T22:59:52Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Added \"when parsing a URL\". You can actually supply a dictionary rather than a string if you want, and this behavior also applies there. e.g. urlPattern.test({pathname: \"/world\"}, \"https://user:pass@example.com/\") is a thing you can do.",
                                                        "author": {
                                                            "login": "jeremyroman"
                                                        },
                                                        "url": "https://github.com/whatwg/urlpattern/pull/198#discussion_r1385277242",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "551c882",
                                                            "authoredDate": "2023-11-06T22:59:52Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Added a mention here.",
                                                        "author": {
                                                            "login": "jeremyroman"
                                                        },
                                                        "url": "https://github.com/whatwg/urlpattern/pull/198#discussion_r1385280735",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "551c882",
                                                            "authoredDate": "2023-11-06T22:59:52Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Yes, exactly.",
                                                        "author": {
                                                            "login": "jeremyroman"
                                                        },
                                                        "url": "https://github.com/whatwg/urlpattern/pull/198#discussion_r1385281216",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "551c882",
                                                            "authoredDate": "2023-11-06T22:59:52Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "textMatches": [
                        {
                            "property": "comments.body"
                        },
                        {
                            "property": "body"
                        }
                    ]
                },
                {
                    "node": {
                        "number": 8230,
                        "title": "feat: add DataConverter to convert types",
                        "repository": {
                            "nameWithOwner": "codeigniter4/CodeIgniter4",
                            "primaryLanguage": {
                                "name": "PHP"
                            }
                        },
                        "createdAt": "2023-11-18T08:29:02Z",
                        "mergedAt": "2024-02-04T02:09:17Z",
                        "url": "https://github.com/codeigniter4/CodeIgniter4/pull/8230",
                        "state": "MERGED",
                        "author": {
                            "login": "kenjis"
                        },
                        "editor": {
                            "login": "kenjis"
                        },
                        "body": "**Description**\r\nSupersedes #7995\r\n\r\n- add `DataConverter` class to convert column values\r\n- add `DataCaster` class to cast values\r\n\r\nEntity casting works at (1)(4), but DataConverter casting works at (2)(3).\r\n\r\n```\r\n[App Code] --- (1) --> [Entity] --- (2) --> [Database]\r\n[App Code] <-- (4) --- [Entity] <-- (3) --- [Database]\r\n```\r\n\r\nExample:\r\n```php\r\n        $types = [\r\n            'id'   => 'int',\r\n            'date' => 'datetime',\r\n        ];\r\n        $converter = new DataConverter($types);\r\n\r\n        $dbData = [\r\n            'id'   => '1',\r\n            'date' => '2023-11-18 14:18:18',\r\n        ];\r\n        $data = $converter->fromDataSource($dbData);\r\n        dd($data);\r\n```\r\n```\r\narray (2) [\r\n    'id' => integer 1\r\n    'date' => CodeIgniter\\I18n\\Time#44 (6) (\r\n        protected 'timezone' -> DateTimeZone#45 (2) (\r\n            public 'timezone_type' -> integer 3\r\n            public 'timezone' -> string (3) \"UTC\"\r\n        )\r\n        protected 'locale' -> string (2) \"en\"\r\n        protected 'toStringFormat' -> string (19) \"yyyy-MM-dd HH:mm:ss\"\r\n        public 'date' -> string (26) \"2023-11-18 14:18:18.000000\"\r\n        public 'timezone_type' -> integer 3\r\n        public 'timezone' -> string (3) \"UTC\"\r\n    )\r\n]\r\n```\r\n\r\n**Checklist:**\r\n- [x] Securely signed commits\r\n- [x] Component(s) with PHPDoc blocks, only if necessary or adds value\r\n- [ ] Unit testing, with >80% coverage\r\n- [ ] User guide updated\r\n- [x] Conforms to style guide\r\n",
                        "reviews": {
                            "edges": [
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "Did not review this completely, but couple of thoughts:\n\nHow is this different from Entity casts? By looking at the code, these seem to duplicate the code there.\nWould these qualify for generic typing, like T -> U for the fromDatabase method and U -> T for toDatabase method. That way we can have static analysers come into play? What do you think?",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I think we should just use the type here instead using get_debug_type? Exporting the values maybe cumbersome for large objects.",
                                                        "author": {
                                                            "login": "paulbalandan"
                                                        },
                                                        "url": "https://github.com/codeigniter4/CodeIgniter4/pull/8230#discussion_r1398622711",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "26dbad2",
                                                            "authoredDate": "2023-11-18T22:47:25Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Why not type this natively as mixed?",
                                                        "author": {
                                                            "login": "paulbalandan"
                                                        },
                                                        "url": "https://github.com/codeigniter4/CodeIgniter4/pull/8230#discussion_r1398623186",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "26dbad2",
                                                            "authoredDate": "2023-11-18T22:47:25Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "These types are a bit lax. It is doubtful that there can really be these many types.",
                                                        "author": {
                                                            "login": "kenjis"
                                                        },
                                                        "url": "https://github.com/codeigniter4/CodeIgniter4/pull/8230#discussion_r1398831384",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "26dbad2",
                                                            "authoredDate": "2023-11-18T22:47:25Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Optionally I would add the ability to make the DataConverter aware of the DB driver we use with it. That way, we could have specific cast classes for drivers that need it - such as BooleanCast for Postgre.",
                                                        "author": {
                                                            "login": "michalsn"
                                                        },
                                                        "url": "https://github.com/codeigniter4/CodeIgniter4/pull/8230#discussion_r1399236981",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "cd9967c",
                                                            "authoredDate": "2023-11-20T08:36:15Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Done",
                                                        "author": {
                                                            "login": "kenjis"
                                                        },
                                                        "url": "https://github.com/codeigniter4/CodeIgniter4/pull/8230#discussion_r1401582964",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "26dbad2",
                                                            "authoredDate": "2023-11-18T22:47:25Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "You could create a factory for DataConverter, and set specific cast handers.\nOr just extend DataConverter for a specific DB driver.",
                                                        "author": {
                                                            "login": "kenjis"
                                                        },
                                                        "url": "https://github.com/codeigniter4/CodeIgniter4/pull/8230#discussion_r1401585449",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "cd9967c",
                                                            "authoredDate": "2023-11-20T08:36:15Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "My proposition wasn't about the ability to prepare a custom Cast class, but providing built-in support for data that are handled differently depending on the database we work with. Like, if I work with data from MySQL, the t value shouldn't be treated as true.\nAnyway, I still may be missing the big picture for this class.",
                                                        "author": {
                                                            "login": "michalsn"
                                                        },
                                                        "url": "https://github.com/codeigniter4/CodeIgniter4/pull/8230#discussion_r1401601112",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "cd9967c",
                                                            "authoredDate": "2023-11-20T08:36:15Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I think that this DataConverter and the cast handlers can handle most cases for the DBs we have now.\nHowever, if we really need specific cast handlers for Postgres, for example, I would not be opposed to adding it.",
                                                        "author": {
                                                            "login": "kenjis"
                                                        },
                                                        "url": "https://github.com/codeigniter4/CodeIgniter4/pull/8230#discussion_r1401629795",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "cd9967c",
                                                            "authoredDate": "2023-11-20T08:36:15Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "APPROVED",
                                        "bodyText": "Ok, thank you for providing more information on how you see it to work.\nAlthough this will again complicate the model class a bit, I think this is a good direction.",
                                        "comments": {
                                            "edges": []
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Why not call static::class here instead of passing as argument>",
                                                        "author": {
                                                            "login": "paulbalandan"
                                                        },
                                                        "url": "https://github.com/codeigniter4/CodeIgniter4/pull/8230#discussion_r1402960282",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "ddd9282",
                                                            "authoredDate": "2023-11-23T05:30:23Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "If $value is scalar, I think it's safe to use var_export",
                                                        "author": {
                                                            "login": "paulbalandan"
                                                        },
                                                        "url": "https://github.com/codeigniter4/CodeIgniter4/pull/8230#discussion_r1402965431",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "ddd9282",
                                                            "authoredDate": "2023-11-23T05:30:23Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Done.",
                                                        "author": {
                                                            "login": "kenjis"
                                                        },
                                                        "url": "https://github.com/codeigniter4/CodeIgniter4/pull/8230#discussion_r1403134619",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "ddd9282",
                                                            "authoredDate": "2023-11-23T05:30:23Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Done.",
                                                        "author": {
                                                            "login": "kenjis"
                                                        },
                                                        "url": "https://github.com/codeigniter4/CodeIgniter4/pull/8230#discussion_r1403134767",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "ddd9282",
                                                            "authoredDate": "2023-11-23T05:30:23Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "CHANGES_REQUESTED",
                                        "bodyText": "This is big, I will have to come back to it. I also want to think a bit more about the big picture, and @lonnieezell's comment. My hunch is that this is the right direction.",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Docblocks are always inherited, these are unnecessary. Also the inline version {} shouldn't be used standalone.",
                                                        "author": {
                                                            "login": "MGatner"
                                                        },
                                                        "url": "https://github.com/codeigniter4/CodeIgniter4/pull/8230#discussion_r1403341791",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "bc1956b",
                                                            "authoredDate": "2023-11-23T11:49:32Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "I'm not opposed to @michalsn 's suggestion but I think the current solution is fine. If a dev asks to cast a field as a bool and it contains a string \"f\" then it might be slightly confusing to get false but it was a mistake either way.",
                                                        "author": {
                                                            "login": "MGatner"
                                                        },
                                                        "url": "https://github.com/codeigniter4/CodeIgniter4/pull/8230#discussion_r1403346815",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "cd9967c",
                                                            "authoredDate": "2023-11-20T08:36:15Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "I know this is hearkening back to a recent conversation, which I don't think we resolved, but... should this be the equivalent of createFromFormat() instead? I'm a little worried about parse() accepting too broad of input.",
                                                        "author": {
                                                            "login": "MGatner"
                                                        },
                                                        "url": "https://github.com/codeigniter4/CodeIgniter4/pull/8230#discussion_r1403356201",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "bc1956b",
                                                            "authoredDate": "2023-11-23T11:49:32Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "There is nothing wrong with the way we're handling this right now... the only disadvantage is that casting may be a bit too wide sometimes. I saw this as an opportunity to fix this. I may or may not come back to this idea later, though it's nothing crucial.",
                                                        "author": {
                                                            "login": "michalsn"
                                                        },
                                                        "url": "https://github.com/codeigniter4/CodeIgniter4/pull/8230#discussion_r1403574494",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "cd9967c",
                                                            "authoredDate": "2023-11-20T08:36:15Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Okay, removed.",
                                                        "author": {
                                                            "login": "kenjis"
                                                        },
                                                        "url": "https://github.com/codeigniter4/CodeIgniter4/pull/8230#discussion_r1403789054",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "bc1956b",
                                                            "authoredDate": "2023-11-23T11:49:32Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Agreed.\nChanged to createFromFormat(): 024c554",
                                                        "author": {
                                                            "login": "kenjis"
                                                        },
                                                        "url": "https://github.com/codeigniter4/CodeIgniter4/pull/8230#discussion_r1403833234",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "bc1956b",
                                                            "authoredDate": "2023-11-23T11:49:32Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "APPROVED",
                                        "bodyText": "LGTM!",
                                        "comments": {
                                            "edges": []
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "textMatches": [
                        {
                            "property": "comments.body"
                        }
                    ]
                },
                {
                    "node": {
                        "number": 609,
                        "title": "Addressing crashes from failing background connections",
                        "repository": {
                            "nameWithOwner": "MatrixAI/Polykey",
                            "primaryLanguage": {
                                "name": "TypeScript"
                            }
                        },
                        "createdAt": "2023-10-25T07:40:12Z",
                        "mergedAt": "2023-11-03T01:48:57Z",
                        "url": "https://github.com/MatrixAI/Polykey/pull/609",
                        "state": "MERGED",
                        "author": {
                            "login": "tegefaulkes"
                        },
                        "editor": {
                            "login": "tegefaulkes"
                        },
                        "body": "### Description\r\n\r\nThis PR addresses stability fixes for failing connections.\r\n\r\nIt directly addresses this issue #592 \r\n\r\n### Issues Fixed\r\n\r\n* Fixes #592\r\n\r\n### Tasks\r\n\r\n* [x] 1. Prevent any connection failures in the background from bubbling up to the top of the program. The `NCM` should never throw when a connection fails.\r\n* [x] 2. expand tests to include connection failures and concurrent connection failures.\r\n* [x] 3. Remove magic number error codes from the nodes domain and use an `enum` to get the code and reason.  all forced connection stops should use this.\r\n* [x] 4. Fix so that concurrent connections results in a single successful active connection.\r\n\r\n### Final checklist\r\n\r\n* [x] Domain specific tests\r\n* [x] Full tests\r\n* [x] Updated inline-comment documentation\r\n* [x] Lint fixed\r\n* [x] Squash and rebased\r\n* [x] Sanity check the final build\r\n",
                        "reviews": {
                            "edges": []
                        }
                    },
                    "textMatches": [
                        {
                            "property": "comments.body"
                        },
                        {
                            "property": "body"
                        }
                    ]
                },
                {
                    "node": {
                        "number": 5068,
                        "title": "Expand the Standard Library: Option and Result",
                        "repository": {
                            "nameWithOwner": "darklang/dark",
                            "primaryLanguage": {
                                "name": "F#"
                            }
                        },
                        "createdAt": "2023-09-11T12:24:24Z",
                        "mergedAt": "2023-09-14T16:47:38Z",
                        "url": "https://github.com/darklang/dark/pull/5068",
                        "state": "MERGED",
                        "author": {
                            "login": "OceanOak"
                        },
                        "editor": {
                            "login": "OceanOak"
                        },
                        "body": "Changelog:\r\n\r\n```\r\nStandard library\r\n- Add new Option and Result functions to the standard library\r\n```\r\nThis PR introduces new Option and Result functions to the standard library, along with some tests.\r\n\r\nResult :\r\n- [x] isOK\r\n- [x] isError\r\n- [x] map3\r\n- [x] map4\r\n- [x] map5\r\n- [x] mapWithDefault\r\n- [x] or\r\n- [x] and\r\n- [x] toList\r\n- [x] join\r\n- [x] combine\r\n- [x] values\r\n\r\nOption: \r\n- [x] isSome\r\n- [x] isNone\r\n- [x] mapWithDefault\r\n- [x] map3\r\n- [x] map4\r\n- [x] map5\r\n- [x] join\r\n- [x] toResult\r\n- [x] or\r\n- [x] and\r\n- [x] toList\r\n- [x]  andThen2\r\n- [x]  andThen3\r\n- [x]  andThen4\r\n- [x] combine\r\n- [x] values\r\n\r\n\r\n\r\n\r\n",
                        "reviews": {
                            "edges": [
                                {
                                    "node": {
                                        "state": "CHANGES_REQUESTED",
                                        "bodyText": "Looks great.",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "(a, b, c) here is a tuple, so it confuses me that this works (since the rest seems to be using non-tuples, which is correct).\n(fun a b c -> a - b - c) is the non-tuple syntax.",
                                                        "author": {
                                                            "login": "pbiggar"
                                                        },
                                                        "url": "https://github.com/darklang/dark/pull/5068#discussion_r1321781955",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "08890ff",
                                                            "authoredDate": "2023-09-11T12:20:40Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "I would expect test1 to be the result here - why did you go with test2?",
                                                        "author": {
                                                            "login": "pbiggar"
                                                        },
                                                        "url": "https://github.com/darklang/dark/pull/5068#discussion_r1321783075",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "08890ff",
                                                            "authoredDate": "2023-09-11T12:20:40Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Same comment as on Result.map3",
                                                        "author": {
                                                            "login": "pbiggar"
                                                        },
                                                        "url": "https://github.com/darklang/dark/pull/5068#discussion_r1321812134",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "951835e",
                                                            "authoredDate": "2023-09-11T12:20:58Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "mapWithDefault applies the function to a result if it's Result.Ok. If the result is a Result.Error, it returns the default value. In this case, the default value is also an Error, which is why test2 was returned.\nWere you expecting a different behavior?",
                                                        "author": {
                                                            "login": "OceanOak"
                                                        },
                                                        "url": "https://github.com/darklang/dark/pull/5068#discussion_r1321867652",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "08890ff",
                                                            "authoredDate": "2023-09-11T12:20:40Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I am not sure why they passed",
                                                        "author": {
                                                            "login": "OceanOak"
                                                        },
                                                        "url": "https://github.com/darklang/dark/pull/5068#discussion_r1321871866",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "08890ff",
                                                            "authoredDate": "2023-09-11T12:20:40Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I remember you mentioning that the performance of pushback isn't great. Do you recommend a different approach?",
                                                        "author": {
                                                            "login": "OceanOak"
                                                        },
                                                        "url": "https://github.com/darklang/dark/pull/5068#discussion_r1321879933",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "670e2e7",
                                                            "authoredDate": "2023-09-11T17:39:59Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Gotcha. This seems correct, thanks for the clarification.",
                                                        "author": {
                                                            "login": "pbiggar"
                                                        },
                                                        "url": "https://github.com/darklang/dark/pull/5068#discussion_r1321924880",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "08890ff",
                                                            "authoredDate": "2023-09-11T12:20:40Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I think appending it to the front and then reversing should do it.\n(ChatGPT agrees: https://chat.openai.com/share/7fe27ca4-5c0e-431b-953b-7f6e23710b5c)",
                                                        "author": {
                                                            "login": "pbiggar"
                                                        },
                                                        "url": "https://github.com/darklang/dark/pull/5068#discussion_r1321927695",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "670e2e7",
                                                            "authoredDate": "2023-09-11T17:39:59Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "CHANGES_REQUESTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "You could use result here. That means you won't have to create another value, you can just reuse the already-created value.",
                                                        "author": {
                                                            "login": "pbiggar"
                                                        },
                                                        "url": "https://github.com/darklang/dark/pull/5068#discussion_r1321929546",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "366e8ca",
                                                            "authoredDate": "2023-09-11T13:21:23Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "This is just the identity function, which I guess we don't have. Maybe add it, or add a TODO to use it when we have it.\nlet identity (v : 'a) : 'a = v",
                                                        "author": {
                                                            "login": "pbiggar"
                                                        },
                                                        "url": "https://github.com/darklang/dark/pull/5068#discussion_r1321931318",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "2ae295a",
                                                            "authoredDate": "2023-09-11T16:51:18Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "This doesn't appear to be resolved.\nAlso, can we do the same for map2?",
                                                        "author": {
                                                            "login": "pbiggar"
                                                        },
                                                        "url": "https://github.com/darklang/dark/pull/5068#discussion_r1321932873",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "951835e",
                                                            "authoredDate": "2023-09-11T12:20:58Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Could you fix map2 as well - not sure why it's also wrong",
                                                        "author": {
                                                            "login": "pbiggar"
                                                        },
                                                        "url": "https://github.com/darklang/dark/pull/5068#discussion_r1321963982",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "670e2e7",
                                                            "authoredDate": "2023-09-11T17:39:59Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "new blog post: Dark's standard library now includes Fun!",
                                                        "author": {
                                                            "login": "StachuDotNet"
                                                        },
                                                        "url": "https://github.com/darklang/dark/pull/5068#discussion_r1323194447",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "2b6efc0",
                                                            "authoredDate": "2023-09-11T19:41:30Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                    (default_: 'b)\n          \n          \n            \n                    (default_: 'b) // CLEANUP once we're no longer using F# parser, remove the `_` here",
                                                        "author": {
                                                            "login": "StachuDotNet"
                                                        },
                                                        "url": "https://github.com/darklang/dark/pull/5068#discussion_r1323196737",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "2b6efc0",
                                                            "authoredDate": "2023-09-11T19:41:30Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "CHANGES_REQUESTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Ah, this isn't quite what I meant. I mean that we could do this:\nList.filterMap options (fun option -> option)\n\nwhich should be the same as this:\nList.filterMap options Fun.identity",
                                                        "author": {
                                                            "login": "pbiggar"
                                                        },
                                                        "url": "https://github.com/darklang/dark/pull/5068#discussion_r1324678085",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "02ed8a2",
                                                            "authoredDate": "2023-09-11T19:39:45Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Actaully, a blog post on the changes to the standard library would be cool (separate from the language changes)",
                                                        "author": {
                                                            "login": "pbiggar"
                                                        },
                                                        "url": "https://github.com/darklang/dark/pull/5068#discussion_r1324678935",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "2b6efc0",
                                                            "authoredDate": "2023-09-11T19:41:30Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Oh yeah, sorry. Fixed",
                                                        "author": {
                                                            "login": "OceanOak"
                                                        },
                                                        "url": "https://github.com/darklang/dark/pull/5068#discussion_r1324733345",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "02ed8a2",
                                                            "authoredDate": "2023-09-11T19:39:45Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "textMatches": [
                        {
                            "property": "comments.body"
                        },
                        {
                            "property": "body"
                        }
                    ]
                },
                {
                    "node": {
                        "number": 248,
                        "title": "[4\uae30 \uace0\uc608\uc131] Mission 1 PR \uc81c\ucd9c\ud569\ub2c8\ub2e4.",
                        "repository": {
                            "nameWithOwner": "prgrms-be-devcourse/springboot-jpa",
                            "primaryLanguage": null
                        },
                        "createdAt": "2023-07-25T17:55:26Z",
                        "mergedAt": "2023-07-26T05:18:46Z",
                        "url": "https://github.com/prgrms-be-devcourse/springboot-jpa/pull/248",
                        "state": "MERGED",
                        "author": {
                            "login": "Dev-Yesung"
                        },
                        "editor": null,
                        "body": "## \ud83d\udccc\u00a0\uacfc\uc81c \uc124\uba85\r\n- [x]  JPA \ud504\ub85c\uc81d\ud2b8\ub97c \uc138\ud305\ud574\ubcf8\ub2e4.\r\n- [x]  \uc138\ud305\ud55c \ud504\ub85c\uc81d\ud2b8\ub97c \uc774\uc6a9\ud574\uc11c \ub2e8\uc77c \uc5d4\ud2f0\ud2f0\ub97c \uc774\uc6a9\ud55c CRUD\ub97c \uad6c\ud604\ud55c\ub2e4.\r\n    - \uace0\uac1d(Customer) \uc5d4\ud2f0\ud2f0\ub294 ID(PK), \uc774\ub984, \uc131\uc744 \uac00\uc9c4\ub2e4.\r\n    - \uace0\uac1d\uc5d4\ud2f0\ud2f0\ub97c \uc774\uc6a9\ud55c CRUD\ub97c \uad6c\ud604\ud55c\ub2e4.",
                        "reviews": {
                            "edges": [
                                {
                                    "node": {
                                        "state": "APPROVED",
                                        "bodyText": "\uae54\ub054\ud558\uac8c \ucf54\ub4dc\ub97c \uc798 \uc791\uc131\ud574\uc8fc\uc154\uc11c \ub9ac\ubdf0\ub4dc\ub9b4\ubd80\ubd84\uc774 \ub9ce\uc774 \uc5c6\uc5b4\uc11c.. \uc88b\uc558\ub358 \uc810 \ube44\ub86f\ud574\uc11c \uba87\uac00\uc9c0 \ub0a8\uaca8 \ubcf4\uc558\uc2b5\ub2c8\ub2e4\u314e\u314e!\n\uc608\uc131\ub2d8 \uc218\uace0\ub9ce\uc73c\uc168\uc2b5\ub2c8\ub2e4~\ud83d\udc4d\ud83d\udc4d",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "length = 50\ub97c \ud65c\uc6a9\ud558\uc5ec \ub370\uc774\ud130 \ud544\ub4dc\uc5d0 \uc81c\ud55c\uc744 \uc124\uc815\ud574\uc8fc\uc2e0 \ubd80\ubd84 \uc88b\uc740 \uac83 \uac19\uc2b5\ub2c8\ub2e4! \ud83d\udc4d\ud83d\udc4d",
                                                        "author": {
                                                            "login": "kimihiqq"
                                                        },
                                                        "url": "https://github.com/prgrms-be-devcourse/springboot-jpa/pull/248#discussion_r1274325928",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "40ccb25",
                                                            "authoredDate": "2023-07-25T17:47:44Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "\ud604\uc7ac \uc0dd\uc131\uc790\uac00 \ub450\uac1c\uc778\ub370\uc694, @GeneratedValue(strategy = GenerationType.SEQUENCE)\ub97c \ud1b5\ud574 id\uac00 \uc790\ub3d9\uc73c\ub85c \uc0dd\uc131\ub418\ub2c8 id\ub97c \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\ub294 \uc0dd\uc131\uc790\ub294 \uc5c6\uc5b4\ub3c4 \ub418\uc9c0 \uc54a\uc744\uae4c..? \uc0dd\uac01\ud569\ub2c8\ub2e4!",
                                                        "author": {
                                                            "login": "kimihiqq"
                                                        },
                                                        "url": "https://github.com/prgrms-be-devcourse/springboot-jpa/pull/248#discussion_r1274334028",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "40ccb25",
                                                            "authoredDate": "2023-07-25T17:47:44Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "\ud83d\udc4d\ud83d\udc4d \uc720\ud6a8\uc131 \uac80\uc0ac\ub97c \ud1b5\ud574 \uc774\ub984\uc774 \ud2b9\uc815 \ud328\ud134\uc5d0 \uc77c\uce58\ud558\ub294\uc9c0 \ud655\uc778\ud574\uc8fc\uc168\ub294\ub370, \uc774\ubd80\ubd84\uc740 \uc800\ub3c4 \ucc38\uace0\ud574 \ucd94\uac00\ud558\uaca0\uc2b5\ub2c8\ub2e4\u314e\u314e~",
                                                        "author": {
                                                            "login": "kimihiqq"
                                                        },
                                                        "url": "https://github.com/prgrms-be-devcourse/springboot-jpa/pull/248#discussion_r1274335321",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "40ccb25",
                                                            "authoredDate": "2023-07-25T17:47:44Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "\uc774\ubd80\ubd84\uc740 lombok\uc758 @NoArgsConstructor\uc758 \uc0ac\uc6a9\uc744 \uace0\ub824\ud574\ubcfc\uc218\ub3c4 \uc788\uc744 \uac83 \uac19\uc2b5\ub2c8\ub2e4!",
                                                        "author": {
                                                            "login": "kimihiqq"
                                                        },
                                                        "url": "https://github.com/prgrms-be-devcourse/springboot-jpa/pull/248#discussion_r1274335654",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "40ccb25",
                                                            "authoredDate": "2023-07-25T17:47:44Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "\u314e\u314e\u314e \uac10\uc0ac\ud569\ub2c8\ub2e4~ JPA\uac00 \ucc98\uc74c\uc774\ub77c \ub0af\uc124\uc5b4\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \uae30\ub2a5\ub4e4\uc744 \ucd5c\ub300\ud55c \ud65c\uc6a9\ud574\ubcf4\ub824\uace0 \ud588\uc2b5\ub2c8\ub2e4!",
                                                        "author": {
                                                            "login": "Dev-Yesung"
                                                        },
                                                        "url": "https://github.com/prgrms-be-devcourse/springboot-jpa/pull/248#discussion_r1274361822",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "40ccb25",
                                                            "authoredDate": "2023-07-25T17:47:44Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "\uc81c\uac00 \uc815\ud655\ud558\uac8c \ubab0\ub77c\uc11c \uadf8\ub7f0\ub370, JPA\ub294 DB\uc5d0\uc11c \ub370\uc774\ud130\ub97c \uac00\uc838\uc62c \ub54c, \uc0dd\uc131\uc790\ub97c \uac00\uc9c0\uace0 \uac00\uc838\uc624\uc9c0 \uc54a\ub294\uac74\uac00\uc694...?\n\ud639\uc2dc\ub098 \ud574\uc11c DB\uc5d0\uc11c \ub370\uc774\ud130\ub97c \uac00\uc838\uc62c \ub54c \uc0dd\uc131\uc790\ub97c \ud1b5\ud574 \uac00\uc838\uc628\ub2e4\uba74 id\uc5d0 \uad00\ud55c \uc0dd\uc131\uc790\ub3c4 \ud544\uc694\ud560\uae4c\ubd10 \uc774\ub807\uac8c \ub9cc\ub4e4\uc5c8\uc2b5\ub2c8\ub2e4...!\n\uc774 \ubd80\ubd84 \ub2e4\uc2dc \uacf5\ubd80\ud558\uace0 \uc218\uc815\ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4 \u314e\u314e\n\uc774\uc640 \ubcc4\uac1c\ub85c \uc81c\uac00 \uc774\ub984\ub9cc \uac00\uc9c0\uace0 \uc0dd\uc131\ud558\ub294 \uc0dd\uc131\uc790\uc5d0\ub294 validName\uc744 \uc548 \uac78\uc5b4\ub1a8\ub124\uc694... \u315c\ud83e\udd72\n\uc218\uc815\ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4! \uac10\uc0ac\ud569\ub2c8\ub2e4~",
                                                        "author": {
                                                            "login": "Dev-Yesung"
                                                        },
                                                        "url": "https://github.com/prgrms-be-devcourse/springboot-jpa/pull/248#discussion_r1274363563",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "40ccb25",
                                                            "authoredDate": "2023-07-25T17:47:44Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "\uc800\ub3c4 \uacf5\ubd80\ud558\ub2e4\uac00 \uc5b4\ub514\uc11c \ucc38\uace0\ud574\uc11c \uac16\ub2e4 \uc37c\uc2b5\ub2c8\ub2e4 \u314e\u314e",
                                                        "author": {
                                                            "login": "Dev-Yesung"
                                                        },
                                                        "url": "https://github.com/prgrms-be-devcourse/springboot-jpa/pull/248#discussion_r1274363805",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "40ccb25",
                                                            "authoredDate": "2023-07-25T17:47:44Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "\uc544\uc557 \uc800\ub294 \ub86c\ubcf5\uc5d0\uc11c \uc81c\uacf5\ud558\ub294 \uc5b4\ub178\ud14c\uc774\uc158\uc5d0 public\uc73c\ub85c\ub9cc \uac00\ub2a5\ud55c\uc904 \uc54c\uc558\ub294\ub370\nprotected\ub85c \uc124\uc815\ud558\ub294 \uac83\ub3c4 \uac00\ub2a5\ud558\uad70\uc694...!!!\ud83e\udd29\n@NoArgConstructor\ub97c \uc0ac\uc6a9\ud574\uc11c \ubc14\uafd4\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4~ \uac10\uc0ac\ud569\ub2c8\ub2e4 \u314e\u314e",
                                                        "author": {
                                                            "login": "Dev-Yesung"
                                                        },
                                                        "url": "https://github.com/prgrms-be-devcourse/springboot-jpa/pull/248#discussion_r1274364448",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "40ccb25",
                                                            "authoredDate": "2023-07-25T17:47:44Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "\uc774 \uc815\ubcf4\uac00 \ub9de\ub294\uc9c0 \ubaa8\ub974\uaca0\ub294\ub370 \ub0b4\ubd80\uc801\uc778 \uba54\ucee4\ub2c8\uc998\uc0c1 \uae30\ubcf8\uc0dd\uc131\uc790\ub97c \ub9cc\ub4dc\ub294\uac8c \uc81c\uc77c \uc911\uc694\ud558\uad70\uc694...! \uc218\uc815\ud558\uaca0\uc2b5\ub2c8\ub2e4~\nhttps://chat.openai.com/share/a91172f5-5778-43d1-9c66-8321720753be",
                                                        "author": {
                                                            "login": "Dev-Yesung"
                                                        },
                                                        "url": "https://github.com/prgrms-be-devcourse/springboot-jpa/pull/248#discussion_r1274378327",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "40ccb25",
                                                            "authoredDate": "2023-07-25T17:47:44Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "JPA\uac00 DB\uc5d0\uc11c \ub370\uc774\ud130\ub97c \uac00\uc838\uc62c\ub54c\ub294 \uae30\ubcf8\uc801\uc73c\ub85c (\ub9e4\uac1c\ubcc0\uc218\uac00 \uc5c6\ub294)\uae30\ubcf8\uc0dd\uc131\uc790\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc73c\ub85c \uc54c\uace0\uc788\uc2b5\ub2c8\ub2e4..! \uc774\ud6c4 Reflection API\ub97c \uc0ac\uc6a9\ud558\uc5ec private \ud544\ub4dc\uc5d0 \uc9c1\uc811 \uc811\uadfc\ud558\uace0 \uac12\uc744 \ubcc0\uacbd\ud558\uae30\uc5d0, id\ub97c \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\ub294 \uc0dd\uc131\uc790\ub3c4 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294\uac83\uc73c\ub85c \uc800\ub294 \uc54c\uace0\uc788\uc2b5\ub2c8\ub2e4..!\n\ub2e4\uc74c \uae00\uc744 \ucc38\uace0\ud574\ubcf4\uc154\ub3c4 \uc88b\uc744 \uac83 \uac19\uc2b5\ub2c8\ub2e4!\nhttps://velog.io/@yyy96/JPA-%EA%B8%B0%EB%B3%B8%EC%83%9D%EC%84%B1%EC%9E%90",
                                                        "author": {
                                                            "login": "kimihiqq"
                                                        },
                                                        "url": "https://github.com/prgrms-be-devcourse/springboot-jpa/pull/248#discussion_r1274379093",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "40ccb25",
                                                            "authoredDate": "2023-07-25T17:47:44Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "\uc624 \uc800\ub3c4 \uc774 \uae00 \uc77d\uc5c8\ub294\ub370, \uacb0\uad6d \uae30\ubcf8\uc0dd\uc131\uc790\uac00 \ubc18\ub4dc\uc2dc \ud544\uc694\ud55c \uc774\uc720\uc640 \ub3d9\uc77c\ud558\uad70\uc694!! \uc774\ud574\ub410\uc2b5\ub2c8\ub2e4 \u314e\u314e \uc790\uc138\ud55c \ub2f5\ubcc0 \uac10\uc0ac\ud569\ub2c8\ub2e4~",
                                                        "author": {
                                                            "login": "Dev-Yesung"
                                                        },
                                                        "url": "https://github.com/prgrms-be-devcourse/springboot-jpa/pull/248#discussion_r1274380190",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "40ccb25",
                                                            "authoredDate": "2023-07-25T17:47:44Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "textMatches": [
                        {
                            "property": "comments.body"
                        },
                        {
                            "property": "title"
                        }
                    ]
                },
                {
                    "node": {
                        "number": 8208,
                        "title": "Use a bound `TypeVar` for `DataArray` and `Dataset` methods",
                        "repository": {
                            "nameWithOwner": "pydata/xarray",
                            "primaryLanguage": {
                                "name": "Python"
                            }
                        },
                        "createdAt": "2023-09-19T03:46:33Z",
                        "mergedAt": null,
                        "url": "https://github.com/pydata/xarray/pull/8208",
                        "state": "CLOSED",
                        "author": {
                            "login": "max-sixty"
                        },
                        "editor": {
                            "login": "max-sixty"
                        },
                        "body": "- [ ] User visible changes (including notable bug fixes) are documented in `whats-new.rst`\r\n\r\nEdit: I added a [comment](https://github.com/pydata/xarray/pull/8208#issuecomment-1725054516) outlining a problem with this\r\n\r\n---\r\n\r\nI _think_ we should be using a `TypeVar(..., bound=...)` for our typing, since otherwise subtypes aren't allowed. I don't see a compelling reason to have all of `T_DataWithCoords` and `T_DataArrayOrSet` and `T_Xarray`, though I might be missing something.\r\n\r\nSo this unifies all `T_DataWithCoords`, `T_DataArrayOrSet` and `T_Xarray` to `T_Xarray`, and changes that type to be bound on a union of `DataArray` & `Dataset` (similar to the existing `T_DataArrayOrSet`). This covers the bulk of our API \u2014 functions which transform either a `DataArray` or `Dataset` and return the input type.\r\n\r\nThis does require some manual casts; I think because when there's a concrete path for both `DataArray` & `Dataset`, mypy doesn't unify them back together. It's also possible I'm missing something.\r\n\r\nOne alternative \u2014 a minor change \u2014 would be to bound on `DataWithCoords`, like the existing `T_DataWithCoords`, rather than the union. A quick comparison showed each required some additional casts / ignores over the other.\r\n",
                        "reviews": {
                            "edges": [
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                    self: Self,\n          \n          \n            \n                    self,\n          \n      \n    \n    \n  \n\nThis Self is unnecessary",
                                                        "author": {
                                                            "login": "headtr1ck"
                                                        },
                                                        "url": "https://github.com/pydata/xarray/pull/8208#discussion_r1329731853",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "e1c3df1",
                                                            "authoredDate": "2023-09-19T04:15:49Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                ) -> RollingExp[T_Xarray]:\n          \n          \n            \n                ) -> RollingExp[Self]:",
                                                        "author": {
                                                            "login": "headtr1ck"
                                                        },
                                                        "url": "https://github.com/pydata/xarray/pull/8208#discussion_r1329733138",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "e1c3df1",
                                                            "authoredDate": "2023-09-19T04:15:49Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "That's weird that these casts are now necessary...",
                                                        "author": {
                                                            "login": "headtr1ck"
                                                        },
                                                        "url": "https://github.com/pydata/xarray/pull/8208#discussion_r1329736856",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "e1c3df1",
                                                            "authoredDate": "2023-09-19T04:15:49Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Unfortunately this doesn't work, similar to the reason outlined below \u2014\u00a0T_Xarray isn't compatible with T_DataWithCoords...",
                                                        "author": {
                                                            "login": "max-sixty"
                                                        },
                                                        "url": "https://github.com/pydata/xarray/pull/8208#discussion_r1329778006",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "e1c3df1",
                                                            "authoredDate": "2023-09-19T04:15:49Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Unfortunately this doesn't work, similar to the reason outlined below \u2014\u00a0T_Xarray isn't compatible with T_DataWithCoords...\n\nI think thats why originally I was typing RollingExp using T_DataWithCoords",
                                                        "author": {
                                                            "login": "headtr1ck"
                                                        },
                                                        "url": "https://github.com/pydata/xarray/pull/8208#discussion_r1330062244",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "e1c3df1",
                                                            "authoredDate": "2023-09-19T04:15:49Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "textMatches": [
                        {
                            "property": "comments.body"
                        }
                    ]
                },
                {
                    "node": {
                        "number": 4417,
                        "title": "Add logic to check if the JWT token has expired",
                        "repository": {
                            "nameWithOwner": "alcionai/corso",
                            "primaryLanguage": {
                                "name": "Go"
                            }
                        },
                        "createdAt": "2023-10-02T06:55:23Z",
                        "mergedAt": "2023-10-09T10:06:01Z",
                        "url": "https://github.com/alcionai/corso/pull/4417",
                        "state": "MERGED",
                        "author": {
                            "login": "pandeyabs"
                        },
                        "editor": {
                            "login": "pandeyabs"
                        },
                        "body": "<!-- PR description-->\r\n**Changes**\r\n* Introduce jwt expiry checks, to be used in a later PR. Based off @vkamra's idea. \r\n* Add an url parsing helper func to extract the value of specified query param(e.g. `tempauth`).\r\n* Unit tests for both above.\r\n\r\n\r\n---\r\n\r\n#### Does this PR need a docs update or release note?\r\n\r\n- [ ] :white_check_mark: Yes, it's included\r\n- [x] :clock1: Yes, but in a later PR\r\n- [ ] :no_entry: No\r\n\r\n#### Type of change\r\n\r\n<!--- Please check the type of change your PR introduces: --->\r\n- [ ] :sunflower: Feature\r\n- [ ] :bug: Bugfix\r\n- [ ] :world_map: Documentation\r\n- [ ] :robot: Supportability/Tests\r\n- [ ] :computer: CI/Deployment\r\n- [ ] :broom: Tech Debt/Cleanup\r\n- [x] Optimization\r\n\r\n#### Issue(s)\r\n\r\n<!-- Can reference multiple issues. Use one of the following \"magic words\" - \"closes, fixes\" to auto-close the Github issue. -->\r\n* internal\r\n\r\n#### Test Plan\r\n\r\n<!-- How will this be tested prior to merging.-->\r\n- [ ] :muscle: Manual\r\n- [x] :zap: Unit test\r\n- [ ] :green_heart: E2E\r\n",
                        "reviews": {
                            "edges": [
                                {
                                    "node": {
                                        "state": "APPROVED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "nit: the time package provides comparison functions time.Time.Before(t2) and time.Time.After(t2). We should use those instead of converting to seconds\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n            \texpired := t.Time.Unix() < time.Now().Unix()\n          \n          \n            \n            \texpired := t.After(time.Now())",
                                                        "author": {
                                                            "login": "ashmrtn"
                                                        },
                                                        "url": "https://github.com/alcionai/corso/pull/4417#discussion_r1342918097",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "8193a83",
                                                            "authoredDate": "2023-10-02T13:30:53Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Thanks! I did consider it. Here are the reasons for going with unix time.\n\nRFC 7519 states that the exp, nbf, and iat claim values must be NumericDate values. NumericDate is defined as the number of seconds since epoch. Source. So converting to seconds is okay here.\nJWT producer may be in a different timezone compared to consumer. Although this can be addressed by converting both to UTC.",
                                                        "author": {
                                                            "login": "pandeyabs"
                                                        },
                                                        "url": "https://github.com/alcionai/corso/pull/4417#discussion_r1342931647",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "8193a83",
                                                            "authoredDate": "2023-10-02T13:30:53Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "JWT producer may be in a different timezone compared to consumer. Although this can be addressed by converting both to UTC.\n\nWouldn't timezone be an issue in either case? It's just not apparent when converting to Unix since timezone info is elided during the conversion. After and Before also take into account timezones\nIt seems like we should probably figure out what timezone the parsed value from the JWT token is created in. time.Now() says it uses the local timezone",
                                                        "author": {
                                                            "login": "ashmrtn"
                                                        },
                                                        "url": "https://github.com/alcionai/corso/pull/4417#discussion_r1342978636",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "8193a83",
                                                            "authoredDate": "2023-10-02T13:30:53Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "https://chat.openai.com/share/9550ff9a-5077-459d-a35e-47c20890240e",
                                                        "author": {
                                                            "login": "vkamra"
                                                        },
                                                        "url": "https://github.com/alcionai/corso/pull/4417#discussion_r1343011112",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "8193a83",
                                                            "authoredDate": "2023-10-02T13:30:53Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Wouldn't timezone be an issue in either case? It's just not apparent when converting to Unix since timezone info is elided during the conversion. It seems like we should probably figure out what timezone the parsed value from the JWT token is created in\n\nTimezone is not an issue because unix timestamps are timezone independent. Machine A in NY and Machine B in WA would produce the same unix timestamp at a given point in time. They have a common reference, which is # of seconds elapsed since 00:00:00 UTC on 1 January 1970\n\nAfter and Before also take into account timezones\n\nThanks! I'll switch to this, although I don't see any issues with existing code.",
                                                        "author": {
                                                            "login": "pandeyabs"
                                                        },
                                                        "url": "https://github.com/alcionai/corso/pull/4417#discussion_r1344008153",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "8193a83",
                                                            "authoredDate": "2023-10-02T13:30:53Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "@vkamra My first commit in this PR was based off dgrijalva/jwt-go, same package used by chatgpt. It has a verifyExpiresAt func which does time comparisons after converting to Unix(), like I am doing right now. Here is my old code which uses verifyExpiresAt.\nThis func was deprecated(unexposed) in golang-jwt/jwt/v5.  They put it behind a validator which is currently not accessible for ParseUnverified.\nWe can use either unix timestamp comparisons or time.before/after like Ashlie suggested. I think both approaches are fine and will work.",
                                                        "author": {
                                                            "login": "pandeyabs"
                                                        },
                                                        "url": "https://github.com/alcionai/corso/pull/4417#discussion_r1344033063",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "8193a83",
                                                            "authoredDate": "2023-10-02T13:30:53Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "I'll add some tests with jwt producer/consumer in different timezones.",
                                                        "author": {
                                                            "login": "pandeyabs"
                                                        },
                                                        "url": "https://github.com/alcionai/corso/pull/4417#discussion_r1344038029",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "8193a83",
                                                            "authoredDate": "2023-10-02T13:30:53Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "@vkamra My first commit in this PR was based off dgrijalva/jwt-go, same package used by chatgpt. It has a verifyExpiresAt func which does time comparisons after converting to Unix(), like I am doing right now. Here is my old [code](\nf03eeef#diff-74f564165519040be446f0254397adc4f6e516f15145d1de5b286a4bd564eb3cR26) which uses verifyExpiresAt.\nThis func was deprecated(unexposed) in golang-jwt/jwt/v5.  They put it behind a validator which is currently not accessible for ParseUnverified.\nWe can use either unix timestamp comparisons or time.before/after like Ashlie suggested. I think both approaches are fine and will work.\n\nYeah sorry I should have provided context. I pasted that not to suggest we should switch the library but to provide input on the time zone question and also that we should use time.After/Before. Agree with your proposal.",
                                                        "author": {
                                                            "login": "vkamra"
                                                        },
                                                        "url": "https://github.com/alcionai/corso/pull/4417#discussion_r1344251952",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "8193a83",
                                                            "authoredDate": "2023-10-02T13:30:53Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Timezone is not an issue because unix timestamps are timezone independent.\n\nhuh well TIL. Thanks for the pointer! Timezones are always such a mindbending experience to reason through \ud83d\ude43",
                                                        "author": {
                                                            "login": "ashmrtn"
                                                        },
                                                        "url": "https://github.com/alcionai/corso/pull/4417#discussion_r1344277478",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "8193a83",
                                                            "authoredDate": "2023-10-02T13:30:53Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "textMatches": [
                        {
                            "property": "comments.body"
                        },
                        {
                            "property": "body"
                        }
                    ]
                },
                {
                    "node": {
                        "number": 875,
                        "title": "feature/pos-syncing-and-steady-state",
                        "repository": {
                            "nameWithOwner": "deso-protocol/core",
                            "primaryLanguage": {
                                "name": "Go"
                            }
                        },
                        "createdAt": "2023-12-16T17:59:41Z",
                        "mergedAt": "2024-02-07T20:39:14Z",
                        "url": "https://github.com/deso-protocol/core/pull/875",
                        "state": "MERGED",
                        "author": {
                            "login": "tholonious"
                        },
                        "editor": null,
                        "body": "",
                        "reviews": {
                            "edges": [
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Hmm seed hex not mnemonic? I guess because (mnemonic)->seedHex is a one-way operation, so everyone will have the latter but NOT everyone will have the former right?",
                                                        "author": {
                                                            "login": "diamondhands0"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1452664410",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "84a22d2",
                                                            "authoredDate": "2024-01-10T17:32:07Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "So I think we're modifying the bestHeaderChain independent of the bestChain, even though we want them to be in-sync. I think it's fine, just feels a bit scary to have two things that need to remain consistent being modified independently.",
                                                        "author": {
                                                            "login": "diamondhands0"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1452844792",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "84a22d2",
                                                            "authoredDate": "2024-01-10T17:32:07Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Ugh it deleted this long comment I wrote and now I have to type it again... I was saying that this could break frontends because they have the following flow:\n\nBackend constructs txn and sends it to frontend to sign\nFrontend signs and sends to /submit-transaction\n/submit-transaction calls BroadcastTransaction (this thing) and returns\nThen the frontend refreshes under the assumption the txn is in the mempool and its effect will show up after the refresh.\n\nIf we delete this thing then it could cause frontends to miss the txn's effect on refresh. A few ways to fix this:\n\nHave frontend wait for inclusion in a block, which will take a bit of time. Not a big deal. We could wait for a post but maybe not a diamond or things like that.\nAlternatively we could be smarter about how we render things in the mempool in the frontend.\n\nI don't think we have to worry about this for now. I'm just mentioning for when you encounter it later.",
                                                        "author": {
                                                            "login": "diamondhands0"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1452848504",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "84a22d2",
                                                            "authoredDate": "2024-01-10T17:32:07Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I've been thinking about this. Better to make it a param or flag? I think flag to start would be good so we can tune it. Eventually for Revolution it needs to be more static, but that can wait...",
                                                        "author": {
                                                            "login": "diamondhands0"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1452852985",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "84a22d2",
                                                            "authoredDate": "2024-01-10T17:32:07Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I will come back to this, but we used to use this in the steady-state to keep the node in sync as follows:\n\nWe call GetHeaders on a peer\nThey send us a header bundle\nBased on that we may or may not fetch a block\n\nIf we're not doing the above, then we must have a different way of fetchin ga block when the consensus is running. Is this because blocks are \"pushed\" to us? I'll keep reading.",
                                                        "author": {
                                                            "login": "diamondhands0"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1452855266",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "84a22d2",
                                                            "authoredDate": "2024-01-10T17:32:07Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I think there could be a problem if you hold the the ChainLock.RLock() while you wait for this thing. Maybe not. It does take like a whole second or two, though, and I think kindof bad to hold the RLock for that long maybe idk. Think about it.",
                                                        "author": {
                                                            "login": "diamondhands0"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1452858510",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "84a22d2",
                                                            "authoredDate": "2024-01-10T17:32:07Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "This makes me a little nervous as there might be edge cases where it's rejected that we haven't thought of, but I can't think of any so probably OK.",
                                                        "author": {
                                                            "login": "diamondhands0"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1452868076",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "84a22d2",
                                                            "authoredDate": "2024-01-10T17:32:07Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Huh. That's all we had to add eh? Pretty elegant...",
                                                        "author": {
                                                            "login": "diamondhands0"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1452868783",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "84a22d2",
                                                            "authoredDate": "2024-01-10T17:32:07Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Mention why we need this. I saw it but nice to have it there.",
                                                        "author": {
                                                            "login": "diamondhands0"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1452879464",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "84a22d2",
                                                            "authoredDate": "2024-01-10T17:32:07Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Hmm, good call. We really only need to hold the ChainLock.RLock() while reading the blockTip's height. I've updated the code to reflect that",
                                                        "author": {
                                                            "login": "tholonious"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1456051682",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "84a22d2",
                                                            "authoredDate": "2024-01-10T17:32:07Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Yup. That's all we need to integrate the new consensus :)",
                                                        "author": {
                                                            "login": "tholonious"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1456055369",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "84a22d2",
                                                            "authoredDate": "2024-01-10T17:32:07Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "AFAIK, there isn't a standard derivation path to convert a BIP39 seed phrase to BLS private key. So we use the standard seedHex -> bls.PrivKey conversion provided by the FlowCrypto package.",
                                                        "author": {
                                                            "login": "tholonious"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1456063493",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "84a22d2",
                                                            "authoredDate": "2024-01-10T17:32:07Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Done.",
                                                        "author": {
                                                            "login": "tholonious"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1456067757",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "84a22d2",
                                                            "authoredDate": "2024-01-10T17:32:07Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Yes, we want to make this a flag that's easily tunable via ENV variables. The comment to make it a param was just ambiguous. I've fixed it",
                                                        "author": {
                                                            "login": "tholonious"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1456081777",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "84a22d2",
                                                            "authoredDate": "2024-01-10T17:32:07Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Agreed. If a txn is accepted by the PoW mempool, then it must be accepted by the PoS mempool too. The PoS mempool has a strictly relaxed set of txn acceptance rules compared to its PoW counterpart. I can't think of any edge cases either, so this should be safe",
                                                        "author": {
                                                            "login": "tholonious"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1456089539",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "84a22d2",
                                                            "authoredDate": "2024-01-10T17:32:07Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Yes! We have a different and simpler way of fetching blocks once the new consensus is running:\n\nBlocks are pushed to us without us having to request them in the new consensus\nWhenever we see an orphan block with an unknown ancestor, we request the missing ancestor a peer until we have a fully connected chain",
                                                        "author": {
                                                            "login": "tholonious"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1456095635",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "84a22d2",
                                                            "authoredDate": "2024-01-10T17:32:07Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Hmm, I'm not sure this is much of an issue. I did notice in ProcessBlockPoW that we call processHeaderPoW in a way that mutates the bestHeaderChain independently, so I figured this would be safe.\nI'll noodle on this to see if we can better couple mutations to the bestChain and bestHeaderChain here while keeping the reorgs simple. LMK if you have a strong opinion on this one",
                                                        "author": {
                                                            "login": "tholonious"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1456099796",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "84a22d2",
                                                            "authoredDate": "2024-01-10T17:32:07Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Start this out as a configurable flag on the node.",
                                                        "author": {
                                                            "login": "diamondhands0"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1460171949",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "10c2aa5",
                                                            "authoredDate": "2024-01-19T18:03:35Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "This seems like it should totally work, but a thought I had is it may be inefficient in the sense that you will do a lot of round-trips if you get a far-ahead block. For example, if the peer has A -> B -> C -> D -> E -> F and you're at just A and the peer sends you F, then you will try to connect F, fail, then request E, then you'll get E, try to connect it fail and request D, and so on. I don't think we need to optimize this right now because nodes will generally be nearly-synced at this stage. But leave a comment that this behavior exists if it's correct.\nOne way to fix this is to send your tip inside the GetBlocks message, and then the node can auto-send you everything from your tip to its tip. But again I think this is probably a premature optimization we don't need to make right now. If you like that optimization then leave it as a TODO for fun.",
                                                        "author": {
                                                            "login": "diamondhands0"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1460183510",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "10c2aa5",
                                                            "authoredDate": "2024-01-19T18:03:35Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Btw just added context: The above suggestion is a simplified version of what GetHeaders does. The GetHeaders thing does a sophisticated \"common ancestor\" check between the two nodes by sending an exponentially-backed-off list of your headers, eg: tip, tip-1, tip-2, tip-4, tip-8, tip-16, ..., genesis. This covers cases where nodes are super divergent, which can happen in Bitcoin but can't happen in PoS so it doesn't make sense to port it over. Instead, sending the committed tip only, and then having the node send you its next N blocks from the tip automatically, seems like the \"most right\" thing to do with PoS. But again I think what you have works and just adding a TODO is good and will work great.",
                                                        "author": {
                                                            "login": "diamondhands0"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1460185114",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "10c2aa5",
                                                            "authoredDate": "2024-01-19T18:03:35Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Hmmm... it feels like you don't need to store the safe blocks on the fc object. Rather, you can just compute them on the fly from the blockchain object every time. This would be like a tiny bit less efficient, but it would also be less redundant and less error-prone.\nIs there a reason you want to store and update a list of safeblocks on the fc object rather than recomputing them on the fly every time?",
                                                        "author": {
                                                            "login": "diamondhands0"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1460195510",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "10c2aa5",
                                                            "authoredDate": "2024-01-19T18:03:35Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Ah I see... it looks like the FastHotStuffEventLoop is distinct from the FastHotStuffConsensus object, and the former doesn't have a blockchain object, which is why you have to do this update manually. This makes sense, and I like the design because it makes it much easier to test the consensus code.",
                                                        "author": {
                                                            "login": "diamondhands0"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1460196199",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "10c2aa5",
                                                            "authoredDate": "2024-01-19T18:03:35Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Ok but I'm still confused about something. Don't you always need to call UpdateSafeBlocks, even if the new block was added to the tip? I'm not seeing where FastHotStuffEventLoop.safeBlocks gets updated in the case where we just attach a block to the tip, even though I think we should be adding the tip block to safeBlocks in that case.",
                                                        "author": {
                                                            "login": "diamondhands0"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1460200230",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "10c2aa5",
                                                            "authoredDate": "2024-01-19T18:03:35Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Sorry nevermind. It's a few lines later, and gets updated in FastHotStuffEventLoop.ProcessTipBlock().",
                                                        "author": {
                                                            "login": "diamondhands0"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1460200408",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "10c2aa5",
                                                            "authoredDate": "2024-01-19T18:03:35Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Just a heads-up. By the time we get here, we're guaranteed that our tip will be within MaxTipAge of the \"true\" tip on the network, where MaxTipAge is 24h. Specifically, the order is: 1) sync all the headers, 2) download all the blocks for those headers, 3) the next thing that would trigger with your code is _handleBlock().\nIf we assume the above, then we could potentially be an hour or more behind at step (2) causing the first tip block we get to do a lot of catch-up. I think this is probably fine, since an hour of blocks is only 3600 little blocks. But it's something to keep in mind as your testing. And if it's slow or suboptimal, you can do the update to add your committed tip to GetBlocks() that I mentioned previously.",
                                                        "author": {
                                                            "login": "diamondhands0"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1460218176",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "10c2aa5",
                                                            "authoredDate": "2024-01-19T18:03:35Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Reading through a bit more, I think something a bit odd that could happen is you could hit some weird timeouts if you call fastHotStuffConsensus.Start() before that last hour or two of blocks has been downloaded. It seems like it would figure itself out, but just be aware of this as you start testing.",
                                                        "author": {
                                                            "login": "diamondhands0"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1460232024",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "10c2aa5",
                                                            "authoredDate": "2024-01-19T18:03:35Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Something I couldn't figure out yet is where we broadcast votes/timeouts to our peers. I think maybe you haven't done this yet because it relies on the connection management stuff.",
                                                        "author": {
                                                            "login": "diamondhands0"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1460235845",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "10c2aa5",
                                                            "authoredDate": "2024-01-19T18:03:35Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Hmm... so BIP39 is actually supposed to go from mnemonic -> seedHex, not to be confused with bip32 which deals with derivation paths and things like that. You can open identity and hit \"advanced\" on the part where it shows you a seed phrase and then see how it converts it:\nhttps://ibb.co/wwW1rKH\nMy thinking is it would probably be good to make it so that the flag is a mnemonic, and that the seed hex used is identical to that generated by identity, which is standard bip39 generation.\nI could also see the argument for keeping it as raw seed hex. In that case we'll just have to tell people to copy it from the advanced section or something. Also it feels easier to lose a seed hex than a mnemonic but idk.",
                                                        "author": {
                                                            "login": "diamondhands0"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1460246030",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "84a22d2",
                                                            "authoredDate": "2024-01-10T17:32:07Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "There should be a function somewhere that's like MnemonicToSeed or SeedToMnemonic",
                                                        "author": {
                                                            "login": "diamondhands0"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1460246261",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "84a22d2",
                                                            "authoredDate": "2024-01-10T17:32:07Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Yes, this requires the connection management code to be complete. For now, I independently implemented the consensus and added TODO's at the exact lines where network messages would be broadcast. The network send calls will be plug-and-play once Piotr has finished the networking code.",
                                                        "author": {
                                                            "login": "tholonious"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1462538957",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "10c2aa5",
                                                            "authoredDate": "2024-01-19T18:03:35Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Oh, I like this. And agreed that a seed phrase is easier to manage for node operators, vs a more arbitrary seed hex. The one thing I'm not sure of is whether the seed hex generated via BIP39 matches the number of bytes that the bls private key expects. I'll try to update to this.",
                                                        "author": {
                                                            "login": "tholonious"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1462541512",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "84a22d2",
                                                            "authoredDate": "2024-01-10T17:32:07Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Implemented in PR #946",
                                                        "author": {
                                                            "login": "tholonious"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1465473483",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "84a22d2",
                                                            "authoredDate": "2024-01-10T17:32:07Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Implemented in PR #949",
                                                        "author": {
                                                            "login": "tholonious"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1466595361",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "10c2aa5",
                                                            "authoredDate": "2024-01-19T18:03:35Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Your understanding of the block by block roundtrip to sync A ... F is correct. It is inefficient, but my expectation was also that by the time a validator is in the steady state consensus, it will be nearly synced with all of its peers that this isn't an issue.\n\nOne way to fix this is to send your tip inside the GetBlocks message, and then the node can auto-send you everything from your tip to its tip. But again I think this is probably a premature optimization we don't need to make right now. If you like that optimization then leave it as a TODO for fun.\n\nYour comment is a big unlock for better optimizing the syncing here. I'll add the TODO with context + link to this comment. This will be a straightforward optimization if we ever need it.",
                                                        "author": {
                                                            "login": "tholonious"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1466628141",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "10c2aa5",
                                                            "authoredDate": "2024-01-19T18:03:35Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "You're right, this totally breaks the frontends. I'm seeing it already on regtest. cc: @lazynina since this is something we'll need to solve.\nPast discussions on this landed on optimistic UI updates for less critical and idempotent txns (posts, comments, likes,...) and to wait for block confirmation for more sensitive txns (basic transfers, limit order,...). The state syncer was the natural place to do optimistic updates. As a v0 solution though, maybe it's fine to wait for one block conf for everything cc: @lazynina so you're aware",
                                                        "author": {
                                                            "login": "tholonious"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1468263782",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "84a22d2",
                                                            "authoredDate": "2024-01-10T17:32:07Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "On second review, updating the bestChain in lockstep with the bestHeaderChain here is fine. It's turns out to be a no-op from the context of running processBlockPoS because the bestHeaderChain always ends up with the same final state as the bestChain. But the peace of mind of updating them in lockstep here is a nice to have. I've addressed your feedback in #962",
                                                        "author": {
                                                            "login": "tholonious"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1470073442",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "84a22d2",
                                                            "authoredDate": "2024-01-10T17:32:07Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Added the comment here: #963",
                                                        "author": {
                                                            "login": "tholonious"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1470143215",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "10c2aa5",
                                                            "authoredDate": "2024-01-19T18:03:35Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Yes, this will figure itself out! Consecutive timeouts have exponential backoff, so a node that's timing out will have its view increment more slowly than the rest of the network. After 2-3 views, the timed out node will have a lower view than the rest of the network, so it will accept the rest of the network's higher view blocks",
                                                        "author": {
                                                            "login": "tholonious"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1470151209",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "10c2aa5",
                                                            "authoredDate": "2024-01-19T18:03:35Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "The only caveat is that depending on how far back the timed out node is it, the syncing may be inefficient. It's the same inefficiency you pointed out in #875 (comment)\nI think that's an optimization we can defer for the future depending on testing looks on devnet",
                                                        "author": {
                                                            "login": "tholonious"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1470153615",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "10c2aa5",
                                                            "authoredDate": "2024-01-19T18:03:35Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Something I was telling Zordon is we should make it so these arguments accept EITHER a \"seed hex\" OR a \"seed phrase.\" Not sure if you want to do that here, but I'm mentioning as it came in handy elsewhere. I think he made it so that if it starts with 0x, he reads it as a seed hex, otherwise he reads it as a seed phrase.",
                                                        "author": {
                                                            "login": "diamondhands0"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1475489288",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "c405758",
                                                            "authoredDate": "2024-02-01T22:58:30Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Hmm... is it better for these to be flags or for them to be ParamUpdater? I'm thinking about how we would change these values later, for example if we want to reduce the block production interval to 1s or even faster if we think the network can handle it.\nRight now, there's not really a good upgrade path here. You would need everyone to upgrade their flags at the exact same time or else the network would break. I think originally we said we'd put these in ParamUpdater for this reason, since it can safely change these values.",
                                                        "author": {
                                                            "login": "diamondhands0"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1475491774",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "c405758",
                                                            "authoredDate": "2024-02-01T22:58:30Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Separate question is whether we should start this number low and increase it OR start it high and decrease it. I thought about it, and it feels like starting LOW is actually better. If we start it low, we'll encounter issues in devnet and know what our \"limits\" are. However, if we start it high we may be running at too generous of a buffer and always be too afraid to reduce it.\nThis is also something that seems easier to test with ParamUpdater, since you can play with values quickly while the network is live and see what happens, rather than having to reboot the whole network.",
                                                        "author": {
                                                            "login": "diamondhands0"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1475492471",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "c405758",
                                                            "authoredDate": "2024-02-01T22:58:30Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "These mempool params seem appropriate as flags. In my view, any consensus variables that require coordination among node operators should be in ParamUpdater probably. Anything that individual nodes can update independently should be flags.",
                                                        "author": {
                                                            "login": "diamondhands0"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1475493147",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "c405758",
                                                            "authoredDate": "2024-02-01T22:58:30Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I notice you're ignoring the error here. What it looks like is happening right now is the following:\n0. When we boot up the node before the PoS cut-over height, we will set its PoS params, which will cause us to enter this loop (note that IsRunning() doesn't have a block height check).\n\nBefore the PoS cut-over height, we are calling fasthotStuffConsensus.HandleBlock() -> processBlockPoS -> tryConnectBlockAsNewTip (or whatever it's called), which is erroring because we're not at the cut-over height yet.\nThe error bubbles all the way up to here, where it's ignored.\nEventually, we pass the cut-over height and this stops erroring.\n\nInstead, I recommend the following:\n\nGate this on the cut-over height so we don't enter it until we're supposed to.\nCatch the error here, since it probably means something is messed up.",
                                                        "author": {
                                                            "login": "diamondhands0"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1475519738",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "c405758",
                                                            "authoredDate": "2024-02-01T22:58:30Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Why not !srv.blockchain.IsPoSBlockHeight here?",
                                                        "author": {
                                                            "login": "diamondhands0"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1475522790",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "c405758",
                                                            "authoredDate": "2024-02-01T22:58:30Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Ok, I take it back. It looks like we're smart about calling Start(). In particular, we only call it after we reach the cut-over height height, which means IsRunning() will return false until that point.\nWe should still catch the error here though!",
                                                        "author": {
                                                            "login": "diamondhands0"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1475522794",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "c405758",
                                                            "authoredDate": "2024-02-01T22:58:30Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "I'm walking through the transition from PoW to PoS and I'm running into an issue, which I can't resolve. Based on my analysis, it seems like we should hit a RuleErrorRuleErrorParentBlockHasViewGreaterOrEqualToChildBlock at the PosCutoverHeight2. I'll explain why it looks like this to me, and maybe you can tell me what I'm missing:\ngenesis\n* block_producer.go\n* Miner queries for template with height = Pos2CutoverHeight\n* Finds winning hash\n* Sends it to /submit-block\n* Gets to _handleBlock() with a PoW block that has height << PosCutoverHeight2\n* srv.fastHotStuffConsensus.HandleBlock() is skipped because IsRunning() is not true\n* ProcessBlock calls processBlocPoW because < PosCutoverHeight2\n* block_producer.go and miners get busy producing the next PoW block...\n\nGood so far!\n\n\nPoW height = PoSCutoverHeight - 1\n* A block is mined with height = PoSCutoverHeight - 1\n* Gets to _handleBlock()\n* srv.fastHotStuffConsensus.HandleBlock() is skipped because IsRunning() is not true\n* ProcessBlock calls processBlocPoW because < PosCutoverHeight2\n* block_producer.go and miners get busy producing the next PoW block...\n\nPoW height = PoSCutoverHeight2\n* Here's where it gets weird. Notice that block_producer.go does NOT set ProposedInView to anything, so I assume it's zero for all PoW blocks, including this one.\n* _handleBlock() is called on this last PoW block\n* BUT ProcessBlock calls processBlockPoS because = PosCutoverHeight2\n* We et to -> getLineageFromCommittedTip -> getCommittedTip -> returns PoW block with height = (PosCutoverHeight2 - 1)\n  - This works because all PoW blocks return IsCommitted() = true. Still good so far...\n* Where we get screwed is I think we end up returning RuleErrorParentBlockHasViewGreaterOrEqualToChildBlock in getLineageFromCommittedTip() because we never set the view in any of our PoW blocks.\n\n\nI was searching around to see if maybe we were implicitly setting ProposedInView to the height somewhere but I couldn't find anywhere we were doing it. Not sure how we could ever get past getLineageFromTip() with a PoW block without setting ProposedInView to the right value in the parent.",
                                                        "author": {
                                                            "login": "diamondhands0"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1475539437",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "c405758",
                                                            "authoredDate": "2024-02-01T22:58:30Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I see we set ProposedInView here, which is good. But again I'm not seeing how ew get past the error in getLineageFromCommittedTip().",
                                                        "author": {
                                                            "login": "diamondhands0"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1475542183",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "c405758",
                                                            "authoredDate": "2024-02-01T22:58:30Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Did some more digging. It looks like you define a MsgDeSoHeader.GetView() that patches the view with the height for HeaderVersion1/0. BUT the code in getLineageFromTip() still looks wrong because it's calling block.Header.ProposedInview. Will keep reading...",
                                                        "author": {
                                                            "login": "diamondhands0"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1475543506",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "c405758",
                                                            "authoredDate": "2024-02-01T22:58:30Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Mystery solved. Before the line that checks ProposedInView in getCommittedTip(), there is this line, which breaks out of the for loop:\nif currentBlock.Hash.IsEqual(highestCommittedBlock.Hash) {\n    break\n\nThis results in an empty ancestors list being returned, which is what we expect.",
                                                        "author": {
                                                            "login": "diamondhands0"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1475551088",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "c405758",
                                                            "authoredDate": "2024-02-01T22:58:30Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Love it! Could add a line saying: Mathematically: A' = A \u2216 A \u2229 B and B' = B \u2216 A \u2229 B",
                                                        "author": {
                                                            "login": "AeonSw4n"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1474926672",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "e205050",
                                                            "authoredDate": "2024-02-01T16:34:08Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "*equal",
                                                        "author": {
                                                            "login": "AeonSw4n"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1474979739",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "e205050",
                                                            "authoredDate": "2024-02-01T16:34:08Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "*defined",
                                                        "author": {
                                                            "login": "AeonSw4n"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1475121718",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "e205050",
                                                            "authoredDate": "2024-02-01T16:34:08Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Should we change the oldestAllowedTipTime to less than 24h (bc.params.MaxTipAge) for PoS? It feels like 24 hours of blocks in PoS are much more outdated than 24 hours of PoW blocks.",
                                                        "author": {
                                                            "login": "AeonSw4n"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1475600728",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "c405758",
                                                            "authoredDate": "2024-02-01T22:58:30Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Sounds good. I'll catch and log the error here",
                                                        "author": {
                                                            "login": "tholonious"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1476189294",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "c405758",
                                                            "authoredDate": "2024-02-01T22:58:30Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "We need to start the FastHotStuffConsensus once the chain has connected the final PoW block, which has a height of ProofOfStake2ConsensusCutoverBlockHeight - 1. The final PoW block is the genesis block for the PoS chain, on top of which the PoS consensus votes or times out on",
                                                        "author": {
                                                            "login": "tholonious"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1476212949",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "c405758",
                                                            "authoredDate": "2024-02-01T22:58:30Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Seems fine to me. I'll update these to ParamUpdater params",
                                                        "author": {
                                                            "login": "tholonious"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1476239258",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "c405758",
                                                            "authoredDate": "2024-02-01T22:58:30Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Sounds good. Will move these to ParamUpdater too",
                                                        "author": {
                                                            "login": "tholonious"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1476239765",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "c405758",
                                                            "authoredDate": "2024-02-01T22:58:30Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Resolved in PR #1005",
                                                        "author": {
                                                            "login": "tholonious"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1476539821",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "c405758",
                                                            "authoredDate": "2024-02-01T22:58:30Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Should we replace this with IsPoSBlockHeight for consistency?",
                                                        "author": {
                                                            "login": "AeonSw4n"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1476564259",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "b2f03f4",
                                                            "authoredDate": "2024-02-02T16:16:29Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Yeah, this line is safe. I updated it to set ProposedInView: finalPoWBlock.Header.GetView() so it's clearer too",
                                                        "author": {
                                                            "login": "tholonious"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1476618384",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "c405758",
                                                            "authoredDate": "2024-02-01T22:58:30Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Resolved in PR #1009",
                                                        "author": {
                                                            "login": "tholonious"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1476645021",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "b2f03f4",
                                                            "authoredDate": "2024-02-02T16:16:29Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Clarified the comment further in PR #1010",
                                                        "author": {
                                                            "login": "tholonious"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1476691065",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "c405758",
                                                            "authoredDate": "2024-02-01T22:58:30Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Can you simplify this as simply:\nif tipHeight < cc.params.GetFinalPoWBlockHeight()\n\nlike you have in server.go?",
                                                        "author": {
                                                            "login": "diamondhands0"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1477121496",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "a428965",
                                                            "authoredDate": "2024-02-02T21:30:45Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I would explain a bit more of the \"why\" here. I think we're doing this because it's the easiest way to special-case our QC validation logic at the cutover height. But just explain it so we know/remember.",
                                                        "author": {
                                                            "login": "diamondhands0"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1477122059",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "a428965",
                                                            "authoredDate": "2024-02-02T21:30:45Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Every time I hit \"Go to Definition\" for one of these, it takes me here rather than to the implementation. Even hitting \"Show Usages\" doesn't take me there. Is there an easy way to jump directly to the implementation that I'm not aware of?",
                                                        "author": {
                                                            "login": "diamondhands0"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1477144463",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "a428965",
                                                            "authoredDate": "2024-02-02T21:30:45Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I don't think there's any way for this to be incorrect but just to be safe I would replace all instances of Header.ProposedInview with GetView(), including this instance here.",
                                                        "author": {
                                                            "login": "diamondhands0"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1477172508",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "a428965",
                                                            "authoredDate": "2024-02-02T21:30:45Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "We shouldn't rely on a timeSource anymore. For context, Bitcoin has a really weird way of dealing with time that we sortof emulated before, but that we're not going to be porting over to PoS.\nFor PoS, we want to simply set the block timestamp to:\ncurrentTimestamp = MIN(time.UnixNano(), parentBlock.TstampNanos + 1)\nCritically, the nodes on the network should allow for some amount of drift, say a few minutes, but should reject blocks outside of that strict time range. Bitcoin does this rejection but its window is 2 hours or so, and it does not enforce monotonically increasing timestamps, which causes complications (it would be better if it did).\nI remember we decided that monotonically increasing the timestamp would prevent attacks, but now that I'm thinking about it I'm not 100% sure we need it. It prevents attacks in Proof of Work because the timestamp is used by Proof of Work to adjust the difficulty, but I don't think we rely explicitly on the timestamp for anything in consensus itself, and so I think just having it be currentTimestamp = time.UnixNano() would probably work. In this case, a validator can fudge the time up to our strict time window for one block, but then the next validator would correct it.\nThe above being said, I recommend keeping monotonically increasing timestamps unless we have a good reason not to have them. Among other things, they lead to more consistent behavior for things that rely on the timestamp, such as lockups. In the specific example of lockups, you could have a weird case where a lockup is unlockable for one block but not unlockable for the next, which is kinda dumb (though not fatal).\nSo I would just leave a comment explaining as much as you can about the relevant context above.\nAlso just as a history lesson, I believe Bitcoin Core sets its timestamp based on the median of what its peers tell it the time is or something like that. I don't know if it still does this, but I think that's how Satoshi had it. It prevents your clock from drifting too hard from everyone else's clock, so that you're always suggesting blocks that are within their window.",
                                                        "author": {
                                                            "login": "diamondhands0"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1477174191",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "a428965",
                                                            "authoredDate": "2024-02-02T21:30:45Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Make sure that the mempool cannot accept a txn above this size or it will sit in the mempool forever being skipped by the block producer.",
                                                        "author": {
                                                            "login": "diamondhands0"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1477174956",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "a428965",
                                                            "authoredDate": "2024-02-02T21:30:45Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I think I mentioned this earlier. Can't remember what the decision was though.",
                                                        "author": {
                                                            "login": "diamondhands0"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1477179728",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "c405758",
                                                            "authoredDate": "2024-02-01T22:58:30Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I think if this fails, then newView is compromised and you have to recompute it before you go to the next iteration. Maybe what I would do to keep it light is set copiedView, err = newView.CopyUtxoView() and run this check on copiedView to guarantee newView is always clean. And then if it passes you do newView = copiedView like above.",
                                                        "author": {
                                                            "login": "diamondhands0"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1477184560",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "a428965",
                                                            "authoredDate": "2024-02-02T21:30:45Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "You don't need to hold the lock when you're making a copy. Rewrite this as follows:\nvar readOnlyPointer *UtxoView\nmp.augmentedLatestBlockViewMutex.RLock()\nreadOnlyPointer = mp.augmentedLatestBlockViewMutex\nmp.augmentedLatestBlockViewMutex.RUnlock()\n\nnewView, err := readOnlyPointer.CopyUtxoView()\n\nNote that we can do this because, unlike with the legacy mempool, we are never modifying augmentedLatestBlockView ever. This seems like a small change, but I think it will dramatically increase efficiency because it means we're almost never holding the lock. This change is also the reason why I recommend we decrease the wait time between recomputations of the augmented view.",
                                                        "author": {
                                                            "login": "diamondhands0"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1477185165",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "a428965",
                                                            "authoredDate": "2024-02-02T21:30:45Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "For symmetry, I'd make this augmentedBlockViewRefreshIntervalMillis / 10 so that it checks faster if you update that variable.",
                                                        "author": {
                                                            "login": "diamondhands0"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1477185451",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "a428965",
                                                            "authoredDate": "2024-02-02T21:30:45Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I'd like to start this value at 10ms. I don't think it will cause locking issues here the way it does with legacy mempool because here we hold the write-lock only to make a pointer-copy. In theory, that means we really could set this value to zero and probably be fine. But 10ms seems like a good middle-ground that users hopefully won't really notice.",
                                                        "author": {
                                                            "login": "diamondhands0"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1477185598",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "a428965",
                                                            "authoredDate": "2024-02-02T21:30:45Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I'd rename this to readOnlyAugmentedLatestBlockView since we actually never modify it. Instead, we just always throw away the old one and let it get garbage-collected.",
                                                        "author": {
                                                            "login": "diamondhands0"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1477185644",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "a428965",
                                                            "authoredDate": "2024-02-02T21:30:45Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I don't think you need to hold the lock during the copy. I would rewrite this as:\nmp.RLock()\nreadOnlyPointer = mp.readOnlyLatestBlockView\nmp.RUnblock()\n\nnewView, err := readOnlyPointer.CopyUtxoView()\n\nThis works because we never modify the value of readOnlyLatestView. Instead, we just change the pointer. So you only need to guard the pointer access, not the copy.\nI've always used locks for these cases, but a pointer-copy is so chill I thought maybe Go made it so that it's guaranteed to be atomic. And I think on most hardware the pointer-copy IS atomic, meaning you don't even need a lock around it. But it looks like it's not a guarantee so best to keep the guard you have there.\nThis was my research:\nhttps://chat.openai.com/share/f8aade6f-7822-484a-9057-f656f7429669\nhttps://www.reddit.com/r/golang/comments/yb1ijr/race_or_not_race/",
                                                        "author": {
                                                            "login": "diamondhands0"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1477186869",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "a428965",
                                                            "authoredDate": "2024-02-02T21:30:45Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "A minor note to help you understand my other comments: This field is truly readOnly now, meaning that we don't ever modify the underlying view after we set it. Instead, we just change the pointer to point to a new view. This means that the code for updating this value, as well as the augmentedLatestBlockView value, is much more efficient than it was with the legacy mempool. The reason is that the legacy mempool used to require a view-copy to be inside of a lock, whereas we only need a pointer-copy to be inside of a lock. Much better than before! Which means we can have a lower time between each update. I recommend 10ms.",
                                                        "author": {
                                                            "login": "diamondhands0"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1477187098",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "a428965",
                                                            "authoredDate": "2024-02-02T21:30:45Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I don't think you want BlockUntilReadOnlyViewRegenerated here. I think _addTxn is called when we initialize the mempool, which means you'll be blasting it with txns. Instead, you want to do this wait in BroadcastTransaction() only, which is where it was before anyway. You can just look at the diff and make sure that the position of BlockUntilReadOnlyViewRegenerated hasn't changed, and make sure it makes sense why it hasn't changed.",
                                                        "author": {
                                                            "login": "diamondhands0"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1477187686",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "a428965",
                                                            "authoredDate": "2024-02-02T21:30:45Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Update: Resolved this myself.",
                                                        "author": {
                                                            "login": "diamondhands0"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1477191363",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "a428965",
                                                            "authoredDate": "2024-02-02T21:30:45Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Update: Resolved this myself.",
                                                        "author": {
                                                            "login": "diamondhands0"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1477191416",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "a428965",
                                                            "authoredDate": "2024-02-02T21:30:45Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Update: Resolved this myself.",
                                                        "author": {
                                                            "login": "diamondhands0"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1477191430",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "a428965",
                                                            "authoredDate": "2024-02-02T21:30:45Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Update: Resolved this myself.",
                                                        "author": {
                                                            "login": "diamondhands0"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1477191454",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "a428965",
                                                            "authoredDate": "2024-02-02T21:30:45Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Update: Resolved this myself.",
                                                        "author": {
                                                            "login": "diamondhands0"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1477191487",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "a428965",
                                                            "authoredDate": "2024-02-02T21:30:45Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Nice find. This pointer copy is definitely more optimal",
                                                        "author": {
                                                            "login": "tholonious"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1478412290",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "a428965",
                                                            "authoredDate": "2024-02-02T21:30:45Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "The event loop is referenced as the interface type. So, no there isn't a a built-in way to go to the implementation directly in VS Code. You'd have to Ctrl+Shift+F to search for it.",
                                                        "author": {
                                                            "login": "tholonious"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1478475608",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "a428965",
                                                            "authoredDate": "2024-02-02T21:30:45Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "The interface is useful so we can test the consensus using a mock event loop type. Marking this as resolved since it's not a code issue, and is instead an IDE limitation",
                                                        "author": {
                                                            "login": "tholonious"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1478476597",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "a428965",
                                                            "authoredDate": "2024-02-02T21:30:45Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Done",
                                                        "author": {
                                                            "login": "tholonious"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1478485183",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "a428965",
                                                            "authoredDate": "2024-02-02T21:30:45Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Marking this as resolved since there's no action item for this feature PR on it.",
                                                        "author": {
                                                            "login": "tholonious"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1478490750",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "10c2aa5",
                                                            "authoredDate": "2024-01-19T18:03:35Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "This is resolved by the PoS mempool's new augment view refresh async job",
                                                        "author": {
                                                            "login": "tholonious"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1478491522",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "84a22d2",
                                                            "authoredDate": "2024-01-10T17:32:07Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "We settled on having strictly increasing block timestamps with up to a 10 minute forward buffer. It should not be possible for a block proposer to roll back time with a previously proposed block. This would break the integrity of lockups, among what I'm sure will be other edge cases built on future assumptions of strictly increasing timestamps in other use cases.\nI'll update this to get rid of the timeSource, and to introduce strictly increasing timestamps.",
                                                        "author": {
                                                            "login": "tholonious"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1478858734",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "a428965",
                                                            "authoredDate": "2024-02-02T21:30:45Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "The GetView() is a convenience when accepting incoming PoW blocks so that we can use block height as a pseudo \"view\". IMO, it's more appropriate to use the raw ProposedInView field here when constructing and validating blocks. This way, there's no way we can misread and conflate the block height as the view.",
                                                        "author": {
                                                            "login": "tholonious"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1478940909",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "a428965",
                                                            "authoredDate": "2024-02-02T21:30:45Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Addressed in PR #1016",
                                                        "author": {
                                                            "login": "tholonious"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1479058560",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "a428965",
                                                            "authoredDate": "2024-02-02T21:30:45Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "APPROVED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": []
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I don't have a strong opinion on this. An optional check on the 0x prefix seems fine to add later on when needed. This uses the standard BIP39 seed phrase -> seed conversion, so it should just work out of the box to use a hex seed encoding",
                                                        "author": {
                                                            "login": "tholonious"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1481959657",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "c405758",
                                                            "authoredDate": "2024-02-01T22:58:30Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Tracking this separately as a TODO for node syncing optimizations",
                                                        "author": {
                                                            "login": "tholonious"
                                                        },
                                                        "url": "https://github.com/deso-protocol/core/pull/875#discussion_r1481972361",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "c405758",
                                                            "authoredDate": "2024-02-01T22:58:30Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "textMatches": [
                        {
                            "property": "comments.body"
                        }
                    ]
                },
                {
                    "node": {
                        "number": 75,
                        "title": "Fix: edit quiz ux improvements",
                        "repository": {
                            "nameWithOwner": "rajatkantinandi/quizmaster",
                            "primaryLanguage": {
                                "name": "TypeScript"
                            }
                        },
                        "createdAt": "2023-08-24T09:44:10Z",
                        "mergedAt": "2023-08-31T09:23:17Z",
                        "url": "https://github.com/rajatkantinandi/quizmaster/pull/75",
                        "state": "MERGED",
                        "author": {
                            "login": "govind007"
                        },
                        "editor": {
                            "login": "govind007"
                        },
                        "body": "- [x] To improve correction option functionality, Error check if more than one options are same \r\n- [x] Allow image-only option \r\n- [x] Setting max. size feature for image \r\n- [x] Save the last activity of the user- When the user are editing the question and if switch to a different section/question, it automatically deletes ",
                        "reviews": {
                            "edges": [
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Did you test this one, working properly for various images. Try images from unsplash, Wikipedia, some news sites, etc. Try png, jpg, jpeg, gif files.",
                                                        "author": {
                                                            "login": "rajatkantinandi"
                                                        },
                                                        "url": "https://github.com/rajatkantinandi/quizmaster/pull/75#discussion_r1304401241",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "85e5f0e",
                                                            "authoredDate": "2023-08-24T09:40:36Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "What's the different between this and the above error message? Should both messages be the same?",
                                                        "author": {
                                                            "login": "rajatkantinandi"
                                                        },
                                                        "url": "https://github.com/rajatkantinandi/quizmaster/pull/75#discussion_r1304402525",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "85e5f0e",
                                                            "authoredDate": "2023-08-24T09:40:36Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Maybe take extract options here. No need of line 42\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n              const options = watch('options');\n          \n          \n            \n              const isWithoutOptions = options.length === 1;\n          \n          \n            \n              const { points, text } = watch();\n          \n          \n            \n              const { points, text, options } = watch();\n          \n          \n            \n              const isWithoutOptions = options.length === 1;",
                                                        "author": {
                                                            "login": "rajatkantinandi"
                                                        },
                                                        "url": "https://github.com/rajatkantinandi/quizmaster/pull/75#discussion_r1304404117",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "85e5f0e",
                                                            "authoredDate": "2023-08-24T09:40:36Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Is it safe to call watch here inside an useEffect?",
                                                        "author": {
                                                            "login": "rajatkantinandi"
                                                        },
                                                        "url": "https://github.com/rajatkantinandi/quizmaster/pull/75#discussion_r1304405240",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "85e5f0e",
                                                            "authoredDate": "2023-08-24T09:40:36Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Or we can use the value from watch from the above? We should probably call watch once to avoid perf issues.",
                                                        "author": {
                                                            "login": "rajatkantinandi"
                                                        },
                                                        "url": "https://github.com/rajatkantinandi/quizmaster/pull/75#discussion_r1304406431",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "85e5f0e",
                                                            "authoredDate": "2023-08-24T09:40:36Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Can we create a helper function that does both trim + replace and returns clean string?",
                                                        "author": {
                                                            "login": "rajatkantinandi"
                                                        },
                                                        "url": "https://github.com/rajatkantinandi/quizmaster/pull/75#discussion_r1304408240",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "85e5f0e",
                                                            "authoredDate": "2023-08-24T09:40:36Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n                                validate: (value: string) => !!getImageOrTextContent(value) || 'Option text should not be empty!',\n          \n          \n            \n                                validate: (value: string) => !!getImageOrTextContent(value) || 'Option should not be empty!',",
                                                        "author": {
                                                            "login": "rajatkantinandi"
                                                        },
                                                        "url": "https://github.com/rajatkantinandi/quizmaster/pull/75#discussion_r1304412078",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "85e5f0e",
                                                            "authoredDate": "2023-08-24T09:40:36Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "it will go in catch if url is correct but content is not loadable or blocked by browser, above error message will show if url is not correct",
                                                        "author": {
                                                            "login": "govind007"
                                                        },
                                                        "url": "https://github.com/rajatkantinandi/quizmaster/pull/75#discussion_r1305151604",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "85e5f0e",
                                                            "authoredDate": "2023-08-24T09:40:36Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "using ...rest to get rest data",
                                                        "author": {
                                                            "login": "govind007"
                                                        },
                                                        "url": "https://github.com/rajatkantinandi/quizmaster/pull/75#discussion_r1305153351",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "85e5f0e",
                                                            "authoredDate": "2023-08-24T09:40:36Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Ohh. And what happens if network error?",
                                                        "author": {
                                                            "login": "rajatkantinandi"
                                                        },
                                                        "url": "https://github.com/rajatkantinandi/quizmaster/pull/75#discussion_r1305173956",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "85e5f0e",
                                                            "authoredDate": "2023-08-24T09:40:36Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "APPROVED",
                                        "bodyText": "1 minor comment",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Maybe call this getCleanText as we are not just trimming?",
                                                        "author": {
                                                            "login": "rajatkantinandi"
                                                        },
                                                        "url": "https://github.com/rajatkantinandi/quizmaster/pull/75#discussion_r1306346484",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "1782676",
                                                            "authoredDate": "2023-08-25T06:01:25Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "coming in catch if if network error",
                                                        "author": {
                                                            "login": "govind007"
                                                        },
                                                        "url": "https://github.com/rajatkantinandi/quizmaster/pull/75#discussion_r1311122624",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "85e5f0e",
                                                            "authoredDate": "2023-08-24T09:40:36Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "checked for all images type. working fine",
                                                        "author": {
                                                            "login": "govind007"
                                                        },
                                                        "url": "https://github.com/rajatkantinandi/quizmaster/pull/75#discussion_r1311150043",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "85e5f0e",
                                                            "authoredDate": "2023-08-24T09:40:36Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "OK",
                                                        "author": {
                                                            "login": "rajatkantinandi"
                                                        },
                                                        "url": "https://github.com/rajatkantinandi/quizmaster/pull/75#discussion_r1311155758",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "85e5f0e",
                                                            "authoredDate": "2023-08-24T09:40:36Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Cool",
                                                        "author": {
                                                            "login": "rajatkantinandi"
                                                        },
                                                        "url": "https://github.com/rajatkantinandi/quizmaster/pull/75#discussion_r1311155944",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "85e5f0e",
                                                            "authoredDate": "2023-08-24T09:40:36Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "We have to support webp, tiff, bmp and jpg as well. Maybe SVG as well.",
                                                        "author": {
                                                            "login": "rajatkantinandi"
                                                        },
                                                        "url": "https://github.com/rajatkantinandi/quizmaster/pull/75#discussion_r1311157180",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "ed15a7f",
                                                            "authoredDate": "2023-08-31T06:25:58Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "These are the valid image mime types as per chatGPT: https://chat.openai.com/share/d44b7044-8482-471e-94f1-fe5d2d4b6407",
                                                        "author": {
                                                            "login": "rajatkantinandi"
                                                        },
                                                        "url": "https://github.com/rajatkantinandi/quizmaster/pull/75#discussion_r1311161413",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "ed15a7f",
                                                            "authoredDate": "2023-08-31T06:25:58Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "APPROVED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": []
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "textMatches": [
                        {
                            "property": "comments.body"
                        }
                    ]
                },
                {
                    "node": {
                        "number": 220,
                        "title": "[Off-Chain] Add `EventsReplayClient` Generic Event Listener for `BlockClient` and `DelegationClient`",
                        "repository": {
                            "nameWithOwner": "pokt-network/poktroll",
                            "primaryLanguage": {
                                "name": "Go"
                            }
                        },
                        "createdAt": "2023-11-23T21:52:18Z",
                        "mergedAt": "2023-12-07T21:57:39Z",
                        "url": "https://github.com/pokt-network/poktroll/pull/220",
                        "state": "MERGED",
                        "author": {
                            "login": "h5law"
                        },
                        "editor": {
                            "login": "reviewpad"
                        },
                        "body": "## Summary\r\n\r\n### Human Summary\r\n\r\nThis PR converts the existing `BlockClient` into an implenentation of the generic `EventsReplayClient` which subscribes to and listens for on chain events and maps them into the desired type of the implemented `EventsReplayClient`\r\n\r\nBlockClient -> `EventsReplayClient[Block]`\r\nDelegationClient -> `EventsReplayClient[DelegateeChange]`\r\n\r\nThese new client interfaces have their own methods which wrap those exposed by the `EventsReplayClient`\r\n\r\n### AI Summary\r\n\r\n<!-- reviewpad:summarize:start -->\n### Summary generated by Reviewpad on 07 Dec 23 20:34 UTC\nThis pull request:\n- Modifies the `ring_signer.go` file in the `pkg/signer` package by updating the comments for the `NewRingSigner` function and the `Sign` method.\n- Introduces a new `client_integration_test.go` file in the `pkg/client/delegation` package, which contains a test function for the `DelegationClient` redelegation functionality. However, the test is currently skipped and needs further investigation and fixing.\n- Adds a new file `replay_client.go` in the `pkg/client/events` package, which implements a replay client for handling events and provides various functions for interacting with the client.\n- Contains changes in the `claim.go` file under the `pkg/relayer/session` package, involving refactoring and optimization of code.\n- Removes an empty line in the SupplierAll function in a certain file.\n- Deletes the `errors.go` file, which contained a package named `websocket` and imported another package named `errorsmod`, as well as defined an error variable and a codespace variable.\n- Adds a new file `godoc.go` in the `pkg/client/block` package, which is a wrapper for the `EventsReplayClient[Block]` generic and listens for committed block events on the chain.\n- Introduces a new file `event.proto` in the `pocket/application` directory, defining a protocol buffer message `EventRedelegation` for application delegatee gateway changes on the chain.\n- Includes changes in a certain file related to table formatting, addition of new interfaces and components, and import statements.\n- Adds a new file `errors.go` with error handling functionality specific to event handling in the client package.\n- Modifies the flag descriptions and import statements in a certain file.\n- Changes import statements and the file structure in a certain file.\n- Updates comments, including changes from \"serialised\" to \"serialized\" in various files.\n- Adds a new file `client_test.go` with test cases for the `DelegationClient` struct.\n- Introduces a new file `websocket` that provides a websocket client for connecting to a cosmos-sdk based chain node.\n- Adds a new file `godoc.go` that contains documentation for the `delegation` package and its functionalities.\n- Adds a new file `redelegation.go` that defines a struct and a factory function for deserializing data into the struct.\n- Adds a new file that provides a generic client for subscribing to on-chain events with the usage of ReplayObservables.\n- Renames and modifies import statements in a file.\n- Modifies a file by adding assertions for events in test functions.\n- Renames and modifies the `client_integration_test.go` file, including changes in the package name and import statements.\n- Modifies a file by adding new lines, formatting, and emission of events.\n- Deletes the `events_query.md` file that provided an overview of the package.\n- Changes the URL in the Makefile for accessing the generated documentation.\n- Modifies the import statement in a file.\n- Adds a new method to a struct in a file.\n\nPlease let me know if you need further assistance or have any questions.\n<!-- reviewpad:summarize:end -->\r\n\r\n## Issue\r\n\r\n- Fixes N/A\r\n\r\n## Type of change\r\n\r\nSelect one or more:\r\n\r\n- [x] New feature, functionality or library\r\n- [ ] Bug fix\r\n- [ ] Code health or cleanup\r\n- [ ] Documentation\r\n- [ ] Other (specify)\r\n\r\n## Testing\r\n\r\n- [x] **Run all unit tests**: `make go_develop_and_test`\r\n- [x] **Verify Localnet manually**: See the instructions [here](TODO: add link to instructions)\r\n\r\n## Sanity Checklist\r\n\r\n- [x] I have tested my changes using the available tooling\r\n- [x] I have performed a self-review of my own code\r\n- [x] I have commented my code, updated documentation and left TODOs throughout the codebase\r\n",
                        "reviews": {
                            "edges": [
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "These is the generic MappedClient interface",
                                                        "author": {
                                                            "login": "h5law"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1404615681",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "b913818",
                                                            "authoredDate": "2023-11-24T19:34:25Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "@h5law After thinking about it for a bit, I think this should be called EventsReplayClient.",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1404826103",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "b913818",
                                                            "authoredDate": "2023-11-24T19:34:25Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I still plan on looking more closely at the package structure but haven't had a chance to do so yet.",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1404826407",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "b913818",
                                                            "authoredDate": "2023-11-24T19:34:25Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I actually called this the ReplayClient first then the TransformingClient \ud83e\udd16 then MappedClient lmao",
                                                        "author": {
                                                            "login": "h5law"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1404830908",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "b913818",
                                                            "authoredDate": "2023-11-24T19:34:25Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I also think that the block and delegate clients should lightly wrap (as opposed to bring or embedding) this generic type so that they have control over their own method names and, more importantly, become independently open for extension (SOLID).",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1404879904",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "b913818",
                                                            "authoredDate": "2023-11-24T19:34:25Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I think this should be called BlocksReplayObservable to improve clarity. I get that it's defined in the block package but when reading code that uses is in the block package, it can be a bit confusing.",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1405183974",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "b0b468c",
                                                            "authoredDate": "2023-11-25T17:12:02Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Similar feedback here, I feel like DelegateeChangeReplayObservable (or something similar) would improve readability.",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1405184648",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "b0b468c",
                                                            "authoredDate": "2023-11-25T17:12:02Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Don't forget to update comments referencing anything that's getting renamed.",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1405189746",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "b0b468c",
                                                            "authoredDate": "2023-11-25T17:12:02Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "This package should be eventsreplay. No need to append \u201dclient\".",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1405190321",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "b0b468c",
                                                            "authoredDate": "2023-11-25T17:12:02Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "On second thought, perhaps this should be pkg/client/event/ instead. That would be more consistent with what you've done with block and delegate. Wdyt?",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1405195022",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "b0b468c",
                                                            "authoredDate": "2023-11-25T17:12:02Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "TL;DR, I think these need to be re-consolidated into pkg/client/interfaces.\nFriendly reminder that go package dependency  trees are DAGs. These interfaces SHOULD not be defined in the same package as their implementation. It is likely to create an import cycle now or in the future.\nTypically it's considered good practice to prefer defining interfaces in, or closer to, the consumer package. Perhaps it's best to think about the fact that this package exports these interfaces as a convenience so that there is a common place for consumers to import them from as they are pretty general purpose and consumer pkgs will be numerous and disparate. It should follow then, that when the consumer pkg imports the pkg containing these interfaces, the resulting branch which is included in the dependency tree SHOULD not include any implementations.",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1405852929",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5fd1345",
                                                            "authoredDate": "2023-11-26T03:15:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "(same as #220 (comment))",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1405853702",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5fd1345",
                                                            "authoredDate": "2023-11-26T03:15:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I feel like it would make more sense for this and pkg/client/events_query to be the same package. However, upon reflection, I don't see any reason not to simplify the name to pkg/client/events, like it is here.",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1405858160",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5fd1345",
                                                            "authoredDate": "2023-11-26T03:15:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            \tmappedClient client.EventsReplayClient[client.Block, client.EventsObservable[client.Block]]\n          \n          \n            \n            \teventsReplayClient client.EventsReplayClient[client.Block, client.EventsObservable[client.Block]]",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1405874699",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5fd1345",
                                                            "authoredDate": "2023-11-26T03:15:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            \treturn &blockClient{mappedClient: client}, nil\n          \n          \n            \n            \treturn &eventsReplayClient{mappedClient: client}, nil",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1405875196",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5fd1345",
                                                            "authoredDate": "2023-11-26T03:15:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            \treturn b.mappedClient.EventsSequence(ctx).(BlockReplayObservable)\n          \n          \n            \n            \treturn b.eventsReplayClient.EventsSequence(ctx).(BlockReplayObservable)",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1405875427",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5fd1345",
                                                            "authoredDate": "2023-11-26T03:15:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            \tevents := b.mappedClient.LastNEvents(ctx, n)\n          \n          \n            \n            \tevents := b.eventsReplayClient.LastNEvents(ctx, n)",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1405875687",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5fd1345",
                                                            "authoredDate": "2023-11-26T03:15:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            \tb.mappedClient.Close()\n          \n          \n            \n            \tb.eventsReplayClient.Close()",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1405875900",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5fd1345",
                                                            "authoredDate": "2023-11-26T03:15:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I don't think this should be necessary any more, client.Block is T and the generic signature of LastNEvents is func (mClient *replayClient[T, R]) LastNEvents(ctx context.Context, n int) []T.",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1405878215",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5fd1345",
                                                            "authoredDate": "2023-11-26T03:15:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "(same as #220 (comment))",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1405883423",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5fd1345",
                                                            "authoredDate": "2023-11-26T03:15:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "[linter-name (fail-on-found)] reported by reviewdog \ud83d\udc36// TODO_IN_THIS_PR: Figure out how to use real components of the localnet",
                                                        "author": {
                                                            "login": "github-actions"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1412710356",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "ca068a0",
                                                            "authoredDate": "2023-12-02T03:01:16Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n              if the `EventsQueryClient` returns an error/is closed.\n          \n          \n            \n              if the `EventsQueryClient` returns an error or is closed unexpectedly.",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1413824904",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "1dd4fc5",
                                                            "authoredDate": "2023-12-03T16:31:21Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I like how you've added structure to make room here. \ud83d\ude0e\nWdyt about adding links to the godoc? They will eventually be updated after this is merged. In the meantime you can use the make go_docs target to double-check the URL path.",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1413828311",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "1dd4fc5",
                                                            "authoredDate": "2023-12-03T16:31:21Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I had linked to the v0.47 page specifically as some things around events have changed in v0.50 IIRC. I find myself wanting to also suggest adding a TODO to update this (and the analogous comment in EventsQueryClient) but I don't think there's a good place for that in the docs. I've started #240 as a way to capture things like this (and I've already added this one).\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n            // See: https://docs.cosmos.network/main/learn/advanced/events#subscribing-to-events\n          \n          \n            \n            // And: https://docs.cosmos.network/main/learn/advanced/events#default-events\n          \n          \n            \n            // See: https://docs.cosmos.network/v0.47/learn/advanced/events#subscribing-to-events\n          \n          \n            \n            // And: https://docs.cosmos.network/v0.47/learn/advanced/events#default-events",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1413844336",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "1dd4fc5",
                                                            "authoredDate": "2023-12-03T16:31:21Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Let's add a  TODO around the txClient definition to refactor it in terms of EventsReplayClient. I think it can probably be simplified by its usage as well but this PR is already big enough. \ud83d\ude05",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414322217",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "1dd4fc5",
                                                            "authoredDate": "2023-12-03T16:31:21Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Please update the Clients Dependency Tree diagram:\n\n  \n    \n      ---\ntitle: Clients Dependency Tree\n---\nflowchart\nsup[SupplierClient]\ntx[TxClient]\ntxctx[[TxContext]]\nsubgraph bl[BlockClient]\n    bl_evt_replay[EventsReplayClient]\nend\nsubgraph del[DelegationClient]\n    del_evt_replay[EventsReplayClient]\nend\nevt[EventsQueryClient]\nconn[[Connection]]\ndial[[Dialer]]\nsup --\"#SignAndBroadcast()\"--> tx\ntx --\"#CommittedBlocksSequence()\"--> bl\ntx --\"#BroadcastTx\"--> txctx\ntx --\"#EventsBytes()\"--> evt\nbl_evt_replay --\"#EventsBytes()\"--> evt\ndel_evt_replay --\"#EventsBytes()\"--> evt\nevt --> conn\nevt --\"#DialContext()\"--> dial\ndial --\"(returns)\"--> conn",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414326427",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "1dd4fc5",
                                                            "authoredDate": "2023-12-03T16:31:21Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "NIT:\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n            \tdelegationClient, err := delegation.NewDelegationClient(ctx, deps, testclient.CometLocalWebsocketURL)\n          \n          \n            \n            \t// NB: the URL passed to  `NewDelegationClient` is irrelevant here because `eventsQueryClient` is a mock.\n          \n          \n            \n            \tdelegationClient, err := delegation.NewDelegationClient(ctx, deps, testclient.CometLocalWebsocketURL)",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414331978",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "1dd4fc5",
                                                            "authoredDate": "2023-12-03T16:31:21Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "You should be able to uncomment most of this and add a t.SkipNow() call to prevent it from running:\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n            // func TestDelegationClient_DelegateeChangesObservables(t *testing.T) {\n          \n          \n            \n            // TODO_TEST/TODO_TECHDEBT: ...\n          \n          \n            \n            func TestDelegationClient_DelegateeChangesObservables(t *testing.T) {\n          \n          \n            \n            \tt.SkipNow()",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414334589",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "1dd4fc5",
                                                            "authoredDate": "2023-12-03T16:31:21Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "This is my bad:\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n              b -.\"A uses D via network IO\".-> d\n          \n          \n            \n              b -.\"B uses D via network IO\".-> d",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414339145",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "1dd4fc5",
                                                            "authoredDate": "2023-12-03T16:31:21Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I'm still thinking about this flowchart (i.e. will have more feedback) but the first thing I notice is that it's upside down; take a look at the legend one more time.",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414340113",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "1dd4fc5",
                                                            "authoredDate": "2023-12-03T16:31:21Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I think we should look for opportunities to unify the disparate diagrams with consistent naming and structure of shared components, especially external; e.g. Pocket Network vs Cometbft  Node / Action vs subscribe endpoint. In this case, I think there's more value in aligning these things category theoretically such that the reader doesn't have to interpret two different representations of the same thing (and hopefully realize that's the intent).",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414346305",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "1dd4fc5",
                                                            "authoredDate": "2023-12-03T16:31:21Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I'm noticing that EventsQueryClient is described here in terms of inert sub-components. Whereas, in EventsQueryClient Components, it's (already) described using sub-components which actually associate with others.",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414349754",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "1dd4fc5",
                                                            "authoredDate": "2023-12-03T16:31:21Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Publish Events Factory seems like it should be named retryPublishEventsFactory. Additionally, it's a a function represented as a rectangle, but rectangles represent components in the legend (and rest of the diagram).\nIn other places I've used a rounded rectangle to represent functions or methods. Regardless of how that \"kind\" of thing is represented, it should be:\n\nDistinct from other \"kinds\" which are already defined (for other purposes; i.e. component, usage associations, etc.).\nUsed consistently for that \"kind\", currently retry.OnError is depicted as a usage association. It also needs to change and should be represented the same way as retryPublishEventsFactory (assuming  both are still represented in the next iteration).\nSufficiently described in the legend to be unambiguous (i.e. hard to misinterpret).\n\nThink of the legend as a design language that you construct for a set of diagrams. You can tailor that design language to what you're trying to emphasize (in the diagrams that share that design language). But in the end it needs to be self-consistent and unambiguous. Usage must also be consistent and conformal.\nI also find it useful to take a somewhat \"category theoretical\" perspective to it in that you're describing the identity of things (perhaps in different terms per design language). As such, the distinctions between categories and their degrees of freedom should be unambiguous.",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414399074",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "1dd4fc5",
                                                            "authoredDate": "2023-12-03T16:31:21Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "FWIW the legend also doesn't currently define rules around encapsulation. That could be taken as an opportunity either to add some and express them in here, or to reconsider representing encapsulation so strictly (e.g. EventsQueryClient/EventsReplayClient). I don't have a strong opinion here but wanted to share some additional perspective with the expectation that you'll make an appropriate decision.",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414443662",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "1dd4fc5",
                                                            "authoredDate": "2023-12-03T16:31:21Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            const cometWebsocketURL = \"ws://example.com:36657\"\n          \n          \n            \n            const cometWebsocketURL = \"ws://example.com:36657/websocket\"",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414556229",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "1dd4fc5",
                                                            "authoredDate": "2023-12-03T16:31:21Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n              GetName() string\n          \n          \n            \n              GetName() string // Illustrative only; arbitrary interfaces are supported.",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414556795",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "1dd4fc5",
                                                            "authoredDate": "2023-12-03T16:31:21Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Wdyt about making this example use a factory function as that's a pattern that may prove useful in many consumer contexts? We can use a context.Context in this example but perhaps there are other and/or more idiomatic factory function parameters.\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n            func newEventType(eventBz []byte) EventType {\n          \n          \n            \n              eventMsg := new(eventType)\n          \n          \n            \n              if err := json.Unmarshal(eventBz, eventMsg); err != nil {\n          \n          \n            \n                return nil, err\n          \n          \n            \n              }\n          \n          \n            \n            \n          \n          \n            \n              // Confirm the event is correct by checking its fields\n          \n          \n            \n              if eventMsg.Name == \"\" {\n          \n          \n            \n                return nil, events.ErrEventsUnmarshalEvent.\n          \n          \n            \n                  Wrapf(\"unable to unmarshal eventType: %s\", string(eventBz))\n          \n          \n            \n              }\n          \n          \n            \n            \n          \n          \n            \n              return eventMsg, nil\n          \n          \n            \n            }\n          \n          \n            \n            // TODO_IN_THIS_COMMIT: godoc\n          \n          \n            \n            // TODO_IN_THIS_COMMIT: move to `pkg/client/events/...`\n          \n          \n            \n            type NewEventFn[T any] = func([]byte) T\n          \n          \n            \n            \n          \n          \n            \n            func eventTypeFactory(ctx context.Context) NewEventFn[EventType] {\n          \n          \n            \n              return function(eventBz []byte) EventType {  eventMsg := new(eventType)\n          \n          \n            \n                logger := polylog.Ctx(ctx)\n          \n          \n            \n              \n          \n          \n            \n                if err := json.Unmarshal(eventBz, eventMsg); err != nil {\n          \n          \n            \n                  return nil, err\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                // Confirm the event is correct by checking its fields\n          \n          \n            \n                if eventMsg.Name == \"\" {\n          \n          \n            \n                  return nil, events.ErrEventsUnmarshalEvent.\n          \n          \n            \n                    Wrapf(\"with eventType data: %s\", string(eventBz))\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                return eventMsg, nil\n          \n          \n            \n              }\n          \n          \n            \n            }",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414561885",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "1dd4fc5",
                                                            "authoredDate": "2023-12-03T16:31:21Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Perhaps it would also be worth defining a NewEventFn = func([]byte) EventType generic (see suggestion above).",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414568543",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "1dd4fc5",
                                                            "authoredDate": "2023-12-03T16:31:21Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I'm wondering if it makes sense for either retry.OnError or retryPublishEventsFactory  to be in this diagram. This diagram should be about the relationship betwen the components that are necessary for this unit to function.\nI think it makes more sense for retry.OnError and retryPublishEventsFactory to be central in some other diagram about the retry loop; perhaps a flowchart or state diagram showing the ways in which the client can get disconnected, how it recovers, and ultimately aborts and errors. There should be an analogous diagram for the EventsQueryClient as it does a similar thing IIRC. Perhaps they can be represented in the same diagram, but it's okay if not. We could also save this diagram for later and add a TODO in a > TODO_DOCS: ... quote line under the diagram.",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414576341",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "1dd4fc5",
                                                            "authoredDate": "2023-12-03T16:31:21Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Again this is my fault, but wdyt about renaming these to be more consistent with the naming structure our on-chain errors?",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414580521",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "1dd4fc5",
                                                            "authoredDate": "2023-12-03T16:31:21Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Wdyt about something like this (included in #220 (comment))?\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                  Wrapf(\"unable to unmarshal eventType: %s\", string(eventBz))\n          \n          \n            \n                  Wrapf(\"with eventType data: %s\", string(eventBz))",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414581768",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "1dd4fc5",
                                                            "authoredDate": "2023-12-03T16:31:21Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "NIT:\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n            latestEventsObsvbl := client.EventsSequence(ctx)\n          \n          \n            \n            // Get the latest events from the sequence\n          \n          \n            \n            lastEventType := latestEventsObsvbl.Last(ctx, 1)[0]\n          \n          \n            \n            latestEventsObs := client.EventsSequence(ctx)\n          \n          \n            \n            // Get the latest events from the sequence\n          \n          \n            \n            lastEventType := latestEventsObs.Last(ctx, 1)[0]",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414583141",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "1dd4fc5",
                                                            "authoredDate": "2023-12-03T16:31:21Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "The error message is a bit redundant as ErrEventsUnmarshalEvent contains \"failed to unmarshal event bytes\" (similar to #220 (comment)).\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n            \t\treturn nil, events.ErrEventsUnmarshalEvent.\n          \n          \n            \n            \t\t\tWrapf(\"unable to unmarshal block: %s\", string(blockMsgBz))\n          \n          \n            \n            \t\treturn nil, events.ErrEventsUnmarshalEvent.\n          \n          \n            \n            \t\t\tWrapf(\"with block data: %s\", string(blockMsgBz))",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414584486",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "1dd4fc5",
                                                            "authoredDate": "2023-12-03T16:31:21Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            // blockClient is a wrapper around an EventsReplayClient that implements the\n          \n          \n            \n            // interface for use in network.\n          \n          \n            \n            // blockClient is a wrapper around an EventsReplayClient that implements the\n          \n          \n            \n            // BlockClient interface for use with cosmos-sdk networks.",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414586331",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "1dd4fc5",
                                                            "authoredDate": "2023-12-03T16:31:21Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I think the #EventBytes (NIT: #EventBytes()) association is inaccurately represented as network I/O.",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414588008",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "1dd4fc5",
                                                            "authoredDate": "2023-12-03T16:31:21Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I'm wondering if it makes sense for either retry.OnError or retryPublishEventsFactory to be in this diagram. This diagram should be about the relationship betwen the components that are necessary for this unit to function.\n\nSimilar feedback on DecoderFunction. It probably make sense to have a diagram that focuses on data transformation through EventsReplayClient, which DecoderFunction would be a critical part of. Also, is there a name that's more consistent with the code or have I just not read that part yet?",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414590757",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "1dd4fc5",
                                                            "authoredDate": "2023-12-03T16:31:21Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "NIT: Wdyt about newEventFn (also see #220 (comment))",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414591213",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "1dd4fc5",
                                                            "authoredDate": "2023-12-03T16:31:21Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Wdyt about renaming this to latestObs. Open to better suggestions but I think the consistency would be an improvement.",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414592294",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "1dd4fc5",
                                                            "authoredDate": "2023-12-03T16:31:21Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            // LastNEvents returns the latest typed event that's been received by the\n          \n          \n            \n            // LastNEvents returns the last N typed events that have been received by the",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414593325",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "1dd4fc5",
                                                            "authoredDate": "2023-12-03T16:31:21Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "This statement is no longer true as the EventsReplayClient is encapsulated now.",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414597094",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5fb8c91",
                                                            "authoredDate": "2023-12-04T22:28:33Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "(same as #220 (comment))",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414597725",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5fb8c91",
                                                            "authoredDate": "2023-12-04T22:28:33Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "\ud83d\udcaf",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414597856",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5fb8c91",
                                                            "authoredDate": "2023-12-04T22:28:33Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "#PUC, and I don't think we need to mention gomock at this level.",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414598304",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5fb8c91",
                                                            "authoredDate": "2023-12-04T22:28:33Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Should this be delegatee?",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414599736",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5fb8c91",
                                                            "authoredDate": "2023-12-04T22:28:33Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            \t\teventsBzObsvbl, err := rClient.eventsClient.EventsBytes(ctx, rClient.queryString)\n          \n          \n            \n            \t\tif err != nil {\n          \n          \n            \n            \t\t\terrCh <- err\n          \n          \n            \n            \t\t\treturn errCh\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \n          \n          \n            \n            \t\t// NB: must cast back to generic observable type to use with Map.\n          \n          \n            \n            \t\t// client.BlocksObservable cannot be an alias due to gomock's lack of\n          \n          \n            \n            \t\t// support for generic types.\n          \n          \n            \n            \t\teventsBz := observable.Observable[either.Either[[]byte]](eventsBzObsvbl)\n          \n          \n            \n            \t\teventsBzObs, err := rClient.eventsClient.EventsBytes(ctx, rClient.queryString)\n          \n          \n            \n            \t\tif err != nil {\n          \n          \n            \n            \t\t\terrCh <- err\n          \n          \n            \n            \t\t\treturn errCh\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \n          \n          \n            \n            \t\t// NB: must cast back to generic observable type to use with Map.\n          \n          \n            \n            \t\t// client.BlocksObservable cannot be an alias due to gomock's lack of\n          \n          \n            \n            \t\t// support for generic types.\n          \n          \n            \n            \t\teventsBz := observable.Observable[either.Either[[]byte]](eventsBzObs)",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414600750",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5fb8c91",
                                                            "authoredDate": "2023-12-04T22:28:33Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            \t\ttypedObsrvbl := channel.MapReplay(\n          \n          \n            \n            \t\t\tctx,\n          \n          \n            \n            \t\t\tlatestReplayBufferSize,\n          \n          \n            \n            \t\t\teventsBz,\n          \n          \n            \n            \t\t\trClient.newEventsBytesToTypeMapFn(errCh),\n          \n          \n            \n            \t\t)\n          \n          \n            \n            \n          \n          \n            \n            \t\t// Initially set latestObsvbls and update if after retrying on error.\n          \n          \n            \n            \t\trClient.latestObsvblsReplayPublishCh <- typedObsrvbl.(R)\n          \n          \n            \n            \t\ttypedObs := channel.MapReplay(\n          \n          \n            \n            \t\t\tctx,\n          \n          \n            \n            \t\t\tlatestReplayBufferSize,\n          \n          \n            \n            \t\t\teventsBz,\n          \n          \n            \n            \t\t\trClient.newEventsBytesToTypeMapFn(errCh),\n          \n          \n            \n            \t\t)\n          \n          \n            \n            \n          \n          \n            \n            \t\t// Initially set latestObs and update if after retrying on error.\n          \n          \n            \n            \t\trClient.latestObsvblsReplayPublishCh <- typedObs.(R)",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414601075",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5fb8c91",
                                                            "authoredDate": "2023-12-04T22:28:33Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "\ud83d\ude0e",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414601613",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "6cdab38",
                                                            "authoredDate": "2023-12-04T22:53:26Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "UPDATE: maybe something like cachedObs is even better?",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414602595",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "1dd4fc5",
                                                            "authoredDate": "2023-12-03T16:31:21Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Thus far, I've been naming functions that are intended to be used with channel.Map() as mapXXX. Wdyt about something like this?:\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n            // newEventsBytesToTypeMapFn is a factory for a function which is intended\n          \n          \n            \n            // to be used as a transformFn in a channel.Map() call. Since the map function\n          \n          \n            \n            // is called asynchronously, this factory creates a closure around an error\n          \n          \n            \n            // channel which can be used for asynchronous error signaling from within the\n          \n          \n            \n            // map function, and handling from the Map call context.\n          \n          \n            \n            //\n          \n          \n            \n            // The map function itself attempts to deserialize the given byte slice as a\n          \n          \n            \n            // the EventsReplayClient's generic typed event, using the decoder function provided.\n          \n          \n            \n            // If the events bytes observable contained an error, this value is not emitted\n          \n          \n            \n            // (skipped) on the destination observable of the map operation.\n          \n          \n            \n            //\n          \n          \n            \n            // If deserialisation failed because the event bytes were for a different event\n          \n          \n            \n            // type, this value is also skipped. If deserialisation failed for some other\n          \n          \n            \n            // reason, this function panics.\n          \n          \n            \n            func (rClient *replayClient[T, R]) newEventsBytesToTypeMapFn(errCh chan<- error) func(\n          \n          \n            \n            // newMapEventsBytesToTFn is a factory for a function which is intended\n          \n          \n            \n            // to be used as a transformFn in a channel.Map() call. Since the map function\n          \n          \n            \n            // is called asynchronously, this factory creates a closure around an error\n          \n          \n            \n            // channel which can be used for asynchronous error signaling from within the\n          \n          \n            \n            // map function, and handling from the Map call context.\n          \n          \n            \n            //\n          \n          \n            \n            // The map function itself attempts to deserialize the given byte slice as a\n          \n          \n            \n            // the EventsReplayClient's generic typed event, using the decoder function provided.\n          \n          \n            \n            // If the events bytes observable contained an error, this value is not emitted\n          \n          \n            \n            // (skipped) on the destination observable of the map operation.\n          \n          \n            \n            //\n          \n          \n            \n            // If deserialisation failed because the event bytes were for a different event\n          \n          \n            \n            // type, this value is also skipped. If deserialisation failed for some other\n          \n          \n            \n            // reason, this function panics.\n          \n          \n            \n            func (rClient *replayClient[T, R]) newMapEventsBytesToTFn(errCh chan<- error) func(",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414605388",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "6cdab38",
                                                            "authoredDate": "2023-12-04T22:53:26Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "\ud83d\udcaf",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414605801",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "6cdab38",
                                                            "authoredDate": "2023-12-04T22:53:26Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "DISMISSED",
                                        "bodyText": "Not a complete review, but leaving some comments in the interim.\n\n\nReally good PR overall with lots of good comments, good code, great functionality, etc...\n\n\nLeft some non-actionable comments throughout. Feel free to treat them as FYI and resolve\n\n\nI think there is a big opportunity for smaller PRs when we hit something like this in the future. For example, this was titled off-chain but you ended up introducing on-chain components. Even though the ordering of implementation may have led to this, we could've split out on-chain vs off-chain, the EventsReplayClient into its own thing, the actual business logic, etc... I think it could be 2-4 modular PRs that are easier to review in isolation.\n\n\nThe majority of the comments in this document are great but sometimes the comment just describes the actual code line underneath which isn't useful.\n\n\nAs an extreme example: const n = 5 is a constant with the name n equaling to 5\nIn the particularly hard to understand parts (e.g. observable of observables observing observables), explaining why would go a long way!",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "what do you think of adding a different error here?\nI feel like if unmarshalling failed, we'd hit line 36. I think should explicitly say something that'll imply: Block Header height is 0, may be an umarshalling issue.\nWdyt?",
                                                        "author": {
                                                            "login": "Olshansk"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414582562",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "1dd4fc5",
                                                            "authoredDate": "2023-12-03T16:31:21Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            // NewBlockClient creates a new block client from the given dependencies and\n          \n          \n            \n            // cometWebsocketURL. It uses the defined committedBlocksQuery to subscribe to\n          \n          \n            \n            // newly committed block events and maps them to Block objects, using the\n          \n          \n            \n            // newCometBlockEvent function as the mapping function.\n          \n          \n            \n            //\n          \n          \n            \n            // This is an implementation of the EventsReplayClient[Block] generic.\n          \n          \n            \n            // correctly mock the interface.\n          \n          \n            \n            // NewBlockClient creates a new block client from the given dependencies and\n          \n          \n            \n            // cometWebsocketURL. It uses a pre-defined committedBlocksQuery to subscribe to\n          \n          \n            \n            // newly committed block events which are mapped to Block objects.\n          \n          \n            \n            //\n          \n          \n            \n            // This implementsthe EventsReplayClient[Block] generic to correctly mock the interface.",
                                                        "author": {
                                                            "login": "Olshansk"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414587957",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5fb8c91",
                                                            "authoredDate": "2023-12-04T22:28:33Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            // Package websocket provides a websocket client used to connect to a node\n          \n          \n            \n            // Package websocket provides a websocket client used to connect to a pocket node",
                                                        "author": {
                                                            "login": "Olshansk"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414588897",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5fb8c91",
                                                            "authoredDate": "2023-12-04T22:28:33Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "We can leave this as is, but generally I try to avoid this level of implementation detail in the comments.\nIf we ever abstract websocket to use something other than gorilla/websocket, there's a high likelihood the developer will forget to update this too.",
                                                        "author": {
                                                            "login": "Olshansk"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414589759",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5fb8c91",
                                                            "authoredDate": "2023-12-04T22:28:33Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "PUC explaining why.",
                                                        "author": {
                                                            "login": "Olshansk"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414590293",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5fb8c91",
                                                            "authoredDate": "2023-12-04T22:28:33Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "I kind of feel like this belongs alongside everything in supplier.go. Please revert",
                                                        "author": {
                                                            "login": "Olshansk"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414591020",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5fb8c91",
                                                            "authoredDate": "2023-12-04T22:28:33Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Can you #PUC on where/how this is used? Reading this is even confusing me, so a bit more context on a use-case would help.",
                                                        "author": {
                                                            "login": "Olshansk"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414766716",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "6cdab38",
                                                            "authoredDate": "2023-12-04T22:53:26Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "#PUC \u261d\ufe0f\nI was going to challenge that block is the right package name if exposing EventsReplayClient was it's goal, so please consider that as well.",
                                                        "author": {
                                                            "login": "Olshansk"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414778232",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5fb8c91",
                                                            "authoredDate": "2023-12-04T22:28:33Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            // delegationEventQuery is the query used by the EventsQueryClien to subscribe\n          \n          \n            \n            // delegationEventQuery is the query used by the EventsQueryClient to subscribe",
                                                        "author": {
                                                            "login": "Olshansk"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414778461",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "6cdab38",
                                                            "authoredDate": "2023-12-04T22:53:26Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "\ud83d\ude0e",
                                                        "author": {
                                                            "login": "Olshansk"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414778706",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "6cdab38",
                                                            "authoredDate": "2023-12-04T22:53:26Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Either pre-defined or hard-coded\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n            // dependencies and cometWebsocketURL. It uses the defined delegationEventQuery\n          \n          \n            \n            // dependencies and cometWebsocketURL. It uses the pre-defined delegationEventQuery",
                                                        "author": {
                                                            "login": "Olshansk"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414779099",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "6cdab38",
                                                            "authoredDate": "2023-12-04T22:53:26Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "There's a lot of how and not enough why in these comments.\nTrying to emphasize with someone new to the codebase who is making their way through.\nNot asking to change it here (too much work) but keep this in mind for the future.",
                                                        "author": {
                                                            "login": "Olshansk"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414779652",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "6cdab38",
                                                            "authoredDate": "2023-12-04T22:53:26Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "@bryanchriswhite Even though I observed (pun intended) the evolution of observables, it's really hard for me to understand what this is doing.\n@h5law Can you #PUC on what this enables (not just a description of the type)?",
                                                        "author": {
                                                            "login": "Olshansk"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414784488",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "6cdab38",
                                                            "authoredDate": "2023-12-04T22:53:26Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            // and closes all subsequent connections.\n          \n          \n            \n            // and closes all downstream connections.",
                                                        "author": {
                                                            "login": "Olshansk"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414785012",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "6cdab38",
                                                            "authoredDate": "2023-12-04T22:53:26Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            //\t- Create app and gateway actors\n          \n          \n            \n            // - Create app and gateway actors",
                                                        "author": {
                                                            "login": "Olshansk"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414785218",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "6cdab38",
                                                            "authoredDate": "2023-12-04T22:53:26Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            // TODO(@h5law): Figure out how to use real components of the localnet\n          \n          \n            \n            // TODO_UPNEXT(@h5law): Figure out how to use real components of the localnet",
                                                        "author": {
                                                            "login": "Olshansk"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414785428",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "6cdab38",
                                                            "authoredDate": "2023-12-04T22:53:26Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Ditto the comment and file name",
                                                        "author": {
                                                            "login": "Olshansk"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414785879",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5fb8c91",
                                                            "authoredDate": "2023-12-04T22:28:33Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Not actionable\n@h5law Not going to ask to break this PR into smaller components, but for future reference, we could have made it easier but making the on-chain piece a separate PR upstream of this.\nI realize you probably implemented the other part first, but more of a decision once it was complete.",
                                                        "author": {
                                                            "login": "Olshansk"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414786945",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "6cdab38",
                                                            "authoredDate": "2023-12-04T22:53:26Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Great changes to the unit tests!",
                                                        "author": {
                                                            "login": "Olshansk"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414788381",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "6cdab38",
                                                            "authoredDate": "2023-12-04T22:53:26Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            \t// Emit the application delegation change event\n          \n          \n            \n            \t// Emit the application undelegation change event",
                                                        "author": {
                                                            "login": "Olshansk"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414789213",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "6cdab38",
                                                            "authoredDate": "2023-12-04T22:53:26Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            \t\tlogger.Error(\"Failed to emit application delegation change event: %v\", err)\n          \n          \n            \n            \t\tlogger.Error(\"Failed to emit application undelegation change event: %v\", err)",
                                                        "author": {
                                                            "login": "Olshansk"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414789332",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "6cdab38",
                                                            "authoredDate": "2023-12-04T22:53:26Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "We should add the gateway address here as well.",
                                                        "author": {
                                                            "login": "Olshansk"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414790049",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "6cdab38",
                                                            "authoredDate": "2023-12-04T22:53:26Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "We should add the gateway address here as well.",
                                                        "author": {
                                                            "login": "Olshansk"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414790100",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "6cdab38",
                                                            "authoredDate": "2023-12-04T22:53:26Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Let's add gateway_address or delegatee_address here too.",
                                                        "author": {
                                                            "login": "Olshansk"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414810089",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "6cdab38",
                                                            "authoredDate": "2023-12-04T22:53:26Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            \tErrEventsWebsocketReceive = sdkerrors.Register(codespace, 1, \"failed to receive event\")\n          \n          \n            \n            \tErrEventsWebsocketReceive = sdkerrors.Register(codespace, 1, \"failed to receive event over websocket connection to pocket node\")",
                                                        "author": {
                                                            "login": "Olshansk"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414811038",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "6cdab38",
                                                            "authoredDate": "2023-12-04T22:53:26Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "One of the reasons I believe you're struggling with this test is because we're trying to use keeper outside of on-chain code. Seems to be the first instance of it:\n\nIf you look in x/supplier/client/cli/query_claim_test.go, what we do is:\n\nCreate an in-memory network\nUse the test CLI to create claim objects\n\n@bryanchriswhite is reworking that code in #236 but the idea is the same and what I think you want instead of using the keepers directly.",
                                                        "author": {
                                                            "login": "Olshansk"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414814844",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "6cdab38",
                                                            "authoredDate": "2023-12-04T22:53:26Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "We already have DefaultApplicationModuleGenesisState, so I don't think copy-pasting that is correct.\nWhy not consolidate the two?",
                                                        "author": {
                                                            "login": "Olshansk"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414817107",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "6cdab38",
                                                            "authoredDate": "2023-12-04T22:53:26Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Ditto for DefaultGatewayModuleGenesisState",
                                                        "author": {
                                                            "login": "Olshansk"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1414817261",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "6cdab38",
                                                            "authoredDate": "2023-12-04T22:53:26Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "\ud83d\udc4d I would even suggest omitting the reference to \"unmarshaling\" because it's already expressed in the error description.",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1415688187",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "1dd4fc5",
                                                            "authoredDate": "2023-12-03T16:31:21Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I think we can broaden the constraint, at this low level, to be cosmos-sdk based chains/networks/nodes. Wdyt?",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1415690333",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5fb8c91",
                                                            "authoredDate": "2023-12-04T22:28:33Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "This was my suggestion. My rationale was that the tx client can be expressed more simply in terms of an EventsReplayClient for the same reasons as BlockClient and DelegationClient.",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1415697476",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5fb8c91",
                                                            "authoredDate": "2023-12-04T22:28:33Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "(cc @Olshansk)",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1415700255",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "1dd4fc5",
                                                            "authoredDate": "2023-12-03T16:31:21Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "// CommittedBlocksSequence returns a replay observable of new block events.",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1415703643",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "6cdab38",
                                                            "authoredDate": "2023-12-04T22:53:26Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Tbh that seems totally fair, this specific example involves quite high-level abstractions/objects. A future rename may go a long way but in the meantime, this indirection is the trade-off for:\n\nSmaller step sizes between components (e.g. EventsQueryClient --> EventsReplayClient --> BlockClient).\nDelaying migration away from gomock.",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1415714614",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "6cdab38",
                                                            "authoredDate": "2023-12-04T22:53:26Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I did this as well in #236 (here) because I was not prepared to refactor all the usages of networkWithApplicationObjects(). However, I don't see where this is being used in this branch.",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1415730721",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "6cdab38",
                                                            "authoredDate": "2023-12-04T22:53:26Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Wdyt about renaming this (see #239 comment)?\nWe loose the specificity of whether the app is the delegatee or the delegator but that is unambiguously defined by the protocol so I think it's worth the trade-off.\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n            type DelegateeChange interface {\n          \n          \n            \n            type Redelegation interface {",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1415926761",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "6cdab38",
                                                            "authoredDate": "2023-12-04T22:53:26Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            // BlockReplayObservable wraps the generic\n          \n          \n            \n            // observable.ReplayObservable[Block] type\n          \n          \n            \n            // BlockReplayObservable is a defined type which is a replay observable of type Block.",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1415940512",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "6cdab38",
                                                            "authoredDate": "2023-12-04T22:53:26Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Rataionale behind \"defined type\" nomenclature: https://chat.openai.com/share/8f5daa07-dc01-4434-a978-c728923f6e78",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1415941546",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "6cdab38",
                                                            "authoredDate": "2023-12-04T22:53:26Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Wdyt about something like this?\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n            \t// latestObsvblsReplayBufferSize is the replay buffer size of the\n          \n          \n            \n            \t// latestObsvbls replay observable which is used to cache the latest observable.\n          \n          \n            \n            \t// It is updated with a new \"active\" observable when a new\n          \n          \n            \n            \t// events query subscription is created, for example, after a non-persistent\n          \n          \n            \n            \t// connection error.\n          \n          \n            \n            \tlatestObsvblsReplayBufferSize = 1\n          \n          \n            \n            \t// latestReplayBufferSize is the replay buffer size of the latest replay\n          \n          \n            \n            \t// observable which is notified when block commit events are received\n          \n          \n            \n            \t// by the events query client subscription created in goPublishEvents.\n          \n          \n            \n            \tlatestReplayBufferSize = 1\n          \n          \n            \n            \t// replayObsCacheBufferSize is the replay buffer size of the\n          \n          \n            \n            \t// replayObsCache replay observable which is used to cache the replay\n          \n          \n            \n            \t// observable that is notified of new events.\n          \n          \n            \n            \t// It, replayObsCache, is updated with a new \"active\" observable when a new\n          \n          \n            \n            \t// events query subscription is created, for example, after a non-persistent\n          \n          \n            \n            \t// connection error.\n          \n          \n            \n            \treplayObsCacheBufferSize = 1\n          \n          \n            \n            \t// replayObsBufferSize is the replay buffer size of the replay observable\n          \n          \n            \n            \t// which is notified of new events.\n          \n          \n            \n            \treplayObsBufferSize = 1",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1415968048",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "6cdab38",
                                                            "authoredDate": "2023-12-04T22:53:26Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "See #220 (comment) and #220 (comment).",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1415971174",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "1dd4fc5",
                                                            "authoredDate": "2023-12-03T16:31:21Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            \t// latestObsvbls is a replay observable with replay buffer size 1,\n          \n          \n            \n            \t// which holds the \"active latest observable\" which is notified when\n          \n          \n            \n            \t// new events are received by the events query client subscription\n          \n          \n            \n            \t// created in goPublishEvents. This observable (and the one it emits) closes\n          \n          \n            \n            \t// when the events bytes observable returns an error and is updated with a\n          \n          \n            \n            \t// new \"active\" observable after a new events query subscription is created.\n          \n          \n            \n            \tlatestObsvbls observable.ReplayObservable[U]\n          \n          \n            \n            \t// replayObsCache is a replay observable with replay buffer size 1,\n          \n          \n            \n            \t// which holds the \"active replay observable\" which is notified of new\n          \n          \n            \n            \t// events. The \"active replay observable\" closes in the event of an upstream\n          \n          \n            \n            \t// error, and a new \"active\" observable is published to replayObsCache after\n          \n          \n            \n            \t//  a new events query subscription is created.\n          \n          \n            \n            \treplayObsCache observable.ReplayObservable[U]",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1415980747",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "6cdab38",
                                                            "authoredDate": "2023-12-04T22:53:26Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            \tlatestObsvbls,\n          \n          \n            \n            \t\tlatestObsvblsReplayPublishCh := channel.NewReplayObservable[U](\n          \n          \n            \n            \t\tctx,\n          \n          \n            \n            \t\tlatestReplayBufferSize,\n          \n          \n            \n            \t)\n          \n          \n            \n            \trClient.latestObsvbls = observable.ReplayObservable[U](latestObsvbls)\n          \n          \n            \n            \trClient.latestObsvblsReplayPublishCh = latestObsvblsReplayPublishCh\n          \n          \n            \n            \treplayObsCache,\treplayObsCachePublishCh := channel.NewReplayObservable[U](\n          \n          \n            \n            \t\tctx,\n          \n          \n            \n            \t\treplayObsCacheBufferSize,\n          \n          \n            \n            \t)\n          \n          \n            \n            \trClient.replayObsCache = observable.ReplayObservable[U](replayObsCache)\n          \n          \n            \n            \trClient.replayObsPublishCh = replayObsPublishCh",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1415985013",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "6cdab38",
                                                            "authoredDate": "2023-12-04T22:53:26Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            \t// latestObsvblsReplayPublishCh is the publish channel for latestObsvbls.\n          \n          \n            \n            \t// It's used to set latestObsvbls initially and subsequently update it, for\n          \n          \n            \n            \t// example, when the connection is re-established after erroring.\n          \n          \n            \n            \tlatestObsvblsReplayPublishCh chan<- U\n          \n          \n            \n            \t// replayObsCachePublishCh is the publish channel for replayObsCache.\n          \n          \n            \n            \t// It's used to initially set and subsequently update the events replay observable; for\n          \n          \n            \n            \t// example, when the connection is re-established after erroring.\n          \n          \n            \n            \treplayObsCachePublishCh chan<- U",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1415990512",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "6cdab38",
                                                            "authoredDate": "2023-12-04T22:53:26Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I think this should be received as a parameter and should not have a default (i.e. I think we should remove this const).",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1415997101",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "6cdab38",
                                                            "authoredDate": "2023-12-04T22:53:26Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            \treplayObs := observable.ReplayObservable[R](rClient.latestObsvbls)\n          \n          \n            \n            \treplayObs := observable.ReplayObservable[R](rClient.replayObsCache)",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1416004743",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "6cdab38",
                                                            "authoredDate": "2023-12-04T22:53:26Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "#PUC if we make replayObsBufferSize a parameter of the constructor.",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1416005925",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "6cdab38",
                                                            "authoredDate": "2023-12-04T22:53:26Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            // which is notified when new events are received by the events query subscription.\n          \n          \n            \n            // which is notified when new events are received by the encapsulated EventsQueryClient.",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1416007320",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "6cdab38",
                                                            "authoredDate": "2023-12-04T22:53:26Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            \t// Get the latest events observable from the replay observable. We only ever\n          \n          \n            \n            \t// want the last 1 as any prior latest events observable values are closed.\n          \n          \n            \n            \t// Directly accessing the zeroth index here is safe because the call to Last\n          \n          \n            \n            \t// is guaranteed to return a slice with at least 1 element.\n          \n          \n            \n            \t// Get the active event replay observable from replayObsCache. Only the last element\n          \n          \n            \n            \t// is useful as any prior elements are closed replay observables.\n          \n          \n            \n            \t// Directly accessing the zeroth index here is safe because the call to Last\n          \n          \n            \n            \t// is guaranteed to return a slice with at least 1 element.",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1416011259",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "6cdab38",
                                                            "authoredDate": "2023-12-04T22:53:26Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I'm imagining something like this:\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n            // DelegateeChangesSequence returns a replay observable of observables for\n          \n          \n            \n            // delegation events from the DelegationClient.\n          \n          \n            \n            func (b *delegationClient) DelegateeChangesSequence(ctx context.Context) client.DelegateeChangeReplayObservable {\n          \n          \n            \n            // RedelegationsSequence returns a replay observable of Redelgation events\n          \n          \n            \n            // observed by the  DelegationClient.\n          \n          \n            \n            func (b *delegationClient) RedelegationsSequence(ctx context.Context) client.RedelegationsReplayObservable {",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1416015332",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "6cdab38",
                                                            "authoredDate": "2023-12-04T22:53:26Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "WDYT of the update? @Olshansk @bryanchriswhite",
                                                        "author": {
                                                            "login": "h5law"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1416120916",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5fb8c91",
                                                            "authoredDate": "2023-12-04T22:28:33Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "@Olshansk https://arc.net/l/quote/npxdzlgu this approach was in progress and I will go back to it after your comment",
                                                        "author": {
                                                            "login": "h5law"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1416151165",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "6cdab38",
                                                            "authoredDate": "2023-12-04T22:53:26Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "No we only need the app address there is no need for any other fields, adds bloat we dont use",
                                                        "author": {
                                                            "login": "h5law"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1416227794",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "6cdab38",
                                                            "authoredDate": "2023-12-04T22:53:26Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Remnants from my old test strategy\nremoving",
                                                        "author": {
                                                            "login": "h5law"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1416228472",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "6cdab38",
                                                            "authoredDate": "2023-12-04T22:53:26Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "[linter-name (fail-on-found)] reported by reviewdog \ud83d\udc36// TODO_IN_THIS_COMMIT: godoc",
                                                        "author": {
                                                            "login": "github-actions"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1416244260",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "28e4923",
                                                            "authoredDate": "2023-12-05T20:29:55Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "[linter-name (fail-on-found)] reported by reviewdog \ud83d\udc36// TODO_IN_THIS_COMMIT: move to pkg/client/events/...",
                                                        "author": {
                                                            "login": "github-actions"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1416244262",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "28e4923",
                                                            "authoredDate": "2023-12-05T20:29:55Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Am against this as it is irrelevent to its usage",
                                                        "author": {
                                                            "login": "h5law"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1416244716",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "6cdab38",
                                                            "authoredDate": "2023-12-04T22:53:26Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "See other comments on this",
                                                        "author": {
                                                            "login": "h5law"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1416244898",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "6cdab38",
                                                            "authoredDate": "2023-12-04T22:53:26Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Tried and failed left comment, think its something to do with the networks subscribiton to events unsure atm.",
                                                        "author": {
                                                            "login": "h5law"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1416475303",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "6cdab38",
                                                            "authoredDate": "2023-12-04T22:53:26Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I'm noticing that this diagram needs one of:\nA. Its own legend, in which the usage via network I/O association direction matches the diagram\nB. To be rewritten in terms of the legend provided in the previous section (i.e. turn it upside-down)\nC. A note or some other indicator that the legend in the section above only applies to that section and/or does not apply to this section\nI think A is ideal but C would be sufficient for now. I think this diagram reads better as written (as opposed to upside-down). I also think that the component diagrams above read best  they way they are (i.e. shouldn't be turned upside-down either).",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1417011181",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "1320539",
                                                            "authoredDate": "2023-12-06T01:55:22Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            // Define an interface to represent the onchain event\n          \n          \n            \n            // Define an interface to represent an arbitrary onchain event",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1417014472",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "1320539",
                                                            "authoredDate": "2023-12-06T01:55:22Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Why does this function need to close over the ctx? It doesn't look like the returned function uses it at all. \ud83e\udd14",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1417018681",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "1320539",
                                                            "authoredDate": "2023-12-06T01:55:22Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Now that the block client exposes #LastNBlocks()  instead of #LatestBlock(), I think it's prudent that we increase this. I think we should also rename it to defaultBlocksReplayLimit and add a TODO:\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n            \treplayObsBufferSize  = 1 // the amount of events we want before they are emitted\n          \n          \n            \n            \t// TODO_TECHDEBT/TODO_FUTURE: add a `blocksReplayLimit` field to the block client struct that defaults to this but can be overridden via an option in future work.\n          \n          \n            \n            \tdefaultBlocksReplayLimit  = 100 // the number of blocks that the replay observable returned by LastNBlocks() will be able to replay.",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1417030309",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "1320539",
                                                            "authoredDate": "2023-12-06T01:55:22Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            // LatestsNEvents returns the latest n blocks from the BockClient.\n          \n          \n            \n            // LatestsNBlocks returns the last n blocks observed by the BockClient.",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1417034621",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "1320539",
                                                            "authoredDate": "2023-12-06T01:55:22Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            // through a ReplayObservable. This enables consumers to listen for on-chain\n          \n          \n            \n            // application delegation changes and react to them asynchronously.\n          \n          \n            \n            // through a ReplayObservable. This enables consumers to listen for newly\n          \n          \n            \n            // committed blocks and react to them asynchronously.",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1417036467",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "1320539",
                                                            "authoredDate": "2023-12-06T01:55:22Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Similar feedback to #220 (comment).",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1417040558",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "1320539",
                                                            "authoredDate": "2023-12-06T01:55:22Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "NIT:\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n            \t// Initialise the mapped client\n          \n          \n            \n            \t// Initialize the mapped client",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1417043709",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "1320539",
                                                            "authoredDate": "2023-12-06T01:55:22Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            \tlatestObsvbls,\n          \n          \n            \n            \t\tlatestObsvblsReplayPublishCh := channel.NewReplayObservable[U](\n          \n          \n            \n            \t\tctx,\n          \n          \n            \n            \t\treplayObsBufferSize,\n          \n          \n            \n            \t)\n          \n          \n            \n            \trClient.replayObsCache = observable.ReplayObservable[U](latestObsvbls)\n          \n          \n            \n            \trClient.replayObsCachePublishCh = latestObsvblsReplayPublishCh\n          \n          \n            \n            \treplayObsCache, replayObsCachePublishCh := channel.NewReplayObservable[U](\n          \n          \n            \n            \t\tctx,\n          \n          \n            \n            \t\treplayObsBufferSize,\n          \n          \n            \n            \t)\n          \n          \n            \n            \trClient.replayObsCache = observable.ReplayObservable[U](replayObsCache)\n          \n          \n            \n            \trClient.replayObsCachePublishCh = replayObsCachePublishCh",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1417045072",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "1320539",
                                                            "authoredDate": "2023-12-06T01:55:22Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "This file should probably be renamed to redelegation.go as well.",
                                                        "author": {
                                                            "login": "bryanchriswhite"
                                                        },
                                                        "url": "https://github.com/pokt-network/poktroll/pull/220#discussion_r1417051233",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "1320539",
                                                            "authoredDate": "2023-12-06T01:55:22Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "textMatches": [
                        {
                            "property": "comments.body"
                        },
                        {
                            "property": "body"
                        }
                    ]
                }
            ],
            "pageInfo": {
                "endCursor": "Y3Vyc29yOjEyMA==",
                "hasNextPage": true,
                "hasPreviousPage": true,
                "startCursor": "Y3Vyc29yOjExMQ=="
            },
            "issueCount": 176
        }
    }
}