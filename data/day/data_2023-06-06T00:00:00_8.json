{
    "data": {
        "search": {
            "edges": [
                {
                    "node": {
                        "number": 756,
                        "title": "Speech-To-Text and Text-To-Speech",
                        "repository": {
                            "nameWithOwner": "danny-avila/LibreChat",
                            "primaryLanguage": {
                                "name": "TypeScript"
                            }
                        },
                        "createdAt": "2023-08-04T21:01:48Z",
                        "mergedAt": null,
                        "url": "https://github.com/danny-avila/LibreChat/pull/756",
                        "state": "CLOSED",
                        "author": {
                            "login": "bsu3338"
                        },
                        "editor": {
                            "login": "bsu3338"
                        },
                        "body": "This is a quick implementation of speech to text and text to speech for browsers with built-in support. It only works on Chrome based browsers and Safari for speech to text, but all browsers from what I can tell work with text to speech.\r\n\r\nShift-Alt-L  - Enable Listening\r\n\r\nBrowser list:\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/Web_Speech_API#browser_compatibility\r\n\r\n\r\nAfter digging into this, I would not mind adding both tts and stt with standard js without the react component. Just use https://developer.mozilla.org/en-US/docs/Web/API/Web_Speech_API \r\n\r\n## Type of change\r\n\r\nPlease delete options that are not relevant.\r\n\r\n- [x] New feature (non-breaking change which adds functionality)\r\n- [x] This change requires a documentation update\r\n- [x] Documentation update  \r\n  \r\n\r\n## How Has This Been Tested?\r\n\r\nPlease describe the tests that you ran to verify your changes. Provide instructions so we can reproduce. Please also list any relevant details for your test configuration:\r\n##\r\n\r\ngo to LibreChat with a supported browser.  If you see a mic next to the submit arrow then it should work.  Most notable exception is Firefox\r\n\r\n### **Test Configuration**:\r\n##\r\n\r\n\r\n## Checklist:\r\n\r\n- [x] My code follows the style guidelines of this project\r\n- [x] I have performed a self-review of my code\r\n- [x] I have commented my code, particularly in hard-to-understand areas\r\n- [x] I have made corresponding changes to the documentation\r\n- [x] My changes generate no new warnings\r\n- [x] I have added tests that prove my fix is effective or that my feature works\r\n- [x] New and existing unit tests pass locally with my changes\r\n- [x] Any dependent changes have been merged and published in downstream modules\r\n",
                        "reviews": {
                            "edges": [
                                {
                                    "node": {
                                        "state": "CHANGES_REQUESTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "This component already has too much complexity I'm trying to refactor out. Use a react hook instead: https://chat.openai.com/share/112d8ec7-bb62-460b-adac-2a45fa60c712",
                                                        "author": {
                                                            "login": "danny-avila"
                                                        },
                                                        "url": "https://github.com/danny-avila/LibreChat/pull/756#discussion_r1285029357",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "74fa8d1",
                                                            "authoredDate": "2023-08-05T06:29:07Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "we can probably get rid of this and use the mic icon here https://lucide.dev/icons/mic\nand then make it red for recording",
                                                        "author": {
                                                            "login": "danny-avila"
                                                        },
                                                        "url": "https://github.com/danny-avila/LibreChat/pull/756#discussion_r1285029569",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "74fa8d1",
                                                            "authoredDate": "2023-08-05T06:29:07Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Looks much better!",
                                                        "author": {
                                                            "login": "bsu3338"
                                                        },
                                                        "url": "https://github.com/danny-avila/LibreChat/pull/756#discussion_r1285064181",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "74fa8d1",
                                                            "authoredDate": "2023-08-05T06:29:07Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I moved the speech recognition to another file.",
                                                        "author": {
                                                            "login": "bsu3338"
                                                        },
                                                        "url": "https://github.com/danny-avila/LibreChat/pull/756#discussion_r1285138145",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "74fa8d1",
                                                            "authoredDate": "2023-08-05T06:29:07Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "you should put the hooks in their respective directory for uniformity and organization, name them after the function 'use...'",
                                                        "author": {
                                                            "login": "danny-avila"
                                                        },
                                                        "url": "https://github.com/danny-avila/LibreChat/pull/756#discussion_r1294204373",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "7e8bae2",
                                                            "authoredDate": "2023-08-11T12:15:32Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "same as above for project structure",
                                                        "author": {
                                                            "login": "danny-avila"
                                                        },
                                                        "url": "https://github.com/danny-avila/LibreChat/pull/756#discussion_r1294206744",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "7e8bae2",
                                                            "authoredDate": "2023-08-11T12:15:32Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Probably nothing you changed, but need to add: I can click the microphone icon while it's listening and doing so will refresh the page",
                                                        "author": {
                                                            "login": "danny-avila"
                                                        },
                                                        "url": "https://github.com/danny-avila/LibreChat/pull/756#discussion_r1294224851",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "7e8bae2",
                                                            "authoredDate": "2023-08-11T12:15:32Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "textMatches": [
                        {
                            "property": "comments.body"
                        },
                        {
                            "property": "body"
                        }
                    ]
                },
                {
                    "node": {
                        "number": 5602,
                        "title": "Changes no row text for containers, images and port forwarding",
                        "repository": {
                            "nameWithOwner": "rancher-sandbox/rancher-desktop",
                            "primaryLanguage": {
                                "name": "TypeScript"
                            }
                        },
                        "createdAt": "2023-09-28T00:59:14Z",
                        "mergedAt": "2023-10-03T20:42:45Z",
                        "url": "https://github.com/rancher-sandbox/rancher-desktop/pull/5602",
                        "state": "MERGED",
                        "author": {
                            "login": "filipemeneses"
                        },
                        "editor": null,
                        "body": "Closes #5586 ",
                        "reviews": {
                            "edges": [
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "This sounds a bit weird to me. \"Port forwardings\" would at least be plural, but still doesn't sound right. How about \"port forwarding entries\"?\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                noRows: There are no port forwarding to show\n          \n          \n            \n                noRows: There are no port forwarding entries to show",
                                                        "author": {
                                                            "login": "jandubois"
                                                        },
                                                        "url": "https://github.com/rancher-sandbox/rancher-desktop/pull/5602#discussion_r1339462139",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "43cb2c0",
                                                            "authoredDate": "2023-09-28T01:27:04Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Yea, check spelling pipe flagged this, agree with the suggestion",
                                                        "author": {
                                                            "login": "filipemeneses"
                                                        },
                                                        "url": "https://github.com/rancher-sandbox/rancher-desktop/pull/5602#discussion_r1339997943",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "43cb2c0",
                                                            "authoredDate": "2023-09-28T01:27:04Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "(\u955c\u50cf appears to be the correct translation, according to kube docs.)",
                                                        "author": {
                                                            "login": "mook-as"
                                                        },
                                                        "url": "https://github.com/rancher-sandbox/rancher-desktop/pull/5602#discussion_r1340406226",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "289328f",
                                                            "authoredDate": "2023-09-28T11:45:18Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Are these auto-translated? I just find it odd that you're using \u53ef (can, may) for the no port forwardings case, which seems a better fit here than \u8981 (wanted, desired).",
                                                        "author": {
                                                            "login": "mook-as"
                                                        },
                                                        "url": "https://github.com/rancher-sandbox/rancher-desktop/pull/5602#discussion_r1340408649",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "289328f",
                                                            "authoredDate": "2023-09-28T11:45:18Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "@vickyhella Can you please double-check the translations! Thanks you!",
                                                        "author": {
                                                            "login": "jandubois"
                                                        },
                                                        "url": "https://github.com/rancher-sandbox/rancher-desktop/pull/5602#discussion_r1340412880",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "289328f",
                                                            "authoredDate": "2023-09-28T11:45:18Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "APPROVED",
                                        "bodyText": "Thank you for your contribution! It works fine for me.\nI'm just asking our SUSE docs person responsible for the Chinese translations to double-check the strings before I merge it.",
                                        "comments": {
                                            "edges": []
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Yes, they're auto-translated https://chat.openai.com/share/f615ed08-26c7-4b12-ad7f-c356e0af773b",
                                                        "author": {
                                                            "login": "filipemeneses"
                                                        },
                                                        "url": "https://github.com/rancher-sandbox/rancher-desktop/pull/5602#discussion_r1340715657",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "289328f",
                                                            "authoredDate": "2023-09-28T11:45:18Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "textMatches": [
                        {
                            "property": "comments.body"
                        }
                    ]
                },
                {
                    "node": {
                        "number": 10,
                        "title": "50k GitHub stars blog",
                        "repository": {
                            "nameWithOwner": "localstack/localstack-blog.github.io",
                            "primaryLanguage": {
                                "name": "HTML"
                            }
                        },
                        "createdAt": "2023-11-22T07:51:06Z",
                        "mergedAt": "2024-01-03T06:26:55Z",
                        "url": "https://github.com/localstack/localstack-blog.github.io/pull/10",
                        "state": "MERGED",
                        "author": {
                            "login": "HarshCasper"
                        },
                        "editor": null,
                        "body": "",
                        "reviews": {
                            "edges": [
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "I also noticed that you are switching between the short form (we're / we are; we've / we have), quite often. It might be better to keep it in one form.",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            description: We're excited to announce that LocalStack has hit a significant milestone of achieving 50,000 GitHub Stars. It's been an incredible journey since we started out to build the best possible cloud developer experience, and we couldn't be happier to share this news with you!\n          \n          \n            \n            description: We're excited to announce that LocalStack has hit a significant milestone of achieving 50,000 GitHub stars. It has been an incredible journey since we started out to build the best possible cloud developer experience, and we are thrilled to share this news with you!",
                                                        "author": {
                                                            "login": "MarcelStranak"
                                                        },
                                                        "url": "https://github.com/localstack/localstack-blog.github.io/pull/10#discussion_r1401962708",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "f14cc96",
                                                            "authoredDate": "2023-11-22T11:58:39Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            Seven years ago on August 16, 2016, the LocalStack project was born. The journey since then has been nothing short of incredible. LocalStack has now crossed 50,000 stars on GitHub, after three major releases and dozens of minor releases. Today, LocalStack has been recognized as the **de-facto platform** for local cloud development and testing, and we're proud to be part of the growing movement that aims to fix the Developer Experience (**DevX**) in the cloud! For the past 16 months since the [**LocalStack 1.0**](https://blog.localstack.cloud/2022-07-13-announcing-localstack-v1-general-availability/) went live, it has been on a consistent upward trajectory and we are proud of everyone who is discovering, starring and joining our project & community!\n          \n          \n            \n            Seven years ago, on August 16, 2016, the LocalStack project was born. The journey since then has been nothing short of incredible. LocalStack has now crossed 50,000 stars on GitHub after three major releases and dozens of minor releases. Today, LocalStack is the **de facto platform** for local cloud development and testing, and we are proud to be part of the growing movement that wants to improve the developer experience (**DevX**) in the cloud. For the past 16 months since [**LocalStack 1.0**](https://blog.localstack.cloud/2022-07-13-announcing-localstack-v1-general-availability/)\u00a0went live, it has been on a consistent upward trajectory, and we are proud of everyone who is discovering, starring, and joining our project & community!",
                                                        "author": {
                                                            "login": "MarcelStranak"
                                                        },
                                                        "url": "https://github.com/localstack/localstack-blog.github.io/pull/10#discussion_r1401971301",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "f14cc96",
                                                            "authoredDate": "2023-11-22T11:58:39Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "We could be more assertive in the tone or not, it is up to you.",
                                                        "author": {
                                                            "login": "MarcelStranak"
                                                        },
                                                        "url": "https://github.com/localstack/localstack-blog.github.io/pull/10#discussion_r1401972712",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "f14cc96",
                                                            "authoredDate": "2023-11-22T11:58:39Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            We'll use this milestone to look back at LocalStack's growth and some important milestones, and what our community users can expect next!\n          \n          \n            \n            We'll use this milestone to look back at LocalStack's growth, some important milestones, and what our community users can expect next!",
                                                        "author": {
                                                            "login": "MarcelStranak"
                                                        },
                                                        "url": "https://github.com/localstack/localstack-blog.github.io/pull/10#discussion_r1401973570",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "f14cc96",
                                                            "authoredDate": "2023-11-22T11:58:39Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            LocalStack's journey to achieving 50,000 GitHub stars is a story of community-driven growth and engagement. The project's inception occurred at Atlassian with the initial commit ([`44326584`](https://github.com/localstack/localstack/commit/44326584#diff-b335630551682c19a781afebcf4d07bf978fb1f8ac04c6bf87428ed5106870f5)), introducing an *easy-to-use mocking framework* tailored for cloud application development, especially for AWS Cloud. Starting with 8 AWS services, such as Lambda, API Gateway, and DynamoDB, LocalStack was designed to emulate AWS APIs locally, enabling offline development \u2013 the idea being to allow developers to work on their applications offline, even in scenarios like commuting on a train, or on a flight.\n          \n          \n            \n            LocalStack's journey to achieving 50,000 GitHub stars is a story of community-driven growth and engagement. The project's inception occurred at Atlassian with the initial commit ([`44326584`](https://github.com/localstack/localstack/commit/44326584#diff-b335630551682c19a781afebcf4d07bf978fb1f8ac04c6bf87428ed5106870f5)), introducing an *easy-to-use mocking framework* tailored for cloud application development, especially for AWS Cloud. Starting with eight AWS services, including Lambda, API Gateway, and DynamoDB, LocalStack was developed to replicate AWS APIs locally, enabling offline development. The initial idea was to enable developers to work on their applications offline, even in circumstances such as commuting on a train or flight.",
                                                        "author": {
                                                            "login": "MarcelStranak"
                                                        },
                                                        "url": "https://github.com/localstack/localstack-blog.github.io/pull/10#discussion_r1401979636",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "f14cc96",
                                                            "authoredDate": "2023-11-22T11:58:39Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            LocalStack, originally a side project, first garnered public attention with a post on [Hacker News](https://news.ycombinator.com/item?id=13966088) (also archived on the [Internet Archive](https://web.archive.org/web/20231122065745/https://news.ycombinator.com/item?id=13966088)). This post introduced the concept of a fully local mocking/testing framework for cloud applications, drawing the interest of the broader tech community, including notable AWS figures. A key moment in LocalStack's journey was when Jeff Barr, Chief evangelist at AWS, [shared a tweet about LocalStack](https://twitter.com/jeffbarr/status/846382903210663936) (also archived on the [Internet Archive](https://chat.openai.com/c/c591ffcf-bd80-4de2-a6b1-ac5cf13d2903)), leading to an overnight surge in GitHub stars, with thousands joining our community.\n          \n          \n            \n            LocalStack, originally a side project, first garnered public attention with a post on [Hacker News](https://news.ycombinator.com/item?id=13966088) (also archived on the [Internet Archive](https://web.archive.org/web/20231122065745/https://news.ycombinator.com/item?id=13966088)). This post introduced the concept of a fully local mocking and testing framework for cloud applications, drawing the interest of the broader tech community, including notable AWS figures. A key moment in LocalStack's journey was when Jeff Barr, Chief Evangelist at AWS, [shared a tweet about LocalStack](https://twitter.com/jeffbarr/status/846382903210663936) (also archived on the [Internet Archive](https://chat.openai.com/c/c591ffcf-bd80-4de2-a6b1-ac5cf13d2903)), leading to an overnight surge in GitHub stars, with thousands joining our community.",
                                                        "author": {
                                                            "login": "MarcelStranak"
                                                        },
                                                        "url": "https://github.com/localstack/localstack-blog.github.io/pull/10#discussion_r1401984517",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "f14cc96",
                                                            "authoredDate": "2023-11-22T11:58:39Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            Here is a graphic that captures the watershed moment, and the subsequent growth of LocalStack as a project:\n          \n          \n            \n            Here is a graphic that captures the watershed moment and the subsequent growth of LocalStack as a project:",
                                                        "author": {
                                                            "login": "MarcelStranak"
                                                        },
                                                        "url": "https://github.com/localstack/localstack-blog.github.io/pull/10#discussion_r1401984691",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "f14cc96",
                                                            "authoredDate": "2023-11-22T11:58:39Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "I do not think dashes should be used here, as there is no strong separation of the content. I think it's grammatical correct, I just don't like it. :)",
                                                        "author": {
                                                            "login": "MarcelStranak"
                                                        },
                                                        "url": "https://github.com/localstack/localstack-blog.github.io/pull/10#discussion_r1401992416",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "f14cc96",
                                                            "authoredDate": "2023-11-22T11:58:39Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            Going next, we will continue to focus on strengthening the LocalStack ecosystem and integrations with frameworks such as *[Testcontainers](https://testcontainers.com/), [CloudFormation](https://docs.localstack.cloud/user-guide/aws/cloudformation/), [CDK](https://docs.localstack.cloud/user-guide/integrations/cdk-for-terraform/)* and more! With the new [Extension mechanism](https://docs.localstack.cloud/user-guide/extensions/), you can now extend and customize LocalStack to your needs. We have shipped official extensions for [Minilfare](https://miniflare.dev/), [Mailhog](https://github.com/mailhog/MailHog), [Stripe](https://github.com/adrienverge/localstripe), [httpbin](https://httpbin.org/), and more to provide you with a smooth local development experience.\n          \n          \n            \n            Next, we will continue to focus on strengthening the LocalStack ecosystem and integrations with frameworks such as *[Testcontainers](https://testcontainers.com/), [CloudFormation](https://docs.localstack.cloud/user-guide/aws/cloudformation/), [CDK](https://docs.localstack.cloud/user-guide/integrations/cdk-for-terraform/)* and more! With the new [extension mechanism](https://docs.localstack.cloud/user-guide/extensions/), you can now extend and customize LocalStack to your needs. We have shipped official extensions for [Minilfare](https://miniflare.dev/), [Mailhog](https://github.com/mailhog/MailHog), [Stripe](https://github.com/adrienverge/localstripe), [httpbin](https://httpbin.org/), and more to provide you with a smooth local development experience.",
                                                        "author": {
                                                            "login": "MarcelStranak"
                                                        },
                                                        "url": "https://github.com/localstack/localstack-blog.github.io/pull/10#discussion_r1401992917",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "f14cc96",
                                                            "authoredDate": "2023-11-22T11:58:39Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            After years of active development, we have achieved what we set out to do \u2014 building **faster development cycles** with instant development loops, providing **better isolation** of application logic in test environments, and setting up **enhanced security** with no dependency on a remote cloud service for execution. As always, we are grounding our work on user insights and feedback, and we are excited to have such a committed community!\n          \n          \n            \n            After years of active development, we have achieved what we set out to do: build\u00a0**faster development cycles**\u00a0with instant development loops, provide\u00a0**better isolation**\u00a0of application logic in test environments, and set up\u00a0**enhanced security**\u00a0with no dependency on a remote cloud service for execution. As always, we are grounding our work on user insights and feedback, and we are excited to have such a committed community!",
                                                        "author": {
                                                            "login": "MarcelStranak"
                                                        },
                                                        "url": "https://github.com/localstack/localstack-blog.github.io/pull/10#discussion_r1401996248",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "f14cc96",
                                                            "authoredDate": "2023-11-22T11:58:39Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "I am not 100% sure what we are trying to say here.",
                                                        "author": {
                                                            "login": "MarcelStranak"
                                                        },
                                                        "url": "https://github.com/localstack/localstack-blog.github.io/pull/10#discussion_r1401998327",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "f14cc96",
                                                            "authoredDate": "2023-11-22T11:58:39Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "LocalStack has evolved from being an open-source project to an enterprise development framework!\n\nWhat is it we are trying to say?",
                                                        "author": {
                                                            "login": "MarcelStranak"
                                                        },
                                                        "url": "https://github.com/localstack/localstack-blog.github.io/pull/10#discussion_r1402006476",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "f14cc96",
                                                            "authoredDate": "2023-11-22T11:58:39Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            We want to **lower the barrier of entry** for everybody and make it **easier to get started**. With the Hobby Plan, we want to enable more users to use the LocalStack emulator with all its otherwise **paid features**. LocalStack's Hobby Plan allows you to get started with:\n          \n          \n            \n            We want to **lower the barrier of entry** for everybody and make it **easier to get started**. With the Hobby Plan, we aim to enable more users to use the LocalStack emulator with all its otherwise **paid features**. LocalStack's Hobby Plan allows you to get started with:\n          \n      \n    \n    \n  \n\nwant to was already in the first sentence.",
                                                        "author": {
                                                            "login": "MarcelStranak"
                                                        },
                                                        "url": "https://github.com/localstack/localstack-blog.github.io/pull/10#discussion_r1402008515",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "f14cc96",
                                                            "authoredDate": "2023-11-22T11:58:39Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            LocalStack is deeply rooted in open source and by making LocalStack available for free for non-commercial projects we hope to **further support and give back to the open source community**. It is the easiest way to get into cloud development and to learn not only the specific AWS services but also general cloud concepts that are also applicable to all the other cloud platforms out there. Using the Hobby Plan does not require a credit card, no need to set up an AWS account and there is also no cost risk (or using up the **AWS Free Tier**).\n          \n          \n            \n            LocalStack is deeply rooted in open-source, and by making LocalStack available for free for non-commercial projects, we hope to\u00a0**further support and give back to the open-source community**. It is the easiest way to get into cloud development and to learn not only the specific AWS services but also general cloud concepts that are also applicable to all the other cloud platforms out there. Using the Hobby Plan does not require a credit card. There is no need to set up an AWS account, and there is also no cost risk (or use up the\u00a0**AWS Free Tier**).",
                                                        "author": {
                                                            "login": "MarcelStranak"
                                                        },
                                                        "url": "https://github.com/localstack/localstack-blog.github.io/pull/10#discussion_r1402013663",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "f14cc96",
                                                            "authoredDate": "2023-11-22T11:58:39Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            To put it in a nutshell \u2014 We are incredibly thankful to our community for all the support and feedback we have received over the years! Your contributions have made LocalStack, a battle-tested cloud emulation platform, and helped us evolved from a project that leveraged existing tools to a more integrated platform, capable of emulating complex interactions between various AWS services.\n          \n          \n            \n            To put it in a nutshell, we are incredibly thankful to our community for all the support and feedback we have received over the years! Your contributions have made LocalStack a battle-tested cloud emulation platform. They helped us evolve from a project that leveraged existing tools to a more integrated platform that is capable of emulating complex interactions between various AWS services.",
                                                        "author": {
                                                            "login": "MarcelStranak"
                                                        },
                                                        "url": "https://github.com/localstack/localstack-blog.github.io/pull/10#discussion_r1402019360",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "f14cc96",
                                                            "authoredDate": "2023-11-22T11:58:39Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            Our mission remains the same \u2014 To give developers back control over their environments and free them from wasting time with inefficient dev&test loops in the cloud, so they can instead focus on developing great products! We are excited about making LocalStack more configurable and adaptable to specific user needs, and we are looking forward to your continued support and feedback!\n          \n          \n            \n            Our mission remains the same: Give developers back control over their environments and free them from wasting time on inefficient development & testing loops in the cloud, so they can focus on creating great products! We are excited about making LocalStack more configurable and adaptable to specific user needs, and we are looking forward to your continued support and feedback!",
                                                        "author": {
                                                            "login": "MarcelStranak"
                                                        },
                                                        "url": "https://github.com/localstack/localstack-blog.github.io/pull/10#discussion_r1402022397",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "f14cc96",
                                                            "authoredDate": "2023-11-22T11:58:39Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I kind of like them tbh, what would you use instead @MarcelStranak - commas, or colons?",
                                                        "author": {
                                                            "login": "whummer"
                                                        },
                                                        "url": "https://github.com/localstack/localstack-blog.github.io/pull/10#discussion_r1402116454",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "f14cc96",
                                                            "authoredDate": "2023-11-22T11:58:39Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            Going next, we will continue to focus on strengthening the LocalStack ecosystem and integrations with frameworks such as *[Testcontainers](https://testcontainers.com/), [CloudFormation](https://docs.localstack.cloud/user-guide/aws/cloudformation/), [CDK](https://docs.localstack.cloud/user-guide/integrations/cdk-for-terraform/)* and more! With the new [Extension mechanism](https://docs.localstack.cloud/user-guide/extensions/), you can now extend and customize LocalStack to your needs. We have shipped official extensions for [Minilfare](https://miniflare.dev/), [Mailhog](https://github.com/mailhog/MailHog), [Stripe](https://github.com/adrienverge/localstripe), [httpbin](https://httpbin.org/), and more to provide you with a smooth local development experience.\n          \n          \n            \n            Going next, we will continue to focus on strengthening the LocalStack ecosystem and integrations with frameworks such as *[Testcontainers](https://testcontainers.com/), [CloudFormation](https://docs.localstack.cloud/user-guide/aws/cloudformation/), [CDK](https://docs.localstack.cloud/user-guide/integrations/cdk-for-terraform/)* and more! With the new [Extension mechanism](https://docs.localstack.cloud/user-guide/extensions/), you can now extend and customize LocalStack to your needs. We have shipped official extensions for [Miniflare](https://miniflare.dev/), [Mailhog](https://github.com/mailhog/MailHog), [Stripe](https://github.com/adrienverge/localstripe), [httpbin](https://httpbin.org/), and more to provide you with a smooth local development experience.",
                                                        "author": {
                                                            "login": "whummer"
                                                        },
                                                        "url": "https://github.com/localstack/localstack-blog.github.io/pull/10#discussion_r1402117688",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "f14cc96",
                                                            "authoredDate": "2023-11-22T11:58:39Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Would maybe add a short paragraph somewhere in here that mentions something along the lines of:\n\nOur longer-term vision is not only to provide the best platform and tooling for local cloud development, but to shape the mindset of the industry as a whole and spearhead a movement that puts developer experience (DevX) at the forefront of all cloud-based and managed service offerings. With the groundbreaking and pioneering work that the LocalStack team and our community are conducting on a daily basis, we have demonstrated that it is indeed possible to fundamentally re-think the way how modern cloud applications are developed. Some cloud providers like Cloudflare have already embarked on a local-first API development journey, and we anticipate that others will follow the lead. LocalStack will be in a prime position to offer a unified developer platform that facilitates local multi-cloud development across various providers and managed services - metaphorically becoming the central \"app store\" for local cloud developer tooling.\n\nUnsure about the last sentence, could probably also be removed/revised, or we find a better metaphor..",
                                                        "author": {
                                                            "login": "whummer"
                                                        },
                                                        "url": "https://github.com/localstack/localstack-blog.github.io/pull/10#discussion_r1402138520",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "f14cc96",
                                                            "authoredDate": "2023-11-22T11:58:39Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "APPROVED",
                                        "bodyText": "\ud83d\ude80\ud83d\ude80",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            lead: We're excited to announce that LocalStack has hit a significant milestone of achieving 50,000 GitHub Stars. It's been an incredible journey since we started out to build the best possible cloud developer experience, and we couldn't be happier to share this news with you!\n          \n          \n            \n            lead: We're excited to announce that LocalStack has hit a significant milestone of achieving 50,000 GitHub stars. It has been an incredible journey since we started out to build the best possible cloud developer experience, and we are thrilled to share this news with you!",
                                                        "author": {
                                                            "login": "whummer"
                                                        },
                                                        "url": "https://github.com/localstack/localstack-blog.github.io/pull/10#discussion_r1402417124",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "219fed8",
                                                            "authoredDate": "2023-11-22T17:01:49Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            Next, we will continue to focus on strengthening the LocalStack ecosystem and integrations with frameworks such as *[Testcontainers](https://testcontainers.com/), [CloudFormation](https://docs.localstack.cloud/user-guide/aws/cloudformation/), [CDK](https://docs.localstack.cloud/user-guide/integrations/cdk-for-terraform/)* and more! With the new [extension mechanism](https://docs.localstack.cloud/user-guide/extensions/), you can now extend and customize LocalStack to your needs. We have shipped official extensions for [Miniflare](https://miniflare.dev/), [Mailhog](https://github.com/mailhog/MailHog), [Stripe](https://github.com/adrienverge/localstripe), [httpbin](https://httpbin.org/), and more to provide you with a smooth local development experience.\n          \n          \n            \n            Going forward, we will continue to focus on strengthening the LocalStack ecosystem and integrations with frameworks such as *[Testcontainers](https://testcontainers.com/), [CloudFormation](https://docs.localstack.cloud/user-guide/aws/cloudformation/), [CDK](https://docs.localstack.cloud/user-guide/integrations/cdk-for-terraform/)* and more! With the new [extension mechanism](https://docs.localstack.cloud/user-guide/extensions/), you can now extend and customize LocalStack to your needs. We have shipped official extensions for [Miniflare](https://miniflare.dev/), [Mailhog](https://github.com/mailhog/MailHog), [Stripe](https://github.com/adrienverge/localstripe), [httpbin](https://httpbin.org/), and more to provide you with a smooth local development experience.",
                                                        "author": {
                                                            "login": "whummer"
                                                        },
                                                        "url": "https://github.com/localstack/localstack-blog.github.io/pull/10#discussion_r1402690650",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "219fed8",
                                                            "authoredDate": "2023-11-22T17:01:49Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            After years of active development, we have achieved what we set out to do \u2014 building **faster development cycles** with instant development loops, providing **better isolation** of application logic in test environments, and setting up **enhanced security** with no dependency on a remote cloud service for execution. As always, we are grounding our work on user insights and feedback, and we are excited to have such a committed community!\n          \n          \n            \n            After years of active development, we have achieved what we set out to do \u2014 building **faster development cycles** with instant feedback loops, providing **better isolation** of application logic in test environments, and setting up **enhanced security** with no dependency on a remote cloud service for execution. As always, we are grounding our work on user insights and feedback, and we are excited to have such a committed community!",
                                                        "author": {
                                                            "login": "whummer"
                                                        },
                                                        "url": "https://github.com/localstack/localstack-blog.github.io/pull/10#discussion_r1402693387",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "219fed8",
                                                            "authoredDate": "2023-11-22T17:01:49Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            The best is yet to come! We are primarily working on making our users happy with new features and improving LocalStack as much as we can do. With the [3.0 release](https://blog.localstack.cloud/2023-11-16-announcing-localstack-30-general-availability/), LocalStack has evolved from being an open-source project to an enterprise development framework! We have also received a lot of feedback from our individual users, and we've heard you loud and clear \u2014 We're super excited to bring our **Hobby Plan** for individuals *who are not using LocalStack commercially*!\n          \n          \n            \n            The best is yet to come! We are primarily working on making our users happy with new features and improving LocalStack as much as we can do. With the [3.0 release](https://blog.localstack.cloud/2023-11-16-announcing-localstack-30-general-availability/), LocalStack has evolved from being an open-source project to an enterprise development framework! We have also received a lot of feedback from our individual users, and we've heard you loud and clear \u2014 we're super excited to bring our **Hobby Plan** to individuals *who are using LocalStack for non-commercial use cases*!\n          \n      \n    \n    \n  \n\nalternatively: \"...who are using LocalStack non-commercially\"",
                                                        "author": {
                                                            "login": "whummer"
                                                        },
                                                        "url": "https://github.com/localstack/localstack-blog.github.io/pull/10#discussion_r1402695622",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "219fed8",
                                                            "authoredDate": "2023-11-22T17:01:49Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            LocalStack is deeply rooted in open-source, and by making LocalStack available for free for non-commercial projects, we hope to\u00a0**further support and give back to the open-source community**. It is the easiest way to get into cloud development and to learn not only the specific AWS services but also general cloud concepts that are also applicable to all the other cloud platforms out there. Using the Hobby Plan does not require a credit card. There is no need to set up an AWS account, and there is also no cost risk (or use up the\u00a0**AWS Free Tier**).\n          \n          \n            \n            LocalStack is deeply rooted in open-source, and by making LocalStack available for free for non-commercial projects, we hope to\u00a0**further support and give back to the open-source community**. It is the easiest way to get into cloud development and to learn not only the specific AWS services but also general cloud concepts that are also applicable to all the other cloud platforms out there. Using the Hobby Plan does not require a credit card. There is no need to set up an AWS account, and there is also no cost risk (as with using up the\u00a0AWS Free Tier).",
                                                        "author": {
                                                            "login": "whummer"
                                                        },
                                                        "url": "https://github.com/localstack/localstack-blog.github.io/pull/10#discussion_r1402722668",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "219fed8",
                                                            "authoredDate": "2023-11-22T17:01:49Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            To put it in a nutshell, we are incredibly thankful to our community for all the support and feedback we have received over the years! Your contributions have made LocalStack a battle-tested cloud emulation platform. They helped us evolve from a project that leveraged existing tools to a more integrated platform that is capable of emulating complex interactions between various AWS services.\n          \n          \n            \n            To put it in a nutshell, we are incredibly thankful to our community for all the support and feedback we have received over the years! Your contributions have made LocalStack a battle-tested cloud emulation and development platform. They helped us evolve from a project that leveraged existing tools to a full-fledged platform that is capable of providing an integrated local development environment for building AWS cloud and serverless applications.",
                                                        "author": {
                                                            "login": "whummer"
                                                        },
                                                        "url": "https://github.com/localstack/localstack-blog.github.io/pull/10#discussion_r1402725452",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "219fed8",
                                                            "authoredDate": "2023-11-22T17:01:49Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            *Onto hitting the 100,000 GitHub Stars milestone next!* \ud83d\ude80\n          \n          \n            \n            *Ad astra - onto hitting the 100,000 GitHub Stars milestone next!* \ud83d\ude80",
                                                        "author": {
                                                            "login": "whummer"
                                                        },
                                                        "url": "https://github.com/localstack/localstack-blog.github.io/pull/10#discussion_r1402727972",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "48873a7",
                                                            "authoredDate": "2023-11-22T21:24:47Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            Our mission remains the same: Give developers back control over their environments and free them from wasting time on inefficient development & testing loops in the cloud, so they can focus on creating great products! We are excited about making LocalStack more configurable and adaptable to specific user needs, and we are looking forward to your continued support and feedback!\n          \n          \n            \n            Our mission remains the same: Give developers back control over their environments and free them from wasting time on inefficient development & testing loops in the cloud, so they can focus on creating great products. We are excited about making LocalStack more configurable and adaptable to specific user needs, and we are looking forward to your continued support and feedback!",
                                                        "author": {
                                                            "login": "whummer"
                                                        },
                                                        "url": "https://github.com/localstack/localstack-blog.github.io/pull/10#discussion_r1403164886",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "9cbf001",
                                                            "authoredDate": "2023-11-23T07:41:39Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Colon looks better in this case, since we are listing the items. Additionally, we could cut it into two sentences and use a different tone.\nAnyhow, I am here only for the proofreading, I leave the writing to Harsh. ;)",
                                                        "author": {
                                                            "login": "MarcelStranak"
                                                        },
                                                        "url": "https://github.com/localstack/localstack-blog.github.io/pull/10#discussion_r1403169651",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "f14cc96",
                                                            "authoredDate": "2023-11-22T11:58:39Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "textMatches": [
                        {
                            "property": "comments.body"
                        }
                    ]
                },
                {
                    "node": {
                        "number": 28846,
                        "title": "depends: fix libmultiprocess build on aarch64",
                        "repository": {
                            "nameWithOwner": "bitcoin/bitcoin",
                            "primaryLanguage": {
                                "name": "C++"
                            }
                        },
                        "createdAt": "2023-11-10T17:15:53Z",
                        "mergedAt": "2023-12-13T10:44:27Z",
                        "url": "https://github.com/bitcoin/bitcoin/pull/28846",
                        "state": "MERGED",
                        "author": {
                            "login": "fanquake"
                        },
                        "editor": {
                            "login": "fanquake"
                        },
                        "body": "Change to always install libmultiprocess into `lib/`. On some systems (my Fedora aarch64 box), libmultiprocess was being installed into `lib64/`, and then configure would fail to pick it up, because we only add `lib/` to pkgconfig/ldflags out of depends. Rather than adding lib64 to those, I opted for installing libmultiprocess into lib, with every other dependency we build.\r\n\r\nThis was broken in our build after https://github.com/chaincodelabs/libmultiprocess/pull/79 upstream.",
                        "reviews": {
                            "edges": [
                                {
                                    "node": {
                                        "state": "APPROVED",
                                        "bodyText": "Code review ACK c3a962b. These changes seems safe, and the first commit seems like a clear bugfix. But I did have some minor suggestions to improve the first commit, and some questions about the second commit below.",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "In commit \"depends: always install libmultiprocess to /lib\" (156366f)\nThanks for this fix. It seems like a regression after chaincodelabs/libmultiprocess#79 (comment)\nWould suggest a comment here like \"# Hardcode library install path to \"lib\" to match the  PKG_CONFIG_PATH setting in depends/config.site.in which also hardcodes \"lib\". Without this setting, cmake by default would use the OS library directory, which might be \"lib64\" or something else, not \"lib\", on multiarch systems.\"\nWould also suggest dropping trailing slash in \"lib/\" since it doesn't seem like directories are normally represented with a trailing slash in https://cmake.org/cmake/help/latest/module/GNUInstallDirs.html",
                                                        "author": {
                                                            "login": "ryanofsky"
                                                        },
                                                        "url": "https://github.com/bitcoin/bitcoin/pull/28846#discussion_r1399057303",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "156366f",
                                                            "authoredDate": "2023-11-10T17:06:36Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "In commit \"depends: build libmultiprocess with position independant code\" (c3a962b)\nI don't think I really understand what's going on here, but this seems like a reasonable change given that --with-pic seems to be used on so many other depends builds 1. I guess it is a little unclear why in the other depends builds, the --with-pic option seems to be selectively applied for individual platforms like linux, freebsd, netbsd, openbsd (and never darwin), while this PIC option apples to all platforms. But maybe always setting the option for cmake is fine.\nI guess I have 3 questions:\n\nIs this workaround still needed if you add --disable-shared to the capnp build for this platform like we are already doing the for the android platform? Maybe we should just be building capnp with --disable-shared unconditionally?\n\n\n  \n    \n      bitcoin/depends/packages/capnp.mk\n    \n    \n         Line 14\n      in\n      d752349\n    \n  \n  \n    \n\n        \n          \n           $(package)_config_opts_android := --disable-shared \n        \n    \n  \n\n\n\n\nOpposite question: is the android --disable-shared workaround needed anymore if   -DCMAKE_POSITION_INDEPENDENT_CODE=ON is used here? Maybe we could partially revert #25322 after this?\n\n\nIs this workaround still needed with #28856? That PR seems to drop the android workaround, so maybe switching both of these libraries to cmake would just fix the problem automatically.\n\n\nFootnotes\n\n\nI asked chatgpt to explain the link error https://chat.openai.com/share/6d5445a7-14ac-493b-a41a-d2b23899caa6 but didn't have enough details about the build to be able to narrow down specifically what is happening. \u21a9",
                                                        "author": {
                                                            "login": "ryanofsky"
                                                        },
                                                        "url": "https://github.com/bitcoin/bitcoin/pull/28846#discussion_r1399123100",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "c3a962b",
                                                            "authoredDate": "2023-11-10T17:08:17Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Rather than adding lib64/ to the pkg-config and link flags, I opted for always installing into lib/.\n\nMind sharing your reasoning behind this decision? Asking because the alternative looks more generic and will work if any other dependency package will switch to CMake.\n\nA side note, not directly related to this PR: the CMake-based build system has no such an issue at all.",
                                                        "author": {
                                                            "login": "hebasto"
                                                        },
                                                        "url": "https://github.com/bitcoin/bitcoin/pull/28846#discussion_r1399309912",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "156366f",
                                                            "authoredDate": "2023-11-10T17:06:36Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Rather than adding lib64/ to the pkg-config and link flags, I opted for always installing into lib/.\n\nMind sharing your reasoning behind this decision?\n\nThe quote you're responding is from fanquake, but I think it makes sense for the depends build to hardcode \"lib\" here because it is already hardcoding \"lib\" in config.site.in:\n\n  \n    \n      bitcoin/depends/config.site.in\n    \n    \n         Line 91\n      in\n      d752349\n    \n  \n  \n    \n\n        \n          \n           PKG_CONFIG_PATH=\"${depends_prefix}/share/pkgconfig:${depends_prefix}/lib/pkgconfig\" \n        \n    \n  \n\n\nSo this change just keeps the build consistent and ensure the bitcoin configure script can find the library built by depends on all platforms.\n\nAsking because the alternative looks more generic and will work if any other dependency package will switch to CMake.\n\nThis change isn't very clean so I agree there are probably better alternatives, but I'm actually not sure which alternative you're referring to here. I do agree it should become simpler when more of the build switches to cmake, though.",
                                                        "author": {
                                                            "login": "ryanofsky"
                                                        },
                                                        "url": "https://github.com/bitcoin/bitcoin/pull/28846#discussion_r1399329330",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "156366f",
                                                            "authoredDate": "2023-11-10T17:06:36Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Is this workaround still needed with\n\nI think this can be deffered for #28856. I haven't tested everything, but with that change, we seem to avoid the issues here. I'll close this for now in favour of that change, and properly review shortly.",
                                                        "author": {
                                                            "login": "fanquake"
                                                        },
                                                        "url": "https://github.com/bitcoin/bitcoin/pull/28846#discussion_r1410822923",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "c3a962b",
                                                            "authoredDate": "2023-11-10T17:08:17Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "APPROVED",
                                        "bodyText": "Thanks for reopening, code review ACK 68823aa for just the third commit. This PR could be a draft since it is based on another PR.",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "In commit \"depends: always install libmultiprocess to /lib\" (68823aa)\nI still think it would be nice to add some code comment here, maybe like the one I suggested earlier:\n\n# Hardcode library install path to \"lib\" to match the PKG_CONFIG_PATH setting in depends/config.site.in which also hardcodes \"lib\". Without this setting, cmake by default would use the OS library directory, which might be \"lib64\" or something else, not \"lib\", on multiarch systems.\n\nIf you'd prefer not to add a comment like this so the makefile is shorter and minimal, that's fine. But personally I think the depends recipes would be easier to work with if they explained what they were trying to do without requiring git history to understand them.",
                                                        "author": {
                                                            "login": "ryanofsky"
                                                        },
                                                        "url": "https://github.com/bitcoin/bitcoin/pull/28846#discussion_r1414128811",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "68823aa",
                                                            "authoredDate": "2023-11-10T17:06:36Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Sure, pushed up your comment and added co-author.",
                                                        "author": {
                                                            "login": "fanquake"
                                                        },
                                                        "url": "https://github.com/bitcoin/bitcoin/pull/28846#discussion_r1414135724",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "68823aa",
                                                            "authoredDate": "2023-11-10T17:06:36Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "APPROVED",
                                        "bodyText": "Code review ACK 1a90ac4, just adding comment since last review (thanks!)",
                                        "comments": {
                                            "edges": []
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "APPROVED",
                                        "bodyText": "ACK 6293a3f, tested on Fedora 37, aarch64.",
                                        "comments": {
                                            "edges": []
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "APPROVED",
                                        "bodyText": "Code review ACK 6293a3f. No changes since last review other than rebasing after #28856 merge",
                                        "comments": {
                                            "edges": []
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Is this workaround still needed with #28856? That PR seems to drop the android workaround, so maybe switching both of these libraries to cmake would just fix the problem automatically.\n\nYes, the switch to CMake in #28856 didn't fix this issue.",
                                                        "author": {
                                                            "login": "fanquake"
                                                        },
                                                        "url": "https://github.com/bitcoin/bitcoin/pull/28846#discussion_r1417239636",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "c3a962b",
                                                            "authoredDate": "2023-11-10T17:08:17Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "APPROVED",
                                        "bodyText": "Code review ACK 965d38d. Left a suggestion to simplify the second commit, but it is not important and this change looks good as.",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "In commit \"depends: always install capnp to /lib\" (6d7e71e)\nI think probably it would be good revert this line and only make this change in capnp.mk not native_capnp.mk since the PKG_CONFIG_PATH mentioned in the comment above is used to find cross-compiled dependencies, not native dependencies, so the reasoning in the comment doesn't really apply here. Reverting this change would also make the native_capnp package definition simpler and more consistent with the native_libmultiprocess package definition.\nOn the other hand, If this change is actually needed on some platforms, that wouldn't be shocking because ways packages detect dependencies can be fragile. But I wouldn't expect this to be necessary and think it would be better not to override the build setting without a clear reason.",
                                                        "author": {
                                                            "login": "ryanofsky"
                                                        },
                                                        "url": "https://github.com/bitcoin/bitcoin/pull/28846#discussion_r1423019899",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "6d7e71e",
                                                            "authoredDate": "2023-12-06T12:34:03Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "re: #28846 (comment)\nIn commit \"depends: build libmultiprocess with position independant code\" (965d38d)\n\nYes, the switch to CMake in #28856 didn't fix this issue.\n\nI'm still not exactly clear why this change is needed here and also why --with-pic options seem to be used for many other packages as well. But at least after #28856 the PIC option is used more consistently, and it should cause no harm in any case.\nMaybe in the future the upstream build could do a better job of determining whether PIC code is needed itself, and this setting could be dropped.",
                                                        "author": {
                                                            "login": "ryanofsky"
                                                        },
                                                        "url": "https://github.com/bitcoin/bitcoin/pull/28846#discussion_r1423040107",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "c3a962b",
                                                            "authoredDate": "2023-11-10T17:08:17Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Have dropped this change.",
                                                        "author": {
                                                            "login": "fanquake"
                                                        },
                                                        "url": "https://github.com/bitcoin/bitcoin/pull/28846#discussion_r1424034141",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "6d7e71e",
                                                            "authoredDate": "2023-12-06T12:34:03Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Maybe in the future the upstream build could do a better job of determining whether PIC code is needed itself, and this setting could be dropped.\n\nI agree with your comments, and will probably followup with some improvements. I think historically, the usage of --with-pic, has been a bit whack-a-mole esqu, where it's been added as issues have arrison / as people have tested things of various platforms, leading to the inconsistent state we have today.",
                                                        "author": {
                                                            "login": "fanquake"
                                                        },
                                                        "url": "https://github.com/bitcoin/bitcoin/pull/28846#discussion_r1424036835",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "c3a962b",
                                                            "authoredDate": "2023-11-10T17:08:17Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "APPROVED",
                                        "bodyText": "Code review ACK bde8d63. Only changes since last review were reverting the native_capnp change as suggested, and changing the order of the first two commits.",
                                        "comments": {
                                            "edges": []
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "textMatches": [
                        {
                            "property": "comments.body"
                        },
                        {
                            "property": "body"
                        }
                    ]
                },
                {
                    "node": {
                        "number": 1631,
                        "title": "Don't require models to support more than 1 batch axis",
                        "repository": {
                            "nameWithOwner": "netket/netket",
                            "primaryLanguage": {
                                "name": "Python"
                            }
                        },
                        "createdAt": "2023-11-02T12:58:29Z",
                        "mergedAt": "2023-11-06T17:05:21Z",
                        "url": "https://github.com/netket/netket/pull/1631",
                        "state": "MERGED",
                        "author": {
                            "login": "inailuig"
                        },
                        "editor": null,
                        "body": "when using the jax operators.\r\nSomehow we missed this in https://github.com/netket/netket/pull/1506\r\n\r\nThanks to @jwnys for pointing it out.",
                        "reviews": {
                            "edges": [
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "https://chat.openai.com/share/eefd3861-16f7-4850-ac63-998784264c7b",
                                                        "author": {
                                                            "login": "gcarleo"
                                                        },
                                                        "url": "https://github.com/netket/netket/pull/1631#discussion_r1380066231",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "febbda8",
                                                            "authoredDate": "2023-11-02T12:53:35Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "not really, there is a call to logpsi in between",
                                                        "author": {
                                                            "login": "inailuig"
                                                        },
                                                        "url": "https://github.com/netket/netket/pull/1631#discussion_r1380243854",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "febbda8",
                                                            "authoredDate": "2023-11-02T12:53:35Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "You should reshape also the \\sigma, not only the \\sigmap, to remove possible axes from the different chains.",
                                                        "author": {
                                                            "login": "jwnys"
                                                        },
                                                        "url": "https://github.com/netket/netket/pull/1631#discussion_r1380246392",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "febbda8",
                                                            "authoredDate": "2023-11-02T12:53:35Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "For the sake of readability can we define an auxiliary small function that does this reshaping? Something like 'at_worst1d' (similar to atleast1d)",
                                                        "author": {
                                                            "login": "gcarleo"
                                                        },
                                                        "url": "https://github.com/netket/netket/pull/1631#discussion_r1380250436",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "febbda8",
                                                            "authoredDate": "2023-11-02T12:53:35Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "@jwnys the chains should already be flattened here",
                                                        "author": {
                                                            "login": "inailuig"
                                                        },
                                                        "url": "https://github.com/netket/netket/pull/1631#discussion_r1381202709",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "febbda8",
                                                            "authoredDate": "2023-11-02T12:53:35Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "let me know if this is too hacky.\nI felt like it would be good to check it in many places, and here we can do so for free (compared to adding a single dedicated test)\nAlso, if you check for ndim==2 there is quite a few places where the ndim=1, but apparently we always wrap it to support this here: \n  \n    \n      netket/netket/vqs/mc/mc_state/state.py\n    \n    \n        Lines 197 to 205\n      in\n      fe7629b\n    \n  \n  \n    \n\n        \n          \n               self._apply_fun = wrap_to_support_scalar( \n        \n\n        \n          \n                   nkjax.HashablePartial( \n        \n\n        \n          \n                       lambda model, pars, x, **kwargs: model.apply(pars, x, **kwargs), \n        \n\n        \n          \n                       model, \n        \n\n        \n          \n                   ) \n        \n\n        \n          \n               ) \n        \n\n        \n          \n            \n        \n\n        \n          \n           elif apply_fun is not None: \n        \n\n        \n          \n               self._apply_fun = wrap_to_support_scalar(apply_fun)",
                                                        "author": {
                                                            "login": "inailuig"
                                                        },
                                                        "url": "https://github.com/netket/netket/pull/1631#discussion_r1381249472",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "e8f1892",
                                                            "authoredDate": "2023-11-03T07:45:25Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Now that I think about it. I am not in favour of this change here.\nThe apply_fun should be wrapped, in case, inside of the variational state.\nOtherwise we end up with a complex patchwork of what supports and what does not support multiple axes.\nMy idea is that those operators & co should have the simplest as possible code, and then we can put a lot of those smarts in the constructors of MCState or similar.\nIf a user develops/uses his own variational state, he can wrap the callable he uses as apply fun by himself.\nAgain, the depths of netket's operators should stay as simple as possible..",
                                                        "author": {
                                                            "login": "PhilipVinc"
                                                        },
                                                        "url": "https://github.com/netket/netket/pull/1631#discussion_r1382606186",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "e8f1892",
                                                            "authoredDate": "2023-11-03T07:45:25Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I don't know how I feel about adding to netket 100 more lines, and a wrapper, to support a terrible habit.\nWe should rather instruct those 'users' in the right ways of vectorize their models rather than fix their bad behaviour ourself.\n(I feel netket's getting too many magics...)",
                                                        "author": {
                                                            "login": "PhilipVinc"
                                                        },
                                                        "url": "https://github.com/netket/netket/pull/1631#discussion_r1382606827",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "e8f1892",
                                                            "authoredDate": "2023-11-03T07:45:25Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "netket has always corrected for this with the numba operators. It's just bizar not to do it now for the jax operator. This 'bad' behavior has already been encouraged by all previous versions of netket.\nIt just introduced easy mistakes (it took me time to understand that this is what was happening). Furthermore, all other libaries do the same: you have a single batch axis...",
                                                        "author": {
                                                            "login": "jwnys"
                                                        },
                                                        "url": "https://github.com/netket/netket/pull/1631#discussion_r1382607271",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "e8f1892",
                                                            "authoredDate": "2023-11-03T07:45:25Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I would be in favor of having requirements on models / user inputs rather than putting too many conversions inside of netket if possible. For example, why can't we require users to have their models take a single batch axis only?",
                                                        "author": {
                                                            "login": "gcarleo"
                                                        },
                                                        "url": "https://github.com/netket/netket/pull/1631#discussion_r1383042457",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "e8f1892",
                                                            "authoredDate": "2023-11-03T07:45:25Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "APPROVED",
                                        "bodyText": "So, to be honest I would be more in for adding the simple reshape - reshape trick we had at the beginning rather than this 'complicated' function, for the simple reason that I believe it to be uglier but more straightforward (we could add a comment) and easier to copy-paste around.\nalso because we need this in a single place...\nRegardless, I don't feel very strongly about this, so if @gcarleo prefers to have the wrapper function, that's fine by me",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "@jwnys a while ago we had decided to explicitly not require that models support scalar inputs, but we never made a choice on whether we would require more than 1 batch dimension or not, even though I guess my wording does indeed suggest we only require a single batch axis support, so that's the defecto standard now.\nWhat is missing are consistent tests to catch this.",
                                                        "author": {
                                                            "login": "PhilipVinc"
                                                        },
                                                        "url": "https://github.com/netket/netket/pull/1631#discussion_r1383076279",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "e8f1892",
                                                            "authoredDate": "2023-11-03T07:45:25Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "APPROVED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": []
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "textMatches": [
                        {
                            "property": "comments.body"
                        },
                        {
                            "property": "body"
                        }
                    ]
                },
                {
                    "node": {
                        "number": 33679,
                        "title": "airbyte-lib: Add telemetry",
                        "repository": {
                            "nameWithOwner": "airbytehq/airbyte",
                            "primaryLanguage": {
                                "name": "Python"
                            }
                        },
                        "createdAt": "2023-12-20T16:03:59Z",
                        "mergedAt": "2024-01-16T09:25:25Z",
                        "url": "https://github.com/airbytehq/airbyte/pull/33679",
                        "state": "MERGED",
                        "author": {
                            "login": "flash1293"
                        },
                        "editor": {
                            "login": "flash1293"
                        },
                        "body": "This PR adds tracking to airbyte-lib.\r\n\r\nOn start of each sync, an event is sent to segment, tracking the date, the used source, cache and airbyte-lib version.\r\nOnce the sync finishes, a second event is sent, tracking whether the sync was successful or not.\r\n\r\nThis is done using basic http requests.\r\n\r\nIf the `DO_NOT_TRACK` env variable is set, no tracking events are sent.\r\n\r\nThis PR also sets the user agent for the connector registry json file request to make it possible to identify airbyte-lib requests.",
                        "reviews": {
                            "edges": [
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Totally optional, but a common convention in Python if you want to call out that the intentional dropping of a return value - you can use \"_ = ...\"\nThis isn't necessary by any means, but will inform the reader \"yes, I know there's a return value and no, I don't want to use it.\" \ud83d\ude04\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                # Do not handle the response, we don't want to block the execution\n          \n          \n            \n                requests.post(\"https://api.segment.io/v1/track\", auth=(TRACKING_KEY, \"\"), json=payload)\n          \n          \n            \n                # Do not handle the response, we don't want to block the execution\n          \n          \n            \n                _ = requests.post(\"https://api.segment.io/v1/track\", auth=(TRACKING_KEY, \"\"), json=payload)",
                                                        "author": {
                                                            "login": "aaronsteers"
                                                        },
                                                        "url": "https://github.com/airbytehq/airbyte/pull/33679#discussion_r1445637684",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "799fe84",
                                                            "authoredDate": "2024-01-03T15:44:05Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "It's not clear to me what 'target' means in this context. Can we add a docstring to explain it?",
                                                        "author": {
                                                            "login": "aaronsteers"
                                                        },
                                                        "url": "https://github.com/airbytehq/airbyte/pull/33679#discussion_r1445639299",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "799fe84",
                                                            "authoredDate": "2024-01-03T15:44:05Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Ditto above. I'm not sure what 'target' means here.",
                                                        "author": {
                                                            "login": "aaronsteers"
                                                        },
                                                        "url": "https://github.com/airbytehq/airbyte/pull/33679#discussion_r1445639454",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "799fe84",
                                                            "authoredDate": "2024-01-03T15:44:05Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "This might be a nit and/or semantic distinction, but I slightly prefer a name like get_telemetry_info or get_telemetry_markers over get_tracking_info. The work 'tracking', to me at least, implies ability to 'track' personally, to perhaps identify or de-anonymize, which this isn't doing.",
                                                        "author": {
                                                            "login": "aaronsteers"
                                                        },
                                                        "url": "https://github.com/airbytehq/airbyte/pull/33679#discussion_r1445642005",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "799fe84",
                                                            "authoredDate": "2024-01-03T15:44:05Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Makes sense to me, I pondered the name a bit. Telemetry has the risk to be confused with telemetry in the sense of OpenTelemetry and the like, but it's probably better than tracking. \"analytics\" would be another option, but thinking about it calling this kind of thing telemetry is probably an industry standard for software running on the client.",
                                                        "author": {
                                                            "login": "flash1293"
                                                        },
                                                        "url": "https://github.com/airbytehq/airbyte/pull/33679#discussion_r1445851972",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "799fe84",
                                                            "authoredDate": "2024-01-03T15:44:05Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "It's about where the data is loaded to - a cache or streamed directly via iterable.",
                                                        "author": {
                                                            "login": "flash1293"
                                                        },
                                                        "url": "https://github.com/airbytehq/airbyte/pull/33679#discussion_r1445883594",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "799fe84",
                                                            "authoredDate": "2024-01-03T15:44:05Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "APPROVED",
                                        "bodyText": "@flash1293 - Thanks for moving this forward! I've added several suggestions, but none need to block this increment. I'm approving with the noted suggestions, and we can follow-up in subsequent iterations if needed.",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Not a blocker, but what happens if we omit ip altogether?",
                                                        "author": {
                                                            "login": "aaronsteers"
                                                        },
                                                        "url": "https://github.com/airbytehq/airbyte/pull/33679#discussion_r1451584728",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "56314e4",
                                                            "authoredDate": "2024-01-12T10:12:54Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Not a blocker, but should we add a \"suppress error\" block here for any network issues or host availability issues? We wouldn't want those to cause a crash.\nIn some environments, only specific network endpoints are whitelisted, for instance - and this will (and should) fail if network access is not available to our telemetry endpoint.\nI think we want the telemetry to fail gracefully/silently, so functionality is not affected.",
                                                        "author": {
                                                            "login": "aaronsteers"
                                                        },
                                                        "url": "https://github.com/airbytehq/airbyte/pull/33679#discussion_r1451585083",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "56314e4",
                                                            "authoredDate": "2024-01-12T10:12:54Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "For my info, what does this tracking key represent?",
                                                        "author": {
                                                            "login": "aaronsteers"
                                                        },
                                                        "url": "https://github.com/airbytehq/airbyte/pull/33679#discussion_r1451585949",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "56314e4",
                                                            "authoredDate": "2024-01-12T10:12:54Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Since in-memory is out of scope for now, what do you think of the cache types just being the name of the DB backed? So, something like DUCKDB, POSTGRES, SNOWFLAKE, etc.? Or do you have something else in mind for this?",
                                                        "author": {
                                                            "login": "aaronsteers"
                                                        },
                                                        "url": "https://github.com/airbytehq/airbyte/pull/33679#discussion_r1451586194",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "56314e4",
                                                            "authoredDate": "2024-01-12T10:12:54Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "A nit, but could we rename this to source_info just to clarify it is not the original source object?\nFor context, when reading through, I panicked for a sec when I thought asdict(source) might contain the original source config and creds - and then relaxed on scrolling up to see the type was SourceTelemetryInfo. A slight rename to source_info or similar would just make this line more clear, since we use source elsewhere for the Source class instances.\n(Edit: To clarify, I have no problem with the telemetry object schema having it's node called \"source\". Just the object on the right side is what I meant.)",
                                                        "author": {
                                                            "login": "aaronsteers"
                                                        },
                                                        "url": "https://github.com/airbytehq/airbyte/pull/33679#discussion_r1451586539",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "56314e4",
                                                            "authoredDate": "2024-01-12T10:12:54Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "This test is great. I think it also would be good to add a test that blocks network access, as mentioned above, to ensure that inability to reach the endpoint doesn't hang or crash the program.\nI haven't done this myself but a quick ChatGPT session proposed code something like this:\nimport socket\nimport pytest\nfrom unittest.mock import patch\n\n# This function will replace socket.socket.connect\ndef block_network(*args, **kwargs):\n    raise OSError(\"Network access not allowed during test\")\n\n# Use the patch decorator to replace socket.socket.connect with block_network\n@patch('socket.socket.connect', new=block_network)\ndef test_telemetry_no_network():\n    # Our test code here should call the tracking function and just\n    # make sure that the OSError is caught and handled internally, aka _not_ raised.\nI don't think we need to block this PR on the above, but I think we should track a follow-on action if not in scope for this iteration.",
                                                        "author": {
                                                            "login": "aaronsteers"
                                                        },
                                                        "url": "https://github.com/airbytehq/airbyte/pull/33679#discussion_r1451588497",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "56314e4",
                                                            "authoredDate": "2024-01-12T10:12:54Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Something like this using contextlib.suppress, I think:\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n                # Do not handle the response, we don't want to block the execution\n          \n          \n            \n                _ = requests.post(\"https://api.segment.io/v1/track\", auth=(TRACKING_KEY, \"\"), json=payload)\n          \n          \n            \n                # Suppress exceptions if host is unreachable or network is unavailable\n          \n          \n            \n                with suppress(OSError):  # Network errors are subclasses of `OSError`\n          \n          \n            \n                    # Do not handle the response, we don't want to block the execution\n          \n          \n            \n                    _ = requests.post(\"https://api.segment.io/v1/track\", auth=(TRACKING_KEY, \"\"), json=payload)",
                                                        "author": {
                                                            "login": "aaronsteers"
                                                        },
                                                        "url": "https://github.com/airbytehq/airbyte/pull/33679#discussion_r1451589243",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "56314e4",
                                                            "authoredDate": "2024-01-12T10:12:54Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "I think we should use a context manager for this override, to prevent bleeding to other tests:\nSomething like this:\n    with patch.dict('os.environ', {'DO_NOT_TRACK': ''}):\n        # Our test code here\n        # Within this block, 'DO_NOT_TRACK' is set to ''\n        # Other environment variables are kept\nOr if we want DO_NOT_TRACK to be unset, then maybe something like this:\n    with patch.dict('os.environ', values={}, remove=['DO_NOT_TRACK']):\n        # Our test code here\n        # Within this block, 'DO_NOT_TRACK' is unset\n        # Other environment variables are kept\nI also think we should be clear about whether an empty string still counts as the variable being 'set'. I think this implementation would treat the empty string as 'unset', which makes sense I think. In the implementation files, I was originally going to recommend checking for \"DO_NOT_CHECK\" not in os.environ but that check would not work if we want the empty string to count as not being set.\nI'm totally okay with either approach. Just calling out the distinction to make sure we're not missing anything.",
                                                        "author": {
                                                            "login": "aaronsteers"
                                                        },
                                                        "url": "https://github.com/airbytehq/airbyte/pull/33679#discussion_r1451590812",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "56314e4",
                                                            "authoredDate": "2024-01-12T10:12:54Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "I think I'd like to request one more attribute here, which is capturing the presence of a \"CI\" flag in os.environ.\nCI tests are very noisy on our metrics - with the possibility to make up 50-80% of usage stats in some extreme cases, or in specific cross-sections of usage. Luckily, the industry has a convention:\nhttps://chat.openai.com/share/eb500944-8bb6-43a1-b64e-5f901f4587c4\n(Turns out \"CI environment variable\" is hard to google. I've previously seen a third party site advocating for this standard but I couldn't find it today so the above link is a ChatGPT conversation.)\nRather than return the value stored in the \"CI\" environment variable, I think it is sufficient to list it in 'extra_flags' or similar, or just as its own boolean (\"True\" means present\").\nWdyt?",
                                                        "author": {
                                                            "login": "aaronsteers"
                                                        },
                                                        "url": "https://github.com/airbytehq/airbyte/pull/33679#discussion_r1451591808",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "56314e4",
                                                            "authoredDate": "2024-01-12T10:12:54Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Even though it wouldn't contain much, we could also adopt the \"TelemetryInfo\" convention to be parallel with the source side. In that case, this would be a \"CacheTelemetryInfo\" dataclass, perhaps just with one member, and would render as a dict instead of a string in the telemetry object.",
                                                        "author": {
                                                            "login": "aaronsteers"
                                                        },
                                                        "url": "https://github.com/airbytehq/airbyte/pull/33679#discussion_r1451593248",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "56314e4",
                                                            "authoredDate": "2024-01-12T10:12:54Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "After giving this some more thought and research, I think I'm in the camp of the empty string being 'falsey' (tracking enabled) and any other set value being 'truthy' (meaning opted-out) - which is exactly how you have it now. This is easy to document and communicate, easy to modify, and unlikely to lead to any users thinking they are opted out when they actually aren't.",
                                                        "author": {
                                                            "login": "aaronsteers"
                                                        },
                                                        "url": "https://github.com/airbytehq/airbyte/pull/33679#discussion_r1451596325",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "56314e4",
                                                            "authoredDate": "2024-01-12T10:12:54Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "then segment would automatically add back the actual IP",
                                                        "author": {
                                                            "login": "flash1293"
                                                        },
                                                        "url": "https://github.com/airbytehq/airbyte/pull/33679#discussion_r1452213635",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "56314e4",
                                                            "authoredDate": "2024-01-12T10:12:54Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Great suggestion!",
                                                        "author": {
                                                            "login": "flash1293"
                                                        },
                                                        "url": "https://github.com/airbytehq/airbyte/pull/33679#discussion_r1452214517",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "56314e4",
                                                            "authoredDate": "2024-01-12T10:12:54Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Since in-memory is out of scope for now, what do you think of the cache types just being the name of the DB backed? So, something like DUCKDB, POSTGRES, SNOWFLAKE, etc\n\nYes, that's what the TODO on top is meant for.\n\nEven though it wouldn't contain much, we could also adopt the \"TelemetryInfo\" convention to be parallel with the source side. In that case, this would be a \"CacheTelemetryInfo\" dataclass, perhaps just with one member, and would render as a dict instead of a string in the telemetry object.\n\nGood suggestion, I will adjust it like that - maybe we want to add other dimensions later on.",
                                                        "author": {
                                                            "login": "flash1293"
                                                        },
                                                        "url": "https://github.com/airbytehq/airbyte/pull/33679#discussion_r1452220314",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "56314e4",
                                                            "authoredDate": "2024-01-12T10:12:54Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Good suggestion, added a test for this (I made it part of the same block via a new parameter tuple.",
                                                        "author": {
                                                            "login": "flash1293"
                                                        },
                                                        "url": "https://github.com/airbytehq/airbyte/pull/33679#discussion_r1452240794",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "56314e4",
                                                            "authoredDate": "2024-01-12T10:12:54Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Good suggestion to use patch.dict here!\nAgreed, it depends on the nature of the environment variable, but for something like do_not_track it feels right to err on the side of interpreting something as truthy even if it wasn't meant like that - better than the other way around.",
                                                        "author": {
                                                            "login": "flash1293"
                                                        },
                                                        "url": "https://github.com/airbytehq/airbyte/pull/33679#discussion_r1452246773",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "56314e4",
                                                            "authoredDate": "2024-01-12T10:12:54Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "textMatches": [
                        {
                            "property": "comments.body"
                        },
                        {
                            "property": "body"
                        }
                    ]
                },
                {
                    "node": {
                        "number": 489,
                        "title": "refactor(openadapt.config): refactoring",
                        "repository": {
                            "nameWithOwner": "OpenAdaptAI/OpenAdapt",
                            "primaryLanguage": {
                                "name": "Python"
                            }
                        },
                        "createdAt": "2023-09-01T05:52:29Z",
                        "mergedAt": null,
                        "url": "https://github.com/OpenAdaptAI/OpenAdapt/pull/489",
                        "state": "CLOSED",
                        "author": {
                            "login": "KrishPatel13"
                        },
                        "editor": {
                            "login": "KrishPatel13"
                        },
                        "body": "<!-- Thank you for submitting a pull request! To ensure a prompt review of your changes, please provide the following information. -->\r\nRefactor config, MOtivation: Issue #485 \r\n**What kind of change does this PR introduce?**\r\n\r\n<!-- E.g. a bugfix, feature, refactoring, etc\u2026 -->\r\n\r\n**Summary**\r\n\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? Try to link to an open issue. -->\r\n\r\n**Checklist**\r\n* [x] My code follows the style guidelines of OpenAdapt\r\n* [x] I have performed a self-review of my code\r\n* [x] If applicable, I have added tests to prove my fix is functional/effective\r\n* [x] I have linted my code locally prior to submission\r\n* [x] I have commented my code, particularly in hard-to-understand areas\r\n* [x] I have made corresponding changes to the documentation (e.g. README.md, requirements.txt)\r\n* [x] New and existing unit tests pass locally with my changes\r\n\r\n**How can your code be run and tested?**\r\n\r\n<!-- See the README.md for examples. Include test output. -->\r\n\r\n\r\n**Other information**\r\n<!-- Delete this subheading if no additional context is needed. -->\r\n",
                        "reviews": {
                            "edges": []
                        }
                    },
                    "textMatches": [
                        {
                            "property": "comments.body"
                        },
                        {
                            "property": "body"
                        }
                    ]
                },
                {
                    "node": {
                        "number": 328,
                        "title": "Add new weather API function to fetch additional open weather data",
                        "repository": {
                            "nameWithOwner": "camel-ai/camel",
                            "primaryLanguage": {
                                "name": "Python"
                            }
                        },
                        "createdAt": "2023-10-23T13:49:56Z",
                        "mergedAt": null,
                        "url": "https://github.com/camel-ai/camel/pull/328",
                        "state": "CLOSED",
                        "author": {
                            "login": "yiyiyi0817"
                        },
                        "editor": {
                            "login": "yiyiyi0817"
                        },
                        "body": "## Description\r\n\r\nThis PR introduces a new API function, and a set of test cases to validate its functionality.        This feature enhancement enhances the CAMEL project by providing access to current weather data based on geographical coordinates.\r\nThis update integrates features related to the OpenWeatherMap API, enabling new weather-related functionality.\r\n\r\nIn order to use these new features, an API key from OpenWeatherMap is required. Contributors and users who want to run this code will need to:\r\n\r\n1. Obtain an API key from OpenWeatherMap by signing up at https://openweathermap.org/api \uff08free API is enough to this function\uff09.\r\n2. Once you have the key, it should be stored securely in the environment variables as 'OPENWEATHER_API_KEY'. This is critical to ensure the security and privacy of your API key. Please do not hardcode the key into your codebase.\r\n\r\nPlease ensure the 'OPENWEATHER_API_KEY' is correctly configured in the environment before running the application. Incorrect handling of the API key may lead to errors or unexpected behavior.\r\n\r\nThank you for your attention to this requirement as we integrate these exciting new weather features.\r\n\r\n## Motivation and Context\r\n\r\n**Motivation:**\r\nWeather data is a valuable resource for a wide range of applications, from optimizing energy consumption to improving travel safety.     Users of the CAMEL project have expressed the need for a reliable and easy-to-use way to access current weather information based on geographical coordinates.     This addition of the `fetch_current_weather` API fulfills that need, providing real-time weather data to CAMEL users, enhancing their experience, and enabling new possibilities for data analysis.\r\n\r\n**Context:**\r\nPrior to this change, users had to rely on external services or implement custom solutions to obtain weather data.     The `fetch_current_weather` API simplifies this process, making it more accessible and integrated within the CAMEL framework.     This addition aligns with our project's goal of providing comprehensive and user-friendly AI capabilities.     It leverages the OpenWeatherMap API to retrieve accurate and up-to-date weather information, which complements the existing functionality of CAMEL.\r\n\r\n\r\nAn issue has been raised to propose this change (https://github.com/camel-ai/camel/issues/57)\r\n\r\n## Types of changes\r\n\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [x] New feature (non-breaking change which adds core functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n- [ ] Documentation (update in the documentation)\r\n- [ ] Example (update in the folder of example)\r\n\r\n## Implemented Tasks\r\n\r\n- [x] Current Weather\r\n- [ ] 3-hour Forecast 5 days\r\n- [ ] Basic weather maps\r\n- [ ] Air Pollution API\r\n- [ ] Geocoding API\r\n- [ ] A example of role playing with weather function\r\n\r\n## Checklist\r\n\r\n- [x] I have read the [CONTRIBUTION](https://github.com/camel-ai/camel/blob/master/CONTRIBUTING.md) guide.        (**required**)\r\n- [ ] My change requires a change to the documentation.\r\n- [x] I have updated the tests accordingly.        (*required for a bug fix or a new feature*)\r\n- [ ] I have updated the documentation accordingly.\r\n",
                        "reviews": {
                            "edges": [
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "You are doing well, keep trying!",
                                        "comments": {
                                            "edges": []
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "The current implementation looks very good! Thank you.\nA small improvement can be adding an exmaple to let a ChatAgent use this API. After finishing @lightaime 's request, could you consider adding this?",
                                        "comments": {
                                            "edges": []
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "textMatches": [
                        {
                            "property": "comments.body"
                        },
                        {
                            "property": "body"
                        }
                    ]
                },
                {
                    "node": {
                        "number": 301,
                        "title": "support neo4j to make query and write to a DB",
                        "repository": {
                            "nameWithOwner": "langroid/langroid",
                            "primaryLanguage": {
                                "name": "Python"
                            }
                        },
                        "createdAt": "2023-11-16T22:59:05Z",
                        "mergedAt": "2024-01-16T22:08:29Z",
                        "url": "https://github.com/langroid/langroid/pull/301",
                        "state": "MERGED",
                        "author": {
                            "login": "Mohannadcse"
                        },
                        "editor": null,
                        "body": "The current implementation is limited to read and write operations.\r\nDocker instance of neo4j is needed for the unittest. \r\n",
                        "reviews": {
                            "edges": [
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I guess this fetch is retrieving what was written in the above test? Dependency among tests is not great though.",
                                                        "author": {
                                                            "login": "pchalasani"
                                                        },
                                                        "url": "https://github.com/langroid/langroid/pull/301#discussion_r1396481543",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5d9ee4a",
                                                            "authoredDate": "2023-11-16T22:57:38Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "will you have a GH workflow in pytest.yml to run this service,  like we did for Meilisearch?",
                                                        "author": {
                                                            "login": "pchalasani"
                                                        },
                                                        "url": "https://github.com/langroid/langroid/pull/301#discussion_r1396481909",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5d9ee4a",
                                                            "authoredDate": "2023-11-16T22:57:38Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "yes, let me fix that",
                                                        "author": {
                                                            "login": "Mohannadcse"
                                                        },
                                                        "url": "https://github.com/langroid/langroid/pull/301#discussion_r1396597896",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5d9ee4a",
                                                            "authoredDate": "2023-11-16T22:57:38Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I need to check Meilisearch.",
                                                        "author": {
                                                            "login": "Mohannadcse"
                                                        },
                                                        "url": "https://github.com/langroid/langroid/pull/301#discussion_r1396603462",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5d9ee4a",
                                                            "authoredDate": "2023-11-16T22:57:38Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Yes, I'll do that, should I put the test_neo4j.py under the main folder? it's currently under extras.",
                                                        "author": {
                                                            "login": "Mohannadcse"
                                                        },
                                                        "url": "https://github.com/langroid/langroid/pull/301#discussion_r1398008038",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5d9ee4a",
                                                            "authoredDate": "2023-11-16T22:57:38Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Yes extras",
                                                        "author": {
                                                            "login": "pchalasani"
                                                        },
                                                        "url": "https://github.com/langroid/langroid/pull/301#discussion_r1398208275",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5d9ee4a",
                                                            "authoredDate": "2023-11-16T22:57:38Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "this needs to be an extra like litellm",
                                                        "author": {
                                                            "login": "pchalasani"
                                                        },
                                                        "url": "https://github.com/langroid/langroid/pull/301#discussion_r1399546196",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "efc6a58",
                                                            "authoredDate": "2023-11-20T15:51:51Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "since neo4j is an extra, the imports should be wrapped in try, except with a friendly warning. See how it's done for hf-embeddings or litellm extras.",
                                                        "author": {
                                                            "login": "pchalasani"
                                                        },
                                                        "url": "https://github.com/langroid/langroid/pull/301#discussion_r1399548082",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "efc6a58",
                                                            "authoredDate": "2023-11-20T15:51:51Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "CHANGES_REQUESTED",
                                        "bodyText": "added some comments related to neo4j being an extra.",
                                        "comments": {
                                            "edges": []
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "CHANGES_REQUESTED",
                                        "bodyText": "@Mohannadcse can you add a very simple example of using this, under examples/graph_db/\nMake it self-contained, super-simple, maybe using in-code data, hopefully without requiring docker.",
                                        "comments": {
                                            "edges": []
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "@pchalasani I already changed the password after realizing this, but not sure how to delete this from the commit. Where I already removed it in the next commit.",
                                                        "author": {
                                                            "login": "Mohannadcse"
                                                        },
                                                        "url": "https://github.com/langroid/langroid/pull/301#discussion_r1435214245",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "eb4b944",
                                                            "authoredDate": "2023-12-22T16:22:29Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "CHANGES_REQUESTED",
                                        "bodyText": "Starting to look at this. It will be very helpful to have a README under kg-chat, like I did here -- https://github.com/langroid/langroid-examples/tree/main/examples/docqa/streamlit-app\nFor example I don't know what to do to get this going, and the README.md should have self-contained instructions.",
                                        "comments": {
                                            "edges": []
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Please add a way to get these from .env file similar to how various openai etc settings are obtained. I think Neo4jChatAgentConfig is mixing too many things-- credentials and ChatAgent related things like sys msg etc. Instead there should be a separate Neo4jSettings derived from Pyandic BaseSettings, with env_prefix = \"NEO4J_\" so that the settings are automatically obtained from .env` file.",
                                                        "author": {
                                                            "login": "pchalasani"
                                                        },
                                                        "url": "https://github.com/langroid/langroid/pull/301#discussion_r1451824999",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "f3248e5",
                                                            "authoredDate": "2024-01-12T21:44:14Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "let's have it use fn api by default. When I ran it with no options it was using langroid tools.",
                                                        "author": {
                                                            "login": "pchalasani"
                                                        },
                                                        "url": "https://github.com/langroid/langroid/pull/301#discussion_r1451826982",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "f3248e5",
                                                            "authoredDate": "2024-01-12T21:44:14Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "any reason this had to be overridden? Seems like this essentially copies the code of ChatAgent.agent_response and makes a special NEO4J error output? We should find a way to avoid this code duplication, maybe some of the task orch/signal mechanisms",
                                                        "author": {
                                                            "login": "pchalasani"
                                                        },
                                                        "url": "https://github.com/langroid/langroid/pull/301#discussion_r1451829301",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "f3248e5",
                                                            "authoredDate": "2024-01-12T21:44:14Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "comment - change to GenerateCypherQueries",
                                                        "author": {
                                                            "login": "pchalasani"
                                                        },
                                                        "url": "https://github.com/langroid/langroid/pull/301#discussion_r1451829445",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "f3248e5",
                                                            "authoredDate": "2024-01-12T21:44:14Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "add comment on what this does.\nCould this be generated by the LLM? (Or actually it probably WAS generated by ChatGPT4, but could we have this be part of the process, so we don't need to hardcode this? or is it better to keep this here to keep it deterministic?)",
                                                        "author": {
                                                            "login": "pchalasani"
                                                        },
                                                        "url": "https://github.com/langroid/langroid/pull/301#discussion_r1451829840",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "f3248e5",
                                                            "authoredDate": "2024-01-12T21:44:14Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "It wasn't generated by ChatGPT4 and haven't tried it. I doubt ChatGPT can generate this because it's not aware of the intended schema (nodes labels and their relationships).\nSo hardcoding it is the safest way to make sure the graph database is constructed as intended.\nOn the other hand, constructing the graph database for CSV can be done using LLM is easier (working on it now) because all what you need to provide is the CSV header. Then LLM will infer the nodes, their labels, and relationships.",
                                                        "author": {
                                                            "login": "Mohannadcse"
                                                        },
                                                        "url": "https://github.com/langroid/langroid/pull/301#discussion_r1451832824",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "f3248e5",
                                                            "authoredDate": "2024-01-12T21:44:14Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I tried here to mimic the implementation of sql_chat_agent https://github.com/langroid/langroid/blob/main/langroid/agent/special/sql/sql_chat_agent.py#L197",
                                                        "author": {
                                                            "login": "Mohannadcse"
                                                        },
                                                        "url": "https://github.com/langroid/langroid/pull/301#discussion_r1451906253",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "f3248e5",
                                                            "authoredDate": "2024-01-12T21:44:14Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "The intention here was to follow the implementation of SQLChatAgentConfig \n  \n    \n      langroid/langroid/agent/special/sql/sql_chat_agent.py\n    \n    \n         Line 66\n      in\n      0e4fbad\n    \n  \n  \n    \n\n        \n          \n           system_message: str = DEFAULT_SQL_CHAT_SYSTEM_MESSAGE \n        \n    \n  \n\n.",
                                                        "author": {
                                                            "login": "Mohannadcse"
                                                        },
                                                        "url": "https://github.com/langroid/langroid/pull/301#discussion_r1452429844",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "f3248e5",
                                                            "authoredDate": "2024-01-12T21:44:14Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Maybe you can just add env_prefix  = \"NEO4J_\" to this config class.",
                                                        "author": {
                                                            "login": "pchalasani"
                                                        },
                                                        "url": "https://github.com/langroid/langroid/pull/301#discussion_r1452451584",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "f3248e5",
                                                            "authoredDate": "2024-01-12T21:44:14Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "any questions actually can be forwarded to this tool, like after obtaining the package and version in the dependency graph, you can search the web about if this version is vulnerable or not.",
                                                        "author": {
                                                            "login": "Mohannadcse"
                                                        },
                                                        "url": "https://github.com/langroid/langroid/pull/301#discussion_r1453748721",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "d0bdb80",
                                                            "authoredDate": "2024-01-16T17:16:29Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "you can search the web about if this version is vulnerable or not.\n\nok please update the readme to say that",
                                                        "author": {
                                                            "login": "pchalasani"
                                                        },
                                                        "url": "https://github.com/langroid/langroid/pull/301#discussion_r1453751047",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "d0bdb80",
                                                            "authoredDate": "2024-01-16T17:16:29Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "this paragraph needs to be updated since we decided to proceed with one agent-2 tools\nI can update once @pchalasani  confirms",
                                                        "author": {
                                                            "login": "Mohannadcse"
                                                        },
                                                        "url": "https://github.com/langroid/langroid/pull/301#discussion_r1453751167",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "d0bdb80",
                                                            "authoredDate": "2024-01-16T17:16:29Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "ok please make that change",
                                                        "author": {
                                                            "login": "pchalasani"
                                                        },
                                                        "url": "https://github.com/langroid/langroid/pull/301#discussion_r1453754634",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "d0bdb80",
                                                            "authoredDate": "2024-01-16T17:16:29Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "textMatches": [
                        {
                            "property": "comments.body"
                        }
                    ]
                },
                {
                    "node": {
                        "number": 25,
                        "title": "Inno: Add global tagging for all db metrics",
                        "repository": {
                            "nameWithOwner": "alteryx/locust-grasshopper",
                            "primaryLanguage": {
                                "name": "Python"
                            }
                        },
                        "createdAt": "2023-09-12T05:49:39Z",
                        "mergedAt": "2023-09-26T22:45:22Z",
                        "url": "https://github.com/alteryx/locust-grasshopper/pull/25",
                        "state": "MERGED",
                        "author": {
                            "login": "jmfiola"
                        },
                        "editor": null,
                        "body": "This MR adds the ability to add tags to all metrics that are reported to the influxDB. In the journey class, just use `self.update_tags(tags={})` and those new key-value pairs will be added to influxDB metrics. ",
                        "reviews": {
                            "edges": [
                                {
                                    "node": {
                                        "state": "APPROVED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "just out of curiosity, why change this? i assume there was some case that wasn't being handled, but I can't think of what it is.",
                                                        "author": {
                                                            "login": "alteryx-sezell"
                                                        },
                                                        "url": "https://github.com/alteryx/locust-grasshopper/pull/25#discussion_r1330813288",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "9d11941",
                                                            "authoredDate": "2023-09-13T22:08:45Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "I like the idea of delegating the exact point construction to the listener, but this seems to be a 'private method'. There isn't a public one for this, i take it? Maybe we should think about submitting a pr for that to the listener code?",
                                                        "author": {
                                                            "login": "alteryx-sezell"
                                                        },
                                                        "url": "https://github.com/alteryx/locust-grasshopper/pull/25#discussion_r1330902379",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "9d11941",
                                                            "authoredDate": "2023-09-13T22:08:45Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "this should probably be {\"tags\": cls.tags} to follow the pattern above and make it so that you don't change it on one line but not the other",
                                                        "author": {
                                                            "login": "alteryx-sezell"
                                                        },
                                                        "url": "https://github.com/alteryx/locust-grasshopper/pull/25#discussion_r1330905562",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "9d11941",
                                                            "authoredDate": "2023-09-13T22:08:45Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": ">>> a = \"GH_GGGGGGGGGGGGGGGA\"\n>>> b = a.lstrip(\"GH_\")\n>>> b\n'A'\n\nI didn't understand why so I asked chatgpt and it has a pretty good explanation:\nhttps://chat.openai.com/share/1eaad094-b93d-4284-90a3-c1425f2d607c",
                                                        "author": {
                                                            "login": "jmfiola"
                                                        },
                                                        "url": "https://github.com/alteryx/locust-grasshopper/pull/25#discussion_r1331839245",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "9d11941",
                                                            "authoredDate": "2023-09-13T22:08:45Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "yeah that's a good idea. This should just be public IMO.",
                                                        "author": {
                                                            "login": "jmfiola"
                                                        },
                                                        "url": "https://github.com/alteryx/locust-grasshopper/pull/25#discussion_r1331844583",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "9d11941",
                                                            "authoredDate": "2023-09-13T22:08:45Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "changed",
                                                        "author": {
                                                            "login": "jmfiola"
                                                        },
                                                        "url": "https://github.com/alteryx/locust-grasshopper/pull/25#discussion_r1331862143",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "9d11941",
                                                            "authoredDate": "2023-09-13T22:08:45Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "textMatches": [
                        {
                            "property": "comments.body"
                        }
                    ]
                }
            ],
            "pageInfo": {
                "endCursor": "Y3Vyc29yOjkw",
                "hasNextPage": true,
                "hasPreviousPage": true,
                "startCursor": "Y3Vyc29yOjgx"
            },
            "issueCount": 197
        }
    }
}