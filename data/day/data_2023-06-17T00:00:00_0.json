{
    "data": {
        "search": {
            "edges": [
                {
                    "node": {
                        "number": 35,
                        "title": "DAYD-826 add & create \u4e88\u5b9a\u3084TODO\u306e\u524a\u9664\u6642\u306b\u78ba\u8a8d\u30e2\u30fc\u30c0\u30eb\u3092\u8868\u793a\u3059\u308b\u3088\u3046\u4fee\u6b63&\u30ab\u30b9\u30bf\u30e0Hooks\u7528\u306e\u30d5\u30a9\u30eb\u30c0\u3092\u4f5c\u6210\u3057\u2026",
                        "repository": {
                            "nameWithOwner": "daydule/frontend",
                            "primaryLanguage": {
                                "name": "TypeScript"
                            }
                        },
                        "createdAt": "2023-06-17T13:13:44Z",
                        "mergedAt": "2023-06-24T00:26:03Z",
                        "url": "https://github.com/daydule/frontend/pull/35",
                        "state": "MERGED",
                        "author": {
                            "login": "atoook"
                        },
                        "editor": {
                            "login": "atoook"
                        },
                        "body": "\u2026\u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\r\n\r\n# \u4e8b\u524d\u78ba\u8a8d\r\n\r\n- [x] PR \u524d\u306b\u52d5\u4f5c\u78ba\u8a8d\u3092\u3057\u305f\u304b\r\n- [x] \u30d3\u30eb\u30c9\u30a8\u30e9\u30fc/ESLint \u30a8\u30e9\u30fc\u306f\u8d77\u304d\u3066\u3044\u306a\u3044\u304b\r\n- [x] [\u958b\u767a\u30eb\u30fc\u30eb](https://daydule.atlassian.net/wiki/spaces/DAYDULE/pages/9765029)\u3092\u5b88\u3063\u3066\u5b9f\u88c5\u3057\u3066\u3044\u308b\u304b\r\n- [x] \u6a5f\u5bc6\u60c5\u5831\u3092\u542b\u3093\u3067\u3044\u306a\u3044\u304b\r\n- [x] \u6700\u65b0\u306e`develop`\u30d6\u30e9\u30f3\u30c1\u3092\u53cd\u6620\u3057\u3066\u3044\u308b\u304b\r\n\r\n# \u3084\u3063\u305f\u3053\u3068<!-- \u3053\u306e\u30d7\u30eb\u30ea\u30af\u30a8\u30b9\u30c8\u3067\u3084\u3063\u305f\u3053\u3068\u3092\u66f8\u304f -->\r\n\u4e88\u5b9a\u3084TODO\u306e\u524a\u9664\u6642\u306b\u78ba\u8a8d\u30e2\u30fc\u30c0\u30eb\u3092\u8868\u793a\u3059\u308b\u305f\u3081\u4ee5\u4e0b\u306e\u5bfe\u5fdc\u3092\u884c\u3063\u305f\u3002\r\n- \u524a\u9664\u78ba\u8a8d\u30e2\u30fc\u30c0\u30eb\u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8(DeleteConfirmModalComponent)\u4f5c\u6210\r\n- \u30ab\u30b9\u30bf\u30e0Hooks\u7528\u306e\u30d5\u30a9\u30eb\u30c0\uff08hooks\uff09\u3092\u4f5c\u6210\r\n- \u30e2\u30fc\u30c0\u30eb\u306e\u72b6\u614b\u3068\u8868\u793a\u5207\u308a\u66ff\u3048\u3092\u884c\u3046\u30ab\u30b9\u30bf\u30e0Hooks(useDeleteConfirmModalComponent)\u3092\u4f5c\u6210\r\n- \u4e0a\u8a18\u30ab\u30b9\u30bf\u30e0Hooks\u3092\u524a\u9664\u30dc\u30bf\u30f3\u62bc\u4e0b\u6642\u306b\u547c\u3073\u51fa\u3059\u3088\u3046\u4fee\u6b63\r\n\r\n# \u3084\u3089\u306a\u3044\u3053\u3068<!-- \u3053\u306e\u30d7\u30eb\u30ea\u30af\u30a8\u30b9\u30c8\u3067\u3084\u3063\u3066\u3082\u304a\u304b\u3057\u304f\u306a\u3044\u3051\u3069\u3084\u3089\u306a\u304b\u3063\u305f\u3053\u3068\u3092\u66f8\u304f -->\r\n\u30e2\u30fc\u30c0\u30eb\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\u7ba1\u7406\u306bRTK\u3092\u6d3b\u7528\u3059\u308b\u3053\u3068\u3002\r\n\u4ee5\u4e0b\u7406\u7531\u304b\u3089\u3001\u6d3b\u7528\u306e\u30e1\u30ea\u30c3\u30c8\u304c\u3042\u307e\u308a\u306a\u3044\u3068\u5224\u65ad\u3057\u5bfe\u5fdc\u3057\u306a\u304b\u3063\u305f\u3002\r\n- \u30b9\u30c6\u30fc\u30bf\u30b9\u306f\u5404\u30e2\u30fc\u30c0\u30eb\u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u5185\u3067\u7ba1\u7406\u3059\u308c\u3070\u3088\u304f\u3001\u4ed6\u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u304b\u3089\u53c2\u7167\u3059\u308b\u5fc5\u8981\u304c\u306a\u3044\u305f\u3081\r\n- \u65e2\u5b58\u30b3\u30fc\u30c9\u306b\u304a\u3051\u308b\u5024(showsModal)\u306e\u53d7\u3051\u6e21\u3057\u306e\u968e\u5c64\u3082\u305d\u3053\u307e\u3067\u6df1\u304f\u306a\u3044\u305f\u3081\r\n- \u30ab\u30b9\u30bf\u30e0Hooks\u306e\u6d3b\u7528\u3067\u3001\u3042\u308b\u7a0b\u5ea6\u30b3\u30fc\u30c9\u306e\u898b\u901a\u3057\u304c\u826f\u304f\u306a\u308b\u305f\u3081\r\n\r\n# \u61f8\u5ff5\u70b9\u3084\u6ce8\u610f\u70b9<!-- \u3053\u306e\u30d7\u30eb\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u304a\u3051\u308b\u61f8\u5ff5\u70b9\u3084\u6ce8\u610f\u70b9\u3092\u66f8\u304f -->\r\n\r\n# \u305d\u306e\u4ed6<!-- \u3053\u306e\u30d7\u30eb\u30ea\u30af\u30a8\u30b9\u30c8\u3067\u4e0a\u8a18\u306e\u9805\u76ee\u4ee5\u5916\u306b\u4f1d\u3048\u308b\u3079\u304d\u3053\u3068\u3092\u66f8\u304f -->\r\n[\u958b\u767aTips](https://daydule.atlassian.net/l/cp/2wW84hrb)\u306b\u958b\u767a\u6642\u306b\u53c2\u7167\u3057\u305fURL\u3092\u8a18\u8f09\u3057\u3066\u3044\u308b\u3002",
                        "comments": {
                            "nodes": []
                        },
                        "reviews": {
                            "edges": [
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "@atoook\n1\u4ef6\u3060\u3051\u30b3\u30e1\u30f3\u30c8\u3057\u307e\u3057\u305f\u3002\n\u52d5\u4f5c\u306f\u554f\u984c\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "\u7b2c\u4e8c\u5f15\u6570\u306e\u914d\u5217\u304c\u7a7a\u3067\u3042\u308b\u3053\u3068\u306f\u975e\u63a8\u5968\u3068\u3044\u3046\u8a18\u4e8b\u3092\u898b\u304b\u3051\u305f\u306e\u3067\u3059\u304c\u3001\u7279\u306b\u554f\u984c\u306a\u3055\u305d\u3046\u3067\u3057\u3087\u3046\u304b\uff1f",
                                                        "author": {
                                                            "login": "Mellbrother"
                                                        },
                                                        "url": "https://github.com/daydule/frontend/pull/35#discussion_r1233961387",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "79ade58",
                                                            "authoredDate": "2023-06-17T12:55:25Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "\u30b3\u30e1\u30f3\u30c8\u8ffd\u8a18\u3057\u3066\u307e\u3059\u306e\u3067\u3001\u78ba\u8a8d\u304a\u9858\u3044\u3057\u307e\u3059\uff01",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "hooks\u30d5\u30a9\u30eb\u30c0\u5185\u306b\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3059\u308b\u51e6\u7406\u306f\u8a18\u8f09\u305b\u305a\u3001\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u914d\u4e0b\u306b\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u305f\u65b9\u304c\u826f\u3044\u304b\u3068\u601d\u3046\u306e\u3067\u3059\u304c\u3001\u3044\u304b\u304c\u3067\u3057\u3087\u3046\u304b\uff1f\n\u30ab\u30b9\u30bf\u30e0\u30d5\u30c3\u30af\u7528\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u306f\u3042\u304f\u307e\u3067\u30ed\u30b8\u30c3\u30af\u306e\u307f\u3092\u8a18\u8f09\u3057\u3001\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u306b\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3059\u308b\u51e6\u7406\u3092\u307e\u3068\u3081\u305f\u65b9\u304c\u826f\u3044\u304b\u3068\u601d\u3044\u307e\u3057\u305f\uff01",
                                                        "author": {
                                                            "login": "kzk27"
                                                        },
                                                        "url": "https://github.com/daydule/frontend/pull/35#discussion_r1236769297",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "c477407",
                                                            "authoredDate": "2023-06-21T10:14:25Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "ChatGPT\u306b\u805e\u3044\u3066\u307f\u305f\u3051\u3069\u4eca\u56de\u306f\u5927\u4e08\u592b\u305d\u3046\u306b\u898b\u3048\u308b\nhttps://chat.openai.com/share/2ffb9eb5-b4fb-4b02-be49-57da96fc885f",
                                                        "author": {
                                                            "login": "tom-takeru"
                                                        },
                                                        "url": "https://github.com/daydule/frontend/pull/35#discussion_r1236770242",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "79ade58",
                                                            "authoredDate": "2023-06-17T12:55:25Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "APPROVED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": []
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "APPROVED",
                                        "bodyText": "LGTM!",
                                        "comments": {
                                            "edges": []
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "textMatches": [
                        {
                            "property": "comments.body"
                        }
                    ]
                },
                {
                    "node": {
                        "number": 119,
                        "title": "refactor: ownership redesign",
                        "repository": {
                            "nameWithOwner": "PaulRBerg/prb-proxy",
                            "primaryLanguage": {
                                "name": "Solidity"
                            }
                        },
                        "createdAt": "2023-06-17T18:41:44Z",
                        "mergedAt": "2023-06-28T18:50:01Z",
                        "url": "https://github.com/PaulRBerg/prb-proxy/pull/119",
                        "state": "MERGED",
                        "author": {
                            "login": "PaulRBerg"
                        },
                        "editor": {
                            "login": "PaulRBerg"
                        },
                        "body": "Closes #108, addressing all of the audit report findings mentioned there.",
                        "comments": {
                            "nodes": [
                                {
                                    "createdAt": "2023-06-18T09:58:12Z",
                                    "bodyText": "Thanks for the review. I agree that the new design is clearer - and safer.\nInteresting idea to pass ConstructorParams to _deploy, but I suggest we don't do it because it would increase the gas cost by a non-trivial amount (not just \"slightly\"). ABI-encoding and decoding structs is an expensive operation. And gas costs are very important for deployments (on Ethereum Mainnet), so I would prefer to save any little that we can.\nBoth functions are well-tested, so we have a pretty good idea that they work as expected.",
                                    "url": "https://github.com/PaulRBerg/prb-proxy/pull/119#issuecomment-1596078889",
                                    "author": {
                                        "login": "PaulRBerg"
                                    }
                                },
                                {
                                    "createdAt": "2023-06-21T13:11:38Z",
                                    "bodyText": "Just noticed\n\n  \n    \n      prb-proxy/src/PRBProxyRegistry.sol\n    \n    \n        Lines 132 to 134\n      in\n      17f65af\n    \n  \n  \n    \n\n        \n          \n           constructorParams.owner = owner; \n        \n\n        \n          \n           proxy = new PRBProxy{ salt: salt }(); \n        \n\n        \n          \n           delete constructorParams; \n        \n    \n  \n\n\nGiven that the only variable used here is the owner, this can be optimized to:\n        constructorParams.owner = owner;\n        proxy = new PRBProxy{ salt: salt }();\n        constructorParams.owner = address(0);",
                                    "url": "https://github.com/PaulRBerg/prb-proxy/pull/119#issuecomment-1600809822",
                                    "author": {
                                        "login": "andreivladbrg"
                                    }
                                },
                                {
                                    "createdAt": "2023-06-22T10:24:02Z",
                                    "bodyText": "Interesting optimization idea @andreivladbrg but the two implementations cost the same gas when only the owner is set. See my conversation with ChatGPT:\nhttps://chat.openai.com/share/3187fa95-2732-4fe8-95c0-539e259fc835\nAlso, assigning only the owner to zero is less secure than deleting the entire struct because of the possibility of reentrancy.",
                                    "url": "https://github.com/PaulRBerg/prb-proxy/pull/119#issuecomment-1602393129",
                                    "author": {
                                        "login": "PaulRBerg"
                                    }
                                },
                                {
                                    "createdAt": "2023-06-22T18:28:39Z",
                                    "bodyText": "All constructor params should be set here (target and data to 0), not just the owner\n\n  \n    \n      prb-proxy/src/PRBProxyRegistry.sol\n    \n    \n         Line 132\n      in\n      17f65af\n    \n  \n  \n    \n\n        \n          \n           constructorParams.owner = owner; \n        \n    \n  \n\n\ndeployAndExecute can reenter in deployFor (via a target contract) which would only change the constructorParams.owner leaving target and data intact. The PRBProxy constructor would then get the constructor params from the registry including the old target and data and execute it on the second proxy (this time doing something else like setting token approvals).",
                                    "url": "https://github.com/PaulRBerg/prb-proxy/pull/119#issuecomment-1603129232",
                                    "author": {
                                        "login": "tibbarytsur"
                                    }
                                },
                                {
                                    "createdAt": "2023-06-22T19:44:40Z",
                                    "bodyText": "See my conversation with ChatGPT\n\nI don't think that using GPT for this specific use case is the best choice, tested this in remix and it was actually a difference by few thousands.\n\nthe possibility of reentrancy.\n\nRight, it is safer to use delete.",
                                    "url": "https://github.com/PaulRBerg/prb-proxy/pull/119#issuecomment-1603219814",
                                    "author": {
                                        "login": "andreivladbrg"
                                    }
                                },
                                {
                                    "createdAt": "2023-06-22T21:24:59Z",
                                    "bodyText": "Thanks for your review, both!\n\nnoProxy(owner) modifier would pass otherwise when calling deployFor on the registry with the same owner creating 2 proxies with the same owner set in the proxy itself\n...\ndeployAndExecute can reenter in deployFor (via a target contract) which would only change the constructorParams.owner leaving target and data intact.\n\nAs discussed on Discord, this cannot happen under the current design - happy to take a call tomorrow to walk through the low-level steps.\n\nAll constructor params should be set here (target and data to 0), not just the owner\n\nAgree with this proposal - it would be a good precautionary step even if the attack above cannot happen.\n\nI don't think that using GPT for this specific use case is the best choice, tested this in remix and it was actually a difference by few thousands.\n\nYou may be right about ChatGPT (the 2021 cut-off), but did you use via IR and the same number of optimizer runs in your test?\n\nRight, it is safer to use delete.\n\nYep",
                                    "url": "https://github.com/PaulRBerg/prb-proxy/pull/119#issuecomment-1603336828",
                                    "author": {
                                        "login": "PaulRBerg"
                                    }
                                },
                                {
                                    "createdAt": "2023-06-22T21:40:38Z",
                                    "bodyText": "but did you use ethereum/remix-project#2350 (comment) and the same number of optimizer runs in your test\n\nYes",
                                    "url": "https://github.com/PaulRBerg/prb-proxy/pull/119#issuecomment-1603351133",
                                    "author": {
                                        "login": "andreivladbrg"
                                    }
                                },
                                {
                                    "createdAt": "2023-06-24T08:58:23Z",
                                    "bodyText": "@tibbarytsur and @andreivladbrg have reviewed this PR, but I will also wait for Zach's confirmation before merging this in.",
                                    "url": "https://github.com/PaulRBerg/prb-proxy/pull/119#issuecomment-1605314728",
                                    "author": {
                                        "login": "PaulRBerg"
                                    }
                                }
                            ]
                        },
                        "reviews": {
                            "edges": [
                                {
                                    "node": {
                                        "state": "APPROVED",
                                        "bodyText": "I can say that the design is cleaner now.\nNot sure if it's a good idea(it would slightly increase the gas) but what do you think about changing the internal _deploy function to: function _deploy(ConstructorParams calldata params). This way you will be able to remove duplicated code from _deploy and deployAndExecute.",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Aren't the braces used when {contract.foo}?",
                                                        "author": {
                                                            "login": "andreivladbrg"
                                                        },
                                                        "url": "https://github.com/PaulRBerg/prb-proxy/pull/119#discussion_r1233238160",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "9750486",
                                                            "authoredDate": "2023-06-17T11:46:24Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Good catch - I will change this to:\n`execute`",
                                                        "author": {
                                                            "login": "PaulRBerg"
                                                        },
                                                        "url": "https://github.com/PaulRBerg/prb-proxy/pull/119#discussion_r1233241481",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "9750486",
                                                            "authoredDate": "2023-06-17T11:46:24Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "Set the proxies[owner] to a temp value before creating the proxy to avoid reentrancy for the same owner\n\n  \n    \n      prb-proxy/src/PRBProxyRegistry.sol\n    \n    \n        Lines 95 to 99\n      in\n      17f65af\n    \n  \n  \n    \n\n        \n          \n           proxy = new PRBProxy{ salt: salt }(); \n        \n\n        \n          \n           delete constructorParams; \n        \n\n        \n          \n            \n        \n\n        \n          \n           // Associate the the owner with the proxy in the mapping. \n        \n\n        \n          \n           proxies[owner] = proxy; \n        \n    \n  \n\n\nnoProxy(owner) modifier would pass otherwise when calling deployFor on the registry with the same  owner creating 2 proxies with the same owner set in the proxy itself, and the first one set in the registry.",
                                        "comments": {
                                            "edges": []
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "textMatches": [
                        {
                            "property": "comments.body"
                        }
                    ]
                }
            ],
            "pageInfo": {
                "endCursor": "Y3Vyc29yOjI=",
                "hasNextPage": false,
                "hasPreviousPage": false,
                "startCursor": "Y3Vyc29yOjE="
            },
            "issueCount": 2
        }
    }
}