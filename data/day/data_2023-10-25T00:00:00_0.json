{
    "data": {
        "search": {
            "edges": [
                {
                    "node": {
                        "number": 1621,
                        "title": "[project-s] \u62cd\u5b50\u5468\u308a\u306e\u4fee\u6b63\u3068\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0",
                        "repository": {
                            "nameWithOwner": "VOICEVOX/voicevox",
                            "primaryLanguage": {
                                "name": "TypeScript"
                            }
                        },
                        "createdAt": "2023-10-25T14:10:50Z",
                        "mergedAt": "2023-10-25T17:57:35Z",
                        "url": "https://github.com/VOICEVOX/voicevox/pull/1621",
                        "state": "MERGED",
                        "author": {
                            "login": "sigprogramming"
                        },
                        "editor": null,
                        "body": "## \u5185\u5bb9\r\n\u4ee5\u4e0b\u3092\u884c\u3044\u307e\u3059\u3002\r\n- \u62cd\u5b50\u306e\u4f4d\u7f6e\u3092Tick\u3067\u306f\u306a\u304f\u5c0f\u7bc0\u756a\u53f7\u3067\u4fdd\u6301\u3059\u308b\u3088\u3046\u306b\u3059\u308b\r\n- \u66f2\u4e2d\u306e\u30c6\u30f3\u30dd\u30fb\u62cd\u5b50\u3082\u8003\u616e\u3057\u3066\u5c0f\u7bc0\u306e\u6570\u3092\u7b97\u51fa\u3059\u308b\u3088\u3046\u306b\u3059\u308b\r\n- \u62cd\u5b50\u306e\u5206\u6bcd\u304c16\u4ee5\u4e0b\u306e2\u306e\u500d\u6570\u306b\u306a\u308b\u3088\u3046\u306b\u3059\u308b\r\n- \u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306e\u8ffd\u52a0\r\n- \u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\r\n## \u95a2\u9023 Issue\r\nVOICEVOX/voicevox_project#15\r\n## \u305d\u306e\u4ed6",
                        "comments": {
                            "nodes": []
                        },
                        "reviews": {
                            "edges": [
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "watch\u304c\u52d5\u3044\u3066\u3044\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u3072\u3068\u307e\u305aSET_SCORE\u3092\u547c\u3093\u3067\u521d\u671f\u5316\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u2026\uff01",
                                                        "author": {
                                                            "login": "sigprogramming"
                                                        },
                                                        "url": "https://github.com/VOICEVOX/voicevox/pull/1621#discussion_r1371864303",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "b1fe681",
                                                            "authoredDate": "2023-10-24T14:29:04Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "APPROVED",
                                        "bodyText": "LGTM\uff01\uff01\uff01\nscore\u3001\u3059\u3067\u306bundefinedable\u3058\u3083\u306a\u304f\u305b\u305d\u3046\u306a\u6c17\u304c\u3057\u305f\u306e\u3067\u3061\u3087\u3063\u3068\u8a66\u3057\u3066\u307f\u307e\u3059\u3002",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "\uff08\u3082\u3057\u3054\u8208\u5473\u3042\u308c\u3070\u304f\u3089\u3044\u306e\u30b3\u30e1\u30f3\u30c8\u306a\u306e\u3067\u3059\u304c\uff09\n\u30d6\u30e9\u30f3\u30c9\u578b\u3092\u4f7f\u3048\u3070\u3001tick\u7b49\u306enumber\u3092\u578b\u3067\u533a\u5225\u53ef\u80fd\u306b\u3067\u304d\u305f\u308a\u3057\u307e\u3059\uff01\n\u3068\u3044\u3063\u3066\u3082\u5168\u90e8number\u3067\u306f\u3042\u308b\u306e\u3067\u3001\u95a2\u6570\u306b\u9593\u9055\u3048\u3066\u6e21\u3057\u305f\u308a\u3067\u304d\u306a\u304f\u306a\u308b\u7a0b\u5ea6\u306e\u30e1\u30ea\u30c3\u30c8\u3057\u304b\u7121\u3044\u304b\u3082\u3067\u3059\u304c\uff65\uff65\uff65\u3002\n\u4f8b\u3048\u3070\u2193\u304czod\u4f7f\u3063\u3066\u79d2\u30fb\u30df\u30ea\u79d2\u30fb\u30ca\u30ce\u79d2\u3092\u305d\u308c\u305e\u308c\u30d6\u30e9\u30f3\u30c9\u578b\u4f5c\u308b\u65b9\u6cd5\u3067\u3059\u3002\nhttps://chat.openai.com/share/85e06c91-586d-4872-835e-1ef91a69e56f\n\u3061\u306a\u307f\u306bEngineId\u3084SpeakerId\u306a\u3069\u306f\u578b\u30b5\u30dd\u30fc\u30c8\u3092\u53d7\u3051\u3089\u308c\u308b\u3088\u3046\u306b\u30d6\u30e9\u30f3\u30c9\u578b\u306b\u306a\u3063\u3066\u305f\u308a\u3057\u307e\u3059\u3002\n\n  \n    \n      voicevox/src/type/preload.ts\n    \n    \n         Line 30\n      in\n      aaf0576\n    \n  \n  \n    \n\n        \n          \n           export const engineIdSchema = z.string().brand<\"EngineId\">();",
                                                        "author": {
                                                            "login": "Hiroshiba"
                                                        },
                                                        "url": "https://github.com/VOICEVOX/voicevox/pull/1621#discussion_r1372111626",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "b1fe681",
                                                            "authoredDate": "2023-10-24T14:29:04Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "\u610f\u5916\u3068\u3053\u308c\u3067\u3082\u826f\u304b\u3063\u305f\u308a\uff01\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n              maxTicks = Math.max(maxTicks, lastTsPosition);\n          \n          \n            \n              maxTicks = Math.max(maxTicks, lastTempoPosition);\n          \n          \n            \n              maxTicks = Math.max(maxTicks, lastTsPosition, lastTempoPosition);",
                                                        "author": {
                                                            "login": "Hiroshiba"
                                                        },
                                                        "url": "https://github.com/VOICEVOX/voicevox/pull/1621#discussion_r1372113953",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "b1fe681",
                                                            "authoredDate": "2023-10-24T14:29:04Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "textMatches": [
                        {
                            "property": "comments.body"
                        }
                    ]
                },
                {
                    "node": {
                        "number": 604,
                        "title": "`Provider.checkToken` will no longer treat empty `refreshToken` strings as invalid tokens and fixed use of `__proto__` as `identityId` in `IdentitiesManager`",
                        "repository": {
                            "nameWithOwner": "MatrixAI/Polykey",
                            "primaryLanguage": {
                                "name": "TypeScript"
                            }
                        },
                        "createdAt": "2023-10-25T00:54:56Z",
                        "mergedAt": "2023-10-26T01:11:50Z",
                        "url": "https://github.com/MatrixAI/Polykey/pull/604",
                        "state": "MERGED",
                        "author": {
                            "login": "amydevs"
                        },
                        "editor": {
                            "login": "amydevs"
                        },
                        "body": "### Description\r\n\r\n\r\n#### Provider\r\n\r\nThe `handleClaimIdentity` test in `tests/identities/IdentitiesManager.test.ts` was failing on `handleClaimIdentity`. This was because it was treating refreshTokens of empty strings as invalid tokens. This is no longer the case.\r\n\r\n\r\n```\r\nFAIL  tests/identities/IdentitiesManager.test.ts\r\n  IdentitiesManager\r\n    \u2713 IdentitiesManager readiness (85 ms)\r\n    \u2713 get, set and unset tokens (with seed=-201149676) (395 ms)\r\n    \u2713 start and stop preserves state (with seed=-201149676) (234 ms)\r\n    \u2713 fresh start deletes all state (with seed=-201149676) (255 ms)\r\n    \u2713 register and unregister providers (39 ms)\r\n    \u2713 using TestProvider (with seed=-201149676) (1553 ms)\r\n    \u2715 handleClaimIdentity (with seed=1486144507) (939 ms)\r\n\r\n  \u25cf IdentitiesManager \u203a handleClaimIdentity (with seed=1486144507)\r\n\r\n    Property failed after 1 tests\r\n    { seed: 1486144507, path: \"0:0:0:0:0:0:0:0:0:0:0:0:0:3:0:1:1:0:3:0:0:0:1:1:0:1:3:2:0:1\", endOnFailure: true }\r\n    Counterexample: [\"\",{\"accessToken\":\"          \",\"refreshToken\":\"\",\"accessTokenExpiresIn\":1698190047,\"refreshTokenExpiresIn\":0}]\r\n    Shrunk 29 time(s)\r\n    Got ErrorProviderUnimplemented:\r\n\r\n      64 |\r\n      65 |   public async refreshToken(): Promise<ProviderToken> {\r\n    > 66 |     throw new identitiesErrors.ErrorProviderUnimplemented();\r\n         |           ^\r\n      67 |   }\r\n      68 |\r\n      69 |   public async getAuthIdentityIds(): Promise<Array<IdentityId>> {\r\n\r\n      at TestProvider.refreshToken (tests/identities/TestProvider.ts:66:11)\r\n      at TestProvider.refreshToken [as checkToken] (src/identities/Provider.ts:85:25)\r\n      at TestProvider.checkToken [as publishClaim] (tests/identities/TestProvider.ts:152:16)\r\n      at src/identities/IdentitiesManager.ts:272:39\r\n      at constructor_.addClaim (src/sigchain/Sigchain.ts:449:20)\r\n      at withF (node_modules/@matrixai/resources/src/utils.ts:24:12)\r\n      at constructor_.handleClaimIdentity (src/identities/IdentitiesManager.ts:261:5)\r\n      at numRuns (tests/identities/IdentitiesManager.test.ts:361:7)\r\n      at AsyncProperty.run (node_modules/fast-check/lib/check/property/AsyncProperty.generic.js:49:28)\r\n      Hint: Enable verbose mode in order to have the list of all failing values encountered during the run\r\n      at buildError (node_modules/fast-check/lib/check/runner/utils/RunDetailsFormatter.js:131:15)\r\n      at asyncThrowIfFailed (node_modules/fast-check/lib/check/runner/utils/RunDetailsFormatter.js:148:11)\r\n\r\nTest Suites: 1 failed, 1 total\r\nTests:       1 failed, 6 passed, 7 total\r\nSnapshots:   0 total\r\nTime:        4.02 s\r\nRan all test suites matching /.\\/tests\\/identities\\/IdentitiesManager.test.ts/i.\r\nGLOBAL TEARDOWN\r\nDestroying Global Data Dir: /tmp/polykey-test-global-weOx7R\r\n```\r\n\r\nIt is also defined now that any expiry values in AccessToken set to 0, now have their related tokens treated as never-expiring. This was already the case before this PR, but inline comments have been added to document this.\r\n\r\n```ts\r\npublic async checkToken(\r\n    providerToken: ProviderToken,\r\n    identityId?: IdentityId,\r\n  ): Promise<ProviderToken> {\r\n    const now = Math.floor(Date.now() / 1000);\r\n    // this will mean that accessTokenExpiresIn = 0 will be false\r\n    if (\r\n      providerToken.accessTokenExpiresIn &&\r\n      providerToken.accessTokenExpiresIn >= now\r\n    ) {\r\n      if (providerToken.refreshToken == null) {\r\n        throw new identitiesErrors.ErrorProviderUnauthenticated(\r\n          'Access token expired',\r\n        );\r\n      }\r\n      // this will mean that refreshTokenExpiresIn = 0 does not throw\r\n      if (\r\n        providerToken.refreshTokenExpiresIn &&\r\n        providerToken.refreshTokenExpiresIn >= now\r\n      ) {\r\n        throw new identitiesErrors.ErrorProviderUnauthenticated(\r\n          'Refresh token expired',\r\n        );\r\n      }\r\n      return await this.refreshToken(providerToken, identityId);\r\n    }\r\n    return providerToken;\r\n  }\r\n```\r\n\r\n#### Prototype Pollution\r\n\r\nDuring testing, I noticed two other tests in `IdentitiesManager.test.ts` failing. This was because of fastcheck sometimes generating a string value of `__proto__` for the `identityId`. The `identityId` is used as the key for the object that comes out of RocksDB, there is a problem with prototype pollution. This is not only a security issue, but also that `JSON.stringify` does not serialize the `__proto__` property of an object, so certain the provider keys for that identity will never work. This PR uses `Object.defineProperty`to correctly set the `__proto__` property on the `providerTokens` object.\r\n\r\n### Issues Related\r\n* https://github.com/MatrixAI/Polykey-CLI/issues/40#issuecomment-1778016364\r\n* Fixes #608 \r\n\r\n### Tasks\r\n<!-- \r\n  List all tasks to be done by this PR.\r\n  If a task is no longer required, add a strikethrough (including the checkbox):\r\n  - ~~[ ] 3. ...~~ - being completed in #...\r\n-->\r\n- [x] 1. Fix conditional check of valid `refreshToken`\r\n- [x] 2. Inline documentation\r\n- [x] 3. Define implementation for `TestProvider.refreshToken`\r\n- [x] 4. Add errors to throw when prototype pollution of `identityId` is attempted\r\n\r\n### Final checklist\r\n<!-- Please check what applies. Note that these are not hard requirements but merely serve as information for reviewers. -->\r\n\r\n* [x] Domain specific tests\r\n* [x] Full tests\r\n* [x] Updated inline-comment documentation\r\n* [x] Lint fixed\r\n* [x] Squash and rebased\r\n* [x] Sanity check the final build\r\n",
                        "comments": {
                            "nodes": [
                                {
                                    "createdAt": "2023-10-25T00:56:07Z",
                                    "bodyText": "\ud83d\udc47 Click on the image for a new way to code review\n\n\n\nLegend",
                                    "url": "https://github.com/MatrixAI/Polykey/pull/604#issuecomment-1778302154",
                                    "author": null
                                },
                                {
                                    "createdAt": "2023-10-25T04:35:30Z",
                                    "bodyText": "If this works, proceed to squash down, no need to keep unnecessary lintfix commits around, and merge in. Are you waiting for something here?",
                                    "url": "https://github.com/MatrixAI/Polykey/pull/604#issuecomment-1778498712",
                                    "author": {
                                        "login": "CMCDragonkai"
                                    }
                                },
                                {
                                    "createdAt": "2023-10-25T15:55:51Z",
                                    "bodyText": "https://chat.openai.com/share/caaac780-4de6-4b1a-ab6a-68cd4ed58cd8\nThis explains that explicitly set __proto__ would be accepted as a property. So why is it a problem?",
                                    "url": "https://github.com/MatrixAI/Polykey/pull/604#issuecomment-1779588304",
                                    "author": {
                                        "login": "CMCDragonkai"
                                    }
                                },
                                {
                                    "createdAt": "2023-10-25T20:38:17Z",
                                    "bodyText": "In #608 I've explained how you can support __proto__ as a proper key instead of special casing it. Who knows, somebody might really have a username being __proto__ just to screw with people. This is the modern XKCD:",
                                    "url": "https://github.com/MatrixAI/Polykey/pull/604#issuecomment-1780017940",
                                    "author": {
                                        "login": "CMCDragonkai"
                                    }
                                },
                                {
                                    "createdAt": "2023-10-25T20:40:35Z",
                                    "bodyText": "To summarise for safety reasons, if the key is coming from an untrusted source, or a randomised source where you don't know what it could be, there's 2 safe ways of doing this:\n\no = {[untrustedString]: 123 }\nObject.defineProperty(o, untrustedString, { value: 123, writable: true, enumerable: true, configurable: true }\n\nIt is not safe to do o[untrustedString] = 123 although o[untrustedString] can be used to look up the property once it is defined. And of course a literal o = { __proto__: 123 } also does not work!!",
                                    "url": "https://github.com/MatrixAI/Polykey/pull/604#issuecomment-1780020846",
                                    "author": {
                                        "login": "CMCDragonkai"
                                    }
                                },
                                {
                                    "createdAt": "2023-10-25T20:41:32Z",
                                    "bodyText": "Can you fix it that way, and add an inline comment describing the reason.",
                                    "url": "https://github.com/MatrixAI/Polykey/pull/604#issuecomment-1780022114",
                                    "author": {
                                        "login": "CMCDragonkai"
                                    }
                                },
                                {
                                    "createdAt": "2023-10-26T00:35:25Z",
                                    "bodyText": "Can you fix it that way, and add an inline comment describing the reason.\n\n// This has to be done in case the key is `__proto__`.\n    // Otherwise, the object will not be correctly serialized.\n    // https://github.com/MatrixAI/Polykey/issues/608\n    Object.defineProperty(providerTokens, identityId, {\n      value: providerToken,\n      writable: true,\n      enumerable: true,\n      configurable: true,\n    });",
                                    "url": "https://github.com/MatrixAI/Polykey/pull/604#issuecomment-1780240618",
                                    "author": {
                                        "login": "amydevs"
                                    }
                                }
                            ]
                        },
                        "reviews": {
                            "edges": [
                                {
                                    "node": {
                                        "state": "CHANGES_REQUESTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Typo here.",
                                                        "author": {
                                                            "login": "CMCDragonkai"
                                                        },
                                                        "url": "https://github.com/MatrixAI/Polykey/pull/604#discussion_r1371985623",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "d3ecf58",
                                                            "authoredDate": "2023-10-25T10:33:23Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "Prefer IdentityIdInvalid. Usually describing word at the end.",
                                                        "author": {
                                                            "login": "CMCDragonkai"
                                                        },
                                                        "url": "https://github.com/MatrixAI/Polykey/pull/604#discussion_r1371986654",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "d3ecf58",
                                                            "authoredDate": "2023-10-25T10:33:23Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "So, this __proto__ thing is special to JSON.stringify? Are there other keys that are special too? Seems very strange.",
                                                        "author": {
                                                            "login": "CMCDragonkai"
                                                        },
                                                        "url": "https://github.com/MatrixAI/Polykey/pull/604#discussion_r1371988116",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "d3ecf58",
                                                            "authoredDate": "2023-10-25T10:33:23Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "i think stuff like __defineSetter__ and __defineGetter__ should be the same. However, Object.defineProperty should solve all that",
                                                        "author": {
                                                            "login": "amydevs"
                                                        },
                                                        "url": "https://github.com/MatrixAI/Polykey/pull/604#discussion_r1372448529",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "d3ecf58",
                                                            "authoredDate": "2023-10-25T10:33:23Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "removed in favor of using Object.defineProperty",
                                                        "author": {
                                                            "login": "amydevs"
                                                        },
                                                        "url": "https://github.com/MatrixAI/Polykey/pull/604#discussion_r1372448655",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "d3ecf58",
                                                            "authoredDate": "2023-10-25T10:33:23Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "fixed",
                                                        "author": {
                                                            "login": "amydevs"
                                                        },
                                                        "url": "https://github.com/MatrixAI/Polykey/pull/604#discussion_r1372449347",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "d3ecf58",
                                                            "authoredDate": "2023-10-25T10:33:23Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "textMatches": [
                        {
                            "property": "comments.body"
                        },
                        {
                            "property": "body"
                        }
                    ]
                },
                {
                    "node": {
                        "number": 609,
                        "title": "Addressing crashes from failing background connections",
                        "repository": {
                            "nameWithOwner": "MatrixAI/Polykey",
                            "primaryLanguage": {
                                "name": "TypeScript"
                            }
                        },
                        "createdAt": "2023-10-25T07:40:12Z",
                        "mergedAt": "2023-11-03T01:48:57Z",
                        "url": "https://github.com/MatrixAI/Polykey/pull/609",
                        "state": "MERGED",
                        "author": {
                            "login": "tegefaulkes"
                        },
                        "editor": {
                            "login": "tegefaulkes"
                        },
                        "body": "### Description\r\n\r\nThis PR addresses stability fixes for failing connections.\r\n\r\nIt directly addresses this issue #592 \r\n\r\n### Issues Fixed\r\n\r\n* Fixes #592\r\n\r\n### Tasks\r\n\r\n* [x] 1. Prevent any connection failures in the background from bubbling up to the top of the program. The `NCM` should never throw when a connection fails.\r\n* [x] 2. expand tests to include connection failures and concurrent connection failures.\r\n* [x] 3. Remove magic number error codes from the nodes domain and use an `enum` to get the code and reason.  all forced connection stops should use this.\r\n* [x] 4. Fix so that concurrent connections results in a single successful active connection.\r\n\r\n### Final checklist\r\n\r\n* [x] Domain specific tests\r\n* [x] Full tests\r\n* [x] Updated inline-comment documentation\r\n* [x] Lint fixed\r\n* [x] Squash and rebased\r\n* [x] Sanity check the final build\r\n",
                        "comments": {
                            "nodes": [
                                {
                                    "createdAt": "2023-10-25T07:41:46Z",
                                    "bodyText": "\ud83d\udc47 Click on the image for a new way to code review\n\n\n\nLegend",
                                    "url": "https://github.com/MatrixAI/Polykey/pull/609#issuecomment-1778693773",
                                    "author": null
                                },
                                {
                                    "createdAt": "2023-10-27T01:59:52Z",
                                    "bodyText": "I need to make a patch to js-quic to expose the dcid of the connection.",
                                    "url": "https://github.com/MatrixAI/Polykey/pull/609#issuecomment-1782172263",
                                    "author": {
                                        "login": "tegefaulkes"
                                    }
                                },
                                {
                                    "createdAt": "2023-10-27T02:58:19Z",
                                    "bodyText": "I need to make a patch to js-quic to expose the dcid of the connection.\n\nWhy do you need the dcid? We already have connection ID. And the dcid is only used for negotiation I thought.",
                                    "url": "https://github.com/MatrixAI/Polykey/pull/609#issuecomment-1782210674",
                                    "author": {
                                        "login": "CMCDragonkai"
                                    }
                                },
                                {
                                    "createdAt": "2023-10-27T04:09:23Z",
                                    "bodyText": "Could go ahead with event optimisation soon too.",
                                    "url": "https://github.com/MatrixAI/Polykey/pull/609#issuecomment-1782259728",
                                    "author": {
                                        "login": "CMCDragonkai"
                                    }
                                },
                                {
                                    "createdAt": "2023-10-29T22:06:31Z",
                                    "bodyText": "I need to make a patch to js-quic to expose the dcid of the connection.\n\nWhy do you need the dcid? We already have connection ID. And the dcid is only used for negotiation I thought.\n\nSorry, I thought I replied to this. For this PR I just need some information about the connection common to both sides. The scid and dcid are good for this.\nOn top of that, it's just useful to have the id to collate connection pairs in logs between multiple nodes.",
                                    "url": "https://github.com/MatrixAI/Polykey/pull/609#issuecomment-1784238821",
                                    "author": {
                                        "login": "tegefaulkes"
                                    }
                                },
                                {
                                    "createdAt": "2023-10-30T01:43:17Z",
                                    "bodyText": "Progress update, Now when processing a reverse connection and a connection exists in the connection map for that node Id. Both sides will deterministically select the same connection to keep by comparing the connection IDs.\nImplementation wise, It creates common connectionId that is the same on both sides by concatenating the connectionId and connectionIdPeer together to form a connectionIdShared. the 'lower' id comes first in this derived id. When comparing the two connections we select the 'lower' connectionIdShared when selecting the connection to keep. This way both nodes select the same connection to keep when making this decision.\nThat aspect of the problem is solved. A 2nd problem to this is that if we use the connection right after the concurrent establishment. The connection will be closed while using it. To avoid this we need to apply slightly stricter locking on the connection map.\nI need to use a RWLockWriter for the object map. Creation and destruction will be write locks, while usage will be read locks.\nThere is also a possibility that the reverse connection's streams need to be handled while deciding which one to keep. I'll need to keep an eye out for a race condition there..\nUltimately we'd want to be able to concurrently establish a connection between two nodes and not have any intermittent failures happen due to race conditions. We may not be able to fully eliminate it, but we can significantly reduce the chance of it happening.",
                                    "url": "https://github.com/MatrixAI/Polykey/pull/609#issuecomment-1784347856",
                                    "author": {
                                        "login": "tegefaulkes"
                                    }
                                },
                                {
                                    "createdAt": "2023-10-30T02:32:14Z",
                                    "bodyText": "I think while I'm here I need to use a monitor for re-entrant locking.",
                                    "url": "https://github.com/MatrixAI/Polykey/pull/609#issuecomment-1784381601",
                                    "author": {
                                        "login": "tegefaulkes"
                                    }
                                },
                                {
                                    "createdAt": "2023-10-30T03:47:21Z",
                                    "bodyText": "I'm starting to think that no matter what we do, locking isn't going to solve the problem of a rpc request being cancelled when handling this.\nI think we just need to be more lax about it. What we can do is have both connections be valid but the one we want to clean up will not be used to start any new streams. In stead we will destroy it with force: false and wait for all the streams to finish.\nWhile this is happening, we just synchronously swap the connection we want to keep into the connection map. This should allow us to avoid cancelling any active RPC requests. The downside is that we could have a duplicate connection exist while it's handling streams. This seems like an OK compromise.",
                                    "url": "https://github.com/MatrixAI/Polykey/pull/609#issuecomment-1784431409",
                                    "author": {
                                        "login": "tegefaulkes"
                                    }
                                },
                                {
                                    "createdAt": "2023-10-30T04:07:51Z",
                                    "bodyText": "So the problem is you have 2 concurrent things happening out of order. And only one can succeed. Locking isn't sufficient for this because there's no neutral sequencer.\nIn this case what you can do is the STONITH strategy. But you want to make sure that both nodes choose the same one to do it to.",
                                    "url": "https://github.com/MatrixAI/Polykey/pull/609#issuecomment-1784445585",
                                    "author": {
                                        "login": "CMCDragonkai"
                                    }
                                },
                                {
                                    "createdAt": "2023-10-30T04:13:34Z",
                                    "bodyText": "See https://chat.openai.com/share/476a7f17-ab44-43cb-aa2d-dd133bb1f0df\nApply a STONITH strategy deterministically and also apply a small random jitter to connection initiations. A random delay of between 0 to 50ms?",
                                    "url": "https://github.com/MatrixAI/Polykey/pull/609#issuecomment-1784449762",
                                    "author": {
                                        "login": "CMCDragonkai"
                                    }
                                },
                                {
                                    "createdAt": "2023-10-30T05:22:05Z",
                                    "bodyText": "I've pretty much implemented that already. I have most of a solution now. Both nodes do select the same connection to kill, the other part of the problem is that the connection could already be handling a stream. I want to handle the stream gracefully while cleaning up the connection.\nTo this end, when we enter a what I'm going to call a doppelganger scenario, we synchronously swap existing connection with the new connection if needed. the connection we don't want will be destroyed with force: false so any streams can end gracefully.\nI need to check something with js-quic. that destroying a connection with force: false works as expected on both ends. Seems like there might be an issue with that. In the mean time, delaying destruction of the connections seems to work around it.",
                                    "url": "https://github.com/MatrixAI/Polykey/pull/609#issuecomment-1784502861",
                                    "author": {
                                        "login": "tegefaulkes"
                                    }
                                },
                                {
                                    "createdAt": "2023-10-30T06:49:22Z",
                                    "bodyText": "Just checked, all calls with withConnF inside of the NodeConnectionManager handle any expected connection errors and prevent throwing. Task 1 should be addressed.",
                                    "url": "https://github.com/MatrixAI/Polykey/pull/609#issuecomment-1784578089",
                                    "author": {
                                        "login": "tegefaulkes"
                                    }
                                },
                                {
                                    "createdAt": "2023-10-30T06:53:13Z",
                                    "bodyText": "Two things left before this PR is done.\n\nremoving magic error codes when stopping the NodeConnection.\nCheck if streams can end gracefully if the connection is stopped with force: false. Need to check this in js-quic.",
                                    "url": "https://github.com/MatrixAI/Polykey/pull/609#issuecomment-1784582012",
                                    "author": {
                                        "login": "tegefaulkes"
                                    }
                                },
                                {
                                    "createdAt": "2023-11-01T01:36:22Z",
                                    "bodyText": "Due to the other changes, there is now only 1 place where the magic error code is used for stopping a connection and that's in the NodeConnection.destroy method.\n    await this.quicConnection.stop(\n      force\n        ? {\n            isApp: true,\n            errorCode: 1,\n            reason: Buffer.from('NodeConnection is forcing destruction'),\n            force,\n          }\n        : {},\n    );\nUltimately this will only be called when the NCM stops and closes all connections.\nI'm thinking that the code and reason can be passed into the NodeConnection.stop().\nAs for the enum, it's just going to be a single entry. I can still add it. Keep in mind that enum can only map numbers or strings in typescript. So i need separate ones for the code and reason.",
                                    "url": "https://github.com/MatrixAI/Polykey/pull/609#issuecomment-1788264464",
                                    "author": {
                                        "login": "tegefaulkes"
                                    }
                                },
                                {
                                    "createdAt": "2023-11-01T06:47:02Z",
                                    "bodyText": "This is pretty much done, but there are 3 test failures happening that are weird. So there are still some things I need to check. I'm out of energy to deal with it today.",
                                    "url": "https://github.com/MatrixAI/Polykey/pull/609#issuecomment-1788494909",
                                    "author": {
                                        "login": "tegefaulkes"
                                    }
                                },
                                {
                                    "createdAt": "2023-11-01T06:51:39Z",
                                    "bodyText": "Two tests in VaultManager.test.ts are failing due to the writable stream being locked. I have no idea how anything I have changed could've affected this. Haven't looked at it yet.\nThere is a discovery test failing due to trying to start a stream when the connection is stopping. Two odd things here, 1. The connection is stopping and I'm not sure why, maybe deadlock + timeout? 2. The error is bubbling up when it should be handled.  Still looking into this.",
                                    "url": "https://github.com/MatrixAI/Polykey/pull/609#issuecomment-1788498398",
                                    "author": {
                                        "login": "tegefaulkes"
                                    }
                                },
                                {
                                    "createdAt": "2023-11-01T16:09:44Z",
                                    "bodyText": "That WritableStream is a web stream or one of the old FS streams that we haven't replaced?",
                                    "url": "https://github.com/MatrixAI/Polykey/pull/609#issuecomment-1789235363",
                                    "author": {
                                        "login": "CMCDragonkai"
                                    }
                                },
                                {
                                    "createdAt": "2023-11-02T04:56:07Z",
                                    "bodyText": "I'm stuck on a problem with a discovery test. It's functioning as expected but one of the nodes is trying to connect to another expecting the wrong NodeId. This is really weird and I'm still digging into it. I'm not even sure the problem is related to my changes.\nI'm still digging into it.",
                                    "url": "https://github.com/MatrixAI/Polykey/pull/609#issuecomment-1790067286",
                                    "author": {
                                        "login": "tegefaulkes"
                                    }
                                },
                                {
                                    "createdAt": "2023-11-02T07:11:44Z",
                                    "bodyText": "I found the problem. There was a bug introduced in 2834a09 caused this one specific discovery tests to fail sometimes.\nIf nothing else is broken then I should have this done soon",
                                    "url": "https://github.com/MatrixAI/Polykey/pull/609#issuecomment-1790188882",
                                    "author": {
                                        "login": "tegefaulkes"
                                    }
                                },
                                {
                                    "createdAt": "2023-11-02T14:23:38Z",
                                    "bodyText": "Commit messages should be more descriptive. What was the bug.",
                                    "url": "https://github.com/MatrixAI/Polykey/pull/609#issuecomment-1790834685",
                                    "author": {
                                        "login": "CMCDragonkai"
                                    }
                                },
                                {
                                    "createdAt": "2023-11-02T18:54:48Z",
                                    "bodyText": "What are the new exceptions being used in place of enums? Can you spec that out into the PR spec?",
                                    "url": "https://github.com/MatrixAI/Polykey/pull/609#issuecomment-1791361828",
                                    "author": {
                                        "login": "CMCDragonkai"
                                    }
                                },
                                {
                                    "createdAt": "2023-11-02T23:20:54Z",
                                    "bodyText": "CI faliure.\nFAIL tests/nodes/NodeConnectionManager.mdns.test.ts\n  NodeConnectionManager MDNS test\n    \u2713 should find local node without seedNodes (335 ms)\n    \u2715 acquireConnection should create local connection without seednodes (1216 ms)\n  \u25cf NodeConnectionManager MDNS test \u203a acquireConnection should create local connection without seednodes\n    ErrorNodeGraphNodeIdNotFound:\n      766 |       addresses = await this.findNodeAll(targetNodeId, undefined, ctx);\n      767 |       if (addresses.length === 0) {\n    > 768 |         throw new nodesErrors.ErrorNodeGraphNodeIdNotFound();\n          |               ^\n      769 |       }\n      770 |     }\n      771 |     // Then we just get the connection, it should already exist.\n      at constructor_.getConnection (src/nodes/NodeConnectionManager.ts:768:15)\n\nI'll need to look into this.\nLooking deeper, it's a failure of an mdns test. It's out of scope for this PR. The problem seems to be that it's failing to find the node through MDNS here. But it runs fine locally so may be a race condition happens in the CI.\nAny insights @amydevs ?",
                                    "url": "https://github.com/MatrixAI/Polykey/pull/609#issuecomment-1791694425",
                                    "author": {
                                        "login": "tegefaulkes"
                                    }
                                },
                                {
                                    "createdAt": "2023-11-03T01:27:33Z",
                                    "bodyText": "What are the new exceptions being used in place of enums? Can you spec that out into the PR spec?\n\nWe're using an enum in place of a magic number error code and message when forcing a connection to end.\nTwo new enums has been created. I would've used one but they only take numbers or strings, not a object of both.\nenum ConnectionErrorCode {\n  ForceClose = 1,\n}\n\nenum ConnectionErrorReason {\n  ForceClose = 'NodeConnection is forcing destruction',\n}\nThis is only needed in one place now. That's when forcing a NodeConnection to destroy.",
                                    "url": "https://github.com/MatrixAI/Polykey/pull/609#issuecomment-1791775794",
                                    "author": {
                                        "login": "tegefaulkes"
                                    }
                                },
                                {
                                    "createdAt": "2023-11-03T04:32:16Z",
                                    "bodyText": "It's weird that only connection error codes are enums but not everything else that relies on exceptions.",
                                    "url": "https://github.com/MatrixAI/Polykey/pull/609#issuecomment-1791882171",
                                    "author": {
                                        "login": "CMCDragonkai"
                                    }
                                },
                                {
                                    "createdAt": "2023-11-03T04:32:38Z",
                                    "bodyText": "Plus don't you need all your enums to be together?",
                                    "url": "https://github.com/MatrixAI/Polykey/pull/609#issuecomment-1791882335",
                                    "author": {
                                        "login": "CMCDragonkai"
                                    }
                                },
                                {
                                    "createdAt": "2023-11-05T22:11:59Z",
                                    "bodyText": "Not really an exception in the application here. It's just a code and message for stopping the connection. We don't directly need to throw anything in this case.\nThe enums are together here? I'm not sure what you mean.",
                                    "url": "https://github.com/MatrixAI/Polykey/pull/609#issuecomment-1793861465",
                                    "author": {
                                        "login": "tegefaulkes"
                                    }
                                }
                            ]
                        },
                        "reviews": {
                            "edges": []
                        }
                    },
                    "textMatches": [
                        {
                            "property": "comments.body"
                        }
                    ]
                }
            ],
            "pageInfo": {
                "endCursor": "Y3Vyc29yOjM=",
                "hasNextPage": false,
                "hasPreviousPage": false,
                "startCursor": "Y3Vyc29yOjE="
            },
            "issueCount": 3
        }
    }
}