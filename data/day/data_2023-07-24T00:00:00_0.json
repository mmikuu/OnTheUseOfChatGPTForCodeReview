{
    "data": {
        "search": {
            "edges": [
                {
                    "node": {
                        "number": 76,
                        "title": "72 router",
                        "repository": {
                            "nameWithOwner": "sleepyRias/BetterSteam",
                            "primaryLanguage": {
                                "name": "C#"
                            }
                        },
                        "createdAt": "2023-07-24T15:04:07Z",
                        "mergedAt": null,
                        "url": "https://github.com/sleepyRias/BetterSteam/pull/76",
                        "state": "CLOSED",
                        "author": {
                            "login": "Multi538"
                        },
                        "editor": null,
                        "body": "",
                        "comments": {
                            "nodes": [
                                {
                                    "createdAt": "2023-07-24T15:04:32Z",
                                    "bodyText": "Robert ich habe kein ahnung mehr und GPT hilft net mehr weiter",
                                    "url": "https://github.com/sleepyRias/BetterSteam/pull/76#issuecomment-1648088111",
                                    "author": {
                                        "login": "Multi538"
                                    }
                                },
                                {
                                    "createdAt": "2023-07-24T15:54:58Z",
                                    "bodyText": "N\u00e4chste Woche mal r\u00fcberschauen: https://chat.openai.com/share/d2809bdd-7f19-4a03-9621-da1908e8e639",
                                    "url": "https://github.com/sleepyRias/BetterSteam/pull/76#issuecomment-1648183442",
                                    "author": {
                                        "login": "rhaetscher"
                                    }
                                }
                            ]
                        },
                        "reviews": {
                            "edges": []
                        }
                    },
                    "textMatches": [
                        {
                            "property": "comments.body"
                        }
                    ]
                },
                {
                    "node": {
                        "number": 2,
                        "title": "Fix: recursive/glob support",
                        "repository": {
                            "nameWithOwner": "chitalian/gptask",
                            "primaryLanguage": {
                                "name": "Python"
                            }
                        },
                        "createdAt": "2023-07-24T18:09:25Z",
                        "mergedAt": "2023-07-24T19:52:21Z",
                        "url": "https://github.com/chitalian/gptask/pull/2",
                        "state": "MERGED",
                        "author": {
                            "login": "calum-bird"
                        },
                        "editor": null,
                        "body": "Changes:\r\n`-r` is now a flag, not an argument\r\n`file` argument changed to `path`, a string that can be either a file path, directory, or glob pattern\r\nLogic to support the above in a natural way\r\n\r\n\r\nThis isn't quite ready for merging. Needs some testing",
                        "comments": {
                            "nodes": [
                                {
                                    "createdAt": "2023-07-24T18:31:12Z",
                                    "bodyText": "@calum-bird\nhttps://chat.openai.com/share/902cd378-3ebc-4e35-99ed-e63c7150c6ad",
                                    "url": "https://github.com/chitalian/gptask/pull/2#issuecomment-1648399736",
                                    "author": {
                                        "login": "chitalian"
                                    }
                                }
                            ]
                        },
                        "reviews": {
                            "edges": [
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            ```\n          \n          \n            \n            \n          \n          \n            \n            ```",
                                                        "author": {
                                                            "login": "chitalian"
                                                        },
                                                        "url": "https://github.com/chitalian/gptask/pull/2#discussion_r1272608481",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "74b84f4",
                                                            "authoredDate": "2023-07-24T18:07:40Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "ahhh yeah - this makes a lot more sense lmao",
                                                        "author": {
                                                            "login": "chitalian"
                                                        },
                                                        "url": "https://github.com/chitalian/gptask/pull/2#discussion_r1272611423",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "74b84f4",
                                                            "authoredDate": "2023-07-24T18:07:40Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Yeah fixing",
                                                        "author": {
                                                            "login": "calum-bird"
                                                        },
                                                        "url": "https://github.com/chitalian/gptask/pull/2#discussion_r1272680858",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "74b84f4",
                                                            "authoredDate": "2023-07-24T18:07:40Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Yeah I think it's cleaner for sure",
                                                        "author": {
                                                            "login": "calum-bird"
                                                        },
                                                        "url": "https://github.com/chitalian/gptask/pull/2#discussion_r1272680975",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "74b84f4",
                                                            "authoredDate": "2023-07-24T18:07:40Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "textMatches": [
                        {
                            "property": "comments.body"
                        }
                    ]
                },
                {
                    "node": {
                        "number": 3463,
                        "title": "Add \"crates.io Policy Update\" RFC",
                        "repository": {
                            "nameWithOwner": "rust-lang/rfcs",
                            "primaryLanguage": {
                                "name": "Markdown"
                            }
                        },
                        "createdAt": "2023-07-24T13:37:52Z",
                        "mergedAt": "2023-11-07T09:32:15Z",
                        "url": "https://github.com/rust-lang/rfcs/pull/3463",
                        "state": "MERGED",
                        "author": {
                            "login": "Turbo87"
                        },
                        "editor": {
                            "login": "ehuss"
                        },
                        "body": "[Rendered](https://rust-lang.github.io/rfcs/3463-crates-io-policy-update.html)\r\n\r\n/cc @rust-lang/crates-io ",
                        "comments": {
                            "nodes": [
                                {
                                    "createdAt": "2023-07-24T23:34:10Z",
                                    "bodyText": "I think a lot of the rules in this RFC are probably fine, but some of them strike me as quite vague and easily contorted. I understand some level of vagueness is necessary as not every little detail can be specified up front. That should make it clear that I am not objecting to vagueness itself but the level of vagueness.\nIronically, I recognize the vagueness of my objection. I think that discussing each rule in the abstract is likely to go exactly nowhere. So instead, I think it would be useful to take the rules as written and try to apply them to the ecosystem today. Presumably there is some subset of crates on crates.io that would be taken down by an application of one or more of the rules in this RFC. I certainly don't think we need to enumerate the entire subset, but for transparency, I think it would be a good idea to enumerate some of them. I can get us started:\n\nassertive\nrg\nbuttplug\nvsdb\nbitcoin\nbible\n\nI'm sure there are more interesting examples, and I'd encourage others to raise them. But at least for this small set, I personally see a fairly straight-forward application of one or more rules, as written in this RFC, being used to justify some action against all of the above crates. Is that not intended? If not, then perhaps the rules need some work. If so, then we should definitely talk about the ramifications of this RFC in terms of the crates it is going to impact as a starting point.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1648760036",
                                    "author": {
                                        "login": "BurntSushi"
                                    }
                                },
                                {
                                    "createdAt": "2023-07-25T06:52:09Z",
                                    "bodyText": "@BurntSushi thank you, I think discussing in less abstract cases makes a lot of sense. the following would be my interpretation of the rules:\n\nassertive\n\nin its current state it would not be allowed since it breaks the \"reserved for prolonged period of time\" rule. if there was a repository link attached that shows active development or a README that explains why 4 years later there is still no content there then things might look different.\nI see that Carl also has a bunch of async-* crates reserved, where the rule would similarly apply.\n\nrg\n\nas others have noted, there is also a rule in the proposal about impersonation. since ripgrep is a very popular tool and the rg package prevents a common impersonation/typo-squatting attack IMHO the name reservation rule does not apply, especially since the README clearly explains the purpose.\n\nbuttplug\n\nI think https://docs.github.com/en/site-policy/acceptable-use-policies/github-sexually-obscene-content is a good guideline on what is meant by \"sexually obscene\" clause. \"We do not allow sexually themed or suggestive content that serves little or no purpose other than to solicit an erotic or shocking response\" does not apply since there is genuine functionality here, that is related to sexuality, but AFAICT not abusive in any way or includes any kind of pornographic material.\ntl;dr it's fine\n\nvsdb\nbitcoin\n\nI'm not sure why these two were included. Is this related to the latest lib.rs discussions?\nWhile I'm personally not a big fan of cryptocurrencies there is nothing in the rules that would prevent anyone from publishing these kinds of crates. There is something in there about \"cryptocurrency mining\" but that is in the context of \"excessive bulk activity and coordinated inauthentic activity\" and meant to e.g. disallow installing a cryptominer in the build.rs file of a crate.\n\nbible\n\nThere is no genuine functionality in this crate (just the hello world example code), it has no repository attached to check for development activity, and it has no README explaining reasons why this might still be legitimate. Looking at the other crates of the owner it also becomes quite obvious that this person is squatting names for the fun of it. In other words: this crate would be removed under the proposed ruleset.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1649229675",
                                    "author": {
                                        "login": "Turbo87"
                                    }
                                },
                                {
                                    "createdAt": "2023-07-25T09:15:01Z",
                                    "bodyText": "since ripgrep is a very popular tool and the\u00a0rg\u00a0package prevents a common impersonation/typo-squatting attack IMHO the name reservation rule does not apply, especially since the README clearly explains the purpose.\n\nIf ripgrep was less popular, would this reasoning still apply? Is there a popularity threshold of some sort?",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1649440753",
                                    "author": {
                                        "login": "Jules-Bertholet"
                                    }
                                },
                                {
                                    "createdAt": "2023-07-25T12:18:52Z",
                                    "bodyText": "@Turbo87 Thanks for the response. Separate from the specifics of each crate, has any work been done to figure out how best to communicate with existing crate authors about how this policy is going to impact them?\n\nI see that Carl also has a bunch of async-* crates reserved, where the rule would similarly apply.\n\ncc @carllerche do you want to chime in on this?\n\nas others have noted, there is also a rule in the proposal about impersonation. since ripgrep is a very popular tool and the rg package prevents a common impersonation/typo-squatting attack IMHO the name reservation rule does not apply, especially since the README clearly explains the purpose.\n\nIt's not at all clear to me that every use of rg is about impersonation though. And even then, how do you choose which rule overrides the other?\nWhat I'm getting at here is that the rule against squatting put forward here is very broad. @jhpratt suggested a carve out involving contacting the authors. What do you think about that? I understand writing down rules against squatting is difficult, but the problem is itself difficult and has a ton of prior discussion on the matter. Has that prior discussion been surveyed?\n\nI think https://docs.github.com/en/site-policy/acceptable-use-policies/github-sexually-obscene-content is a good guideline on what is meant by \"sexually obscene\" clause. \"We do not allow sexually themed or suggestive content that serves little or no purpose other than to solicit an erotic or shocking response\" does not apply since there is genuine functionality here, that is related to sexuality, but AFAICT not abusive in any way or includes any kind of pornographic material.\n\nShould that language make it into the RFC clarifying what is meant?\n\nI'm not sure why these two were included. Is this related to the latest lib.rs discussions?\nWhile I'm personally not a big fan of cryptocurrencies there is nothing in the rules that would prevent anyone from publishing these kinds of crates. There is something in there about \"cryptocurrency mining\" but that is in the context of \"excessive bulk activity and coordinated inauthentic activity\" and meant to e.g. disallow installing a cryptominer in the build.rs file of a crate.\n\nNo it's not about lib.rs. The cryptominer case I think is covered well by the \"contains malicious code\" rule. The rule I'm thinking about here is this (for which there is already some lively discussion):\n\nis false, inaccurate, or intentionally deceptive information and likely to\nadversely affect the public interest (including health, safety, election\nintegrity, and civic participation)\n\nIt is by no means a stretch to say that cryptocurrency meets this standard. All you have to do is make an argument that the vast majority of cryptocurrencies are in some way a scam or an MLM scheme, and then you just have to make an argument about its impact on climate change. I'm not going to make that argument in detail here (I think its existence is sufficient), but I've seen plenty of other folks make this argument earnestly and with pretty compelling reasons. So I'm not just picking something out of the ether here and playing with hypotheticals.\nIf the cryptocurrency case isn't meant to fall under this rule, then perhaps the rule should be further clarified.\n\nThere is no genuine functionality in this crate (just the hello world example code), it has no repository attached to check for development activity, and it has no README explaining reasons why this might still be legitimate. Looking at the other crates of the owner it also becomes quite obvious that this person is squatting names for the fun of it. In other words: this crate would be removed under the proposed ruleset.\n\nAh okay, whoops. Perhaps the_rock instead. My thinking here was essentially a more extreme version of the cryptocurrency case. This one is admittedly a bit more bombastic, but if you talked to the version of me that was 15 years younger, I would tell you with a straight face that it was promoting a lie that endangered the health of humanity.\n\nPopping up a level, now that we've dived a little into specifics, my general feeling here is that the rules don't do a good enough job on their own from protecting ourselves and crates.io from our own biases. Some of these cases might look dumb and obviously not in violation of the rules, but we also need to think about how these rules will be used 10+ years from now. That's not to say we should start treating our future selves as adversaries necessarily, but I do think it's prudent to try and be a little more concrete with some of these rules.\nMaybe there are some small wording changes that make the scope of some of these rules a bit more narrow explicitly.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1649731043",
                                    "author": {
                                        "login": "BurntSushi"
                                    }
                                },
                                {
                                    "createdAt": "2023-07-25T16:55:24Z",
                                    "bodyText": "vsdb\nbitcoin\n\nI'm not sure why these two were included. Is this related to the latest lib.rs discussions?\n\nNote that vsdb's download counts are clearly artificially inflated. Doesn't that violate the rule against misinformation?",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1650199064",
                                    "author": {
                                        "login": "jonas-schievink"
                                    }
                                },
                                {
                                    "createdAt": "2023-07-25T18:38:42Z",
                                    "bodyText": "Note that vsdb's download counts are clearly artificially inflated. Doesn't that violate the rule against misinformation?\n\nI think that download counts for crates are (mostly) useless since one genuine build system with bad caching can inflate downloads. I think this would fall more in line with API abuse, where for example a given host could be banned for repeatedly requesting crates when they should be properly caching their downloads.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1650346619",
                                    "author": {
                                        "login": "clarfonthey"
                                    }
                                },
                                {
                                    "createdAt": "2023-07-26T10:47:19Z",
                                    "bodyText": "If ripgrep was less popular, would this reasoning still apply? Is there a popularity threshold of some sort?\n\nif your tool only has a couple of downloads per month then it probably wouldn't apply, but ripgrep is certainly popular enough to warrant an exception. in general, it would be best to have the binary name match the crate name though, so that the reason for this additional name reservation doesn't exist in the first place.\n\nSeparate from the specifics of each crate, has any work been done to figure out how best to communicate with existing crate authors about how this policy is going to impact them?\n\nif the crate is from a legitimate author (as in: the GitHub user wasn't created just for the purpose of name squatting) then we will most likely contact the author via email before taking action. we have already done similar things in the past couple of weeks/months with regard to broken crate files (broken tarballs, empty tarballs, missing manifests, etc.).\n\n@jhpratt suggested a carve out involving contacting the authors. What do you think about that?\n\nI'm generally in favor, as long as it does not prevent us from immediately acting on actual name squatting \"attacks\". In the past couple of weeks we had several cases of people squatting hundreds of crates name. I don't think it would be practical if we had to contact these people first and give them a couple of weeks to respond before we could act on this. I'm open to wording suggestions on how to integrate this with the current proposal :)\n\nShould that language make it into the RFC clarifying what is meant?\n\nyep, I've added the link to the bullet point in the list.\n\nIt is by no means a stretch to say that cryptocurrency meets this standard. All you have to do is make an argument that the vast majority of cryptocurrencies are in some way a scam or an MLM scheme, and then you just have to make an argument about its impact on climate change. I'm not going to make that argument in detail here (I think its existence is sufficient), but I've seen plenty of other folks make this argument earnestly and with pretty compelling reasons. So I'm not just picking something out of the ether here and playing with hypotheticals.\nIf the cryptocurrency case isn't meant to fall under this rule, then perhaps the rule should be further clarified.\n\nI think whether crates.io should generally forbid any cryptocurrency code or not would derail this RFC quite a bit and I'm not going to argue for either side here. It is currently not the intention of the crates.io team to generally forbid such code from being published to crates.io, unless there are some verifiably misleading claims published with it.\nI'm open to suggestions on how to clarify the rule if you think that it needs a clarification.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1651536844",
                                    "author": {
                                        "login": "Turbo87"
                                    }
                                },
                                {
                                    "createdAt": "2023-07-26T10:49:56Z",
                                    "bodyText": "Perhaps saying that the team may reach out to the crate's owner at their discretion? Obvious cases can still be handled immediately, while questionable ones can be given the opportunity for further explanation.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1651540339",
                                    "author": {
                                        "login": "jhpratt"
                                    }
                                },
                                {
                                    "createdAt": "2023-07-26T11:52:19Z",
                                    "bodyText": "if your tool only has a couple of downloads per month then it probably wouldn't apply, but ripgrep is certainly popular enough to warrant an exception.\n\nHow should this balancing act be incorporated into the rules proposed in this RFC?\nAlso, I'd like to repeat my question: squatting is a topic that has been much discussed in the past. Has a survey of those discussions been done? My sense of things here is that this RFC is proposing a short but fairly strict policy on squatting, but will in practice be looser than the strict interpretation yet stricter than what is practiced today. Is it worth setting expectations more clearly that that?\n\nif the crate is from a legitimate author (as in: the GitHub user wasn't created just for the purpose of name squatting) then we will most likely contact the author via email before taking action. we have already done similar things in the past couple of weeks/months with regard to broken crate files (broken tarballs, empty tarballs, missing manifests, etc.).\n\nRight, that sounds reasonable. I think I might have been unclear. I didn't mean, \"how are you going tell crate authors that they're in violation of a new policy,\" but rather, how are you going to collect feedback from stakeholders before this RFC passes? I realize \"stakeholders\" here is a pretty big bucket, and I've tried CC'ing a couple folks already in this thread, but I really think it's important to cast a wide net here. IMO, the title of this RFC does not reflect the level of change. I guess from my perspective, this is a very large change. I know you've said that most of these rules are a reflection of current practice (sans squatting), but 1) the squatting issue is a big one and 2) there is a bias inherent in your perspective. You might look at the rules and see them through the lens of a ton of context that comes from practice, but others (such as myself) look at the rules and see a very large deviation from the status quo. That is, in part, due to the vagueness of some of the rules.\nAnd to be clear, I think a lot of the deviation is good deviation. I don't use deviation pejoratively. But because of the delta here, or at least, the perceived delta, I think it's important to get more visibility on this RFC. And in particular, it's important to reflect on what the changes in the rules imply on their own, and not just what the practice has been recently. A change in the rules can precipitate a change in practice over time.\nI feel like I'm fumbling my words here and not making my point as clear as I would like to. My apologies.\n\nI'm generally in favor, as long as it does not prevent us from immediately acting on actual name squatting \"attacks\".\n\nYes, 100% agreed. It's totally fine IMO to treat obvious bad faith or trolling cases differently from those acting in good faith. (Usually the difference is extremely obvious, and if a mistake is made, it's hopefully usually easy to undo.)\n\nI think whether crates.io should generally forbid any cryptocurrency code or not would derail this RFC quite a bit and I'm not going to argue for either side here. It is currently not the intention of the crates.io team to generally forbid such code from being published to crates.io, unless there are some verifiably misleading claims published with it.\nI'm open to suggestions on how to clarify the rule if you think that it needs a clarification.\n\nYeah... I see the conundrum. The unfortunate bit here is that I feel like the crypto-currency case is a really excellent stress test on these rules IMO. The thing that makes it an excellent stress test is probably also the thing that would make it easy to derail this thread unfortunately. I'm not sure how to resolve that.\nMaybe it makes sense to add the word \"narrow\" (or similar) to this rule then?\n\nis false, inaccurate, or intentionally deceptive information and likely to\nadversely affect the public interest (including health, safety, election\nintegrity, and civic participation)\n\nAs based on your responses here, it seems like you want to treat this rule narrowly and specifically to a particular crate.\nYou could also include examples of how the rules are intended to apply, although that gets a little dicey.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1651656819",
                                    "author": {
                                        "login": "BurntSushi"
                                    }
                                },
                                {
                                    "createdAt": "2023-07-26T11:58:58Z",
                                    "bodyText": "I think whether crates.io should generally forbid any cryptocurrency code or not would derail this RFC quite a bit and I'm not going to argue for either side here. It is currently not the intention of the crates.io team to generally forbid such code from being published to crates.io, unless there are some verifiably misleading claims published with it.\n\nI don't think punting this decision is the right move. Rust tries to maintain a reputation for reliability and backward compatibility. \"Even if you try to do everything right and follow all the rules in good faith, we might delete your code and break your builds at any time, because our standards are so vague that even we aren't sure how to apply them yet\" is not compatible with that.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1651665838",
                                    "author": {
                                        "login": "Jules-Bertholet"
                                    }
                                },
                                {
                                    "createdAt": "2023-07-26T12:04:10Z",
                                    "bodyText": "Rust tries to maintain a reputation for reliability and backward compatibility. \"Even if you try to do everything right and follow all the rules in good faith, we might delete your code and break your builds at any time, because our standards are so vague that even we aren't sure how to apply them yet\" is not compatible with that.\n\njust to be clear, the whole point of this RFC is to make the rules more clear than they were before. yes, they still leave a bit of vagueness here and there, but everything else would be impractical. claiming that \"our standards are so vague that even we aren't sure how to apply them yet\" is definitely the wrong characterization of the situation though.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1651672997",
                                    "author": {
                                        "login": "Turbo87"
                                    }
                                },
                                {
                                    "createdAt": "2023-07-26T12:17:27Z",
                                    "bodyText": "The proposed policies would potentially disallow crates, like the bitcoin example, that the current policy (\"we won\u2019t attempt to get into policing what exactly makes a legitimate package. We will do what the law requires us to do, and address flagrant violations of the Rust Code of Conduct\") pretty clearly allows. That is more than just a clarification, it adds new uncertainty that did not exist before.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1651694072",
                                    "author": {
                                        "login": "Jules-Bertholet"
                                    }
                                },
                                {
                                    "createdAt": "2023-07-27T11:08:12Z",
                                    "bodyText": "I think this PR should have a short summary as the title. As it stands, it says \"update crates.io policy\", which would be pretty useless as a commit message.\nHow about: crates.io policy: Squatting, acceptable content",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1653400155",
                                    "author": {
                                        "login": "tbu-"
                                    }
                                },
                                {
                                    "createdAt": "2023-07-27T11:21:27Z",
                                    "bodyText": "For lib.rs I've come up with following exceptions to no-squatting rule:\n\nIt's okay to reserve crate names with a prefix (foo-something) if you own the crate that is the prefix (foo).\nIt's okay to reserve crate names of projects or trademarks that you have already established elsewhere (e.g. register glados if you're the Aperture Labs).\nIt's okay to reserve a few crates that you genuinely plan to release soon. When you do, please use 0.0.0-reserved version and include a way to contact you that will work long-term.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1653418659",
                                    "author": {
                                        "login": "kornelski"
                                    }
                                },
                                {
                                    "createdAt": "2023-07-27T11:42:09Z",
                                    "bodyText": "It's okay to reserve crate names with a prefix (foo-something) if you own the crate that is the prefix (foo).\n\n\nOn first glance this seems like a good idea... I'm wondering if there would be any drawbacks if we allowed this? I guess it might still make sense to restrict the number of reserved crates to not have it explode.\n\n\nIt's okay to reserve crate names of projects or trademarks that you have already established elsewhere (e.g. register glados if you're the Aperture Labs).\nIt's okay to reserve a few crates that you genuinely plan to release soon. When you do, please use 0.0.0-reserved version and include a way to contact you that will work long-term.\n\n\nmy goto example for this is @LukeMathWalker with his pavex project. he is working on this on his GitHub project, but has reserved the name with a placeholder on crates.io.\nI think this is a legitimate case that we should generally allow, but with a few caveats similar to what you are suggesting:\n\nput a link to the project repository in the Cargo.toml so that we can verify development activity\ninclude a README in the placeholder version that explains the purpose of the placeholder\nprovide a way to contact you (the crates.io team can already see the email address linked to the user account though)\nrestrict the number of names a user can reserve to a reasonable number, potentially including the prefix idea above",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1653447538",
                                    "author": {
                                        "login": "Turbo87"
                                    }
                                },
                                {
                                    "createdAt": "2023-07-27T21:34:46Z",
                                    "bodyText": "@Turbo87  @BurntSushi Since I've been called out...\nWhen I \"reserve\" a crate name, it's because of either:\na) I have an idea for a new crate, run cargo new, pick a name since I have to, and reserve the name because I don't want to have to deal w/ renaming anything later. Of course, 90%+ of these ideas never get to the point of \"shipping\".\nb) I am working in a space (e.g. tokio/async) and am carving out space. For async- there is/was a plan to release smaller crates, but for the most part that has been down prioritized. At the time, there was a race w/ other crates.io users to reserve as many async-* crate names as possible, so I was mostly just embracing the incentive structure of a single flat namespace.\nThat said, I still believe current behavior is just what will happen with a single flat namespace. I doubt any additional rules will stop me from reserving crate names. If it is a question of putting up a repo, readme, and some code... then that is what I will do. Like I said, for every name I reserve, I first generate the repo :) Unless you are setting up some sort of board to determine if the first day of dev on a new project is \"genuine functionality\".\nSo \ud83e\udd37 it just seems like it would be easier to either just let things be or add some sort of namespacing.\nEdit: https://chat.openai.com/share/8dda4506-90ba-4ebc-bf56-59093db8c34e just a demo that it would take minimal effort to generate stubs.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1654616477",
                                    "author": {
                                        "login": "carllerche"
                                    }
                                },
                                {
                                    "createdAt": "2023-07-28T07:31:13Z",
                                    "bodyText": "@carllerche as I've written above, I think it's reasonable to reserve a couple of names for projects that are actively being worked on.\nto give the others here some context, Carl currently has 288 crates, and 180 of them have a description explaining that these are reserved names. most of these crates are 4-6 years old at this point with no apparent development activity.\nregarding namespacing: as I've written in the RFC text, this is an orthogonal topic and there is an open RFC that I personally support implementing. you're very welcome to participate in moving this forward.\nfinally, let me say that giving people instructions on how to create spam projects on crates.io is IMHO quite inappropriate behavior. as much as I like your work on tokio etc. this is definitely not okay.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1655190883",
                                    "author": {
                                        "login": "Turbo87"
                                    }
                                },
                                {
                                    "createdAt": "2023-07-28T14:16:49Z",
                                    "bodyText": "That said, I still believe current behavior is just what will happen with a single flat namespace. I doubt any additional rules will stop me from reserving crate names. If it is a question of putting up a repo, readme, and some code... then that is what I will do. Like I said, for every name I reserve, I first generate the repo :) Unless you are setting up some sort of board to determine if the first day of dev on a new project is \"genuine functionality\".\n\n@carllerche I'd like to understand your reasoning a bit more here.\nPart of the motivation for this RFC is the number of complaints that the crates.io team hears from community members when a crate name they want has been claimed years ago and contains no useful functionality. These users see this kind of reservation as unfair exploitation of the community resource of the flat namespace.\nCan you elaborate a bit on why you think your reservations are fair to the rest of the Rust community?",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1655763403",
                                    "author": {
                                        "login": "carols10cents"
                                    }
                                },
                                {
                                    "createdAt": "2023-07-28T17:12:19Z",
                                    "bodyText": "Can you elaborate a bit on why you think your reservations are fair to the rest of the Rust community?\n\nIt is not a question of fairness. The current crates.io mechanics is a classic prisoner's dilemma. Either everyone plays \"fair\" and everyone has the best experience, some play fair while others go off and name-squat, and those playing \"fair' get the shaft, or everyone name-squats and gets a mediocre outcome. I have been on the receiving end of hitting reserved crates with unresponsive crate owners multiple times, which has motivated the decision to reserve early. Personally, when someone emails me and asks for me to transfer ownership of a reserved crate name, if I have no immediate plans to use it, I say yes. E.g. I transferred fury earlier this week.\nMy argument is, the solution is to change the mechanics to incentivize the behaviors you want to achieve. The crates.io team already has more than enough work to do, adding additional policy enforcement work does not seem productive.\n\nCarl currently has 288 crates, and 180 of them have a description explaining that these are reserved names\n\nOk, how about we break that down a bit, since you seem keen on making an example of me.\nI audited all the crates in my account. Out of 288, I found 44 crates that are reserved \"new names\" (accumulated over 6+ years). Out of all the others, they are either released crates or reserved crates within an active \"namespace\",  including tokio-*, tonic-, trace- / tracing-, http-, hyper-, warp-, futures-, mio-, async-, warp-. So, I will discount those since your stance is it is \"ok\" to reserve names within an active namespace.\nOut of the remaining crates, here is a list:\n\nassertive - Code is here: https://github.com/carllerche/assertive\nautomaton - Code is here: https://github.com/carllerche/automaton\nbuffers / bufs - Reserved for work in the bytes name family\ncache-pad - Never published, but the code lives in crossbeam-utils (and copied into Tokio).\ncodec - Inteded for the idea of Tokio codecs, which currently lives in tokio-util and was down prioritized.\ncoreio, std-more, std-net, netx - I revisit the idea of having a crate that batch utilities / code that I tend to write / depend on a lot. A \"kitchen sink\" std. I have code for this set to private in my Github.\nfury - A web framework that prioritizes max perf over good ergonomics. I have a sketch in my github (private), but since decided it was a bad idea. I handed off this crate earlier this week.\ngen - another name for codegen which actually has shipped.\ngodzilla / zilla - I don't actually remember what this was for.\nintrospect - reserved for extracting tracing-core's record API, this ended up being valuable\njanitor / seb / Sebastian / shipit / wizard - Over the years, I keep revisiting the idea of better automation for releasing batches of crates. Instead, I ended up collapsing Tokio into a single crate. I have private code in my github for this.\nkabuki - a light actor framework built on tokio, I have code in a private github repo\nmachines - an alt name for automaton\nminifmt - a lighter version of rustfmt for generated code, but dtolnay did it better. Code: https://github.com/carllerche/minifmt\nmutcell / mut-cell - A cell wrapper that enables pushing into a vec w/ &self.\npair - I don't remember what this was for\npoll / wepoll - Extracting the windows poll impl from mio\nreconnect - A library to wrap a socket to automatically reconnect, code is in github, never published\nsched - Extract Tokio's multi-threaded scheduler to a more generic thread pool. Never did it.\nresponse - This was intended to work within the http namespace\nsolar - A mini in-process database, I have some code, but never got it working.\nsyn-selector - A CSS like selector API to select syn nodes.\nthread-park - Extract Tokio's thread parking logic, never done.\ntoasty - Actively in progress, not going to say what it is yet.\ntongs / (tong) - Original name for loom, but loom is better. Also, I like trying to name crates to* (tokio, tower, tonic, ...)\ntopcoat - Actually in progress w/ a good amount of code in my github, toasty is a dependency for this, topcoat will come after.\ntry-clone - A TryClone trait\nval: ended up shipping as valuable.\nwatch-cell: Subscribe to change notifications for a cell.\nweb-app: Ended up calling it tower-web for now, but I had thought to rename tower-web to web-app if it became successful.\nwirs / wyrs - don't remember this.\n\nYou may ask, why don't I default to working in the public? Because, when I do, I get curious users trying to use the code / contribute/submit bugs way before I am ready for it. I mean, I might abandon the project. I also have experienced others trying to beat me to the punch and release an alternative before I finish what I am working on.\nAlso, as far as I know, crates.io does not have a mechanism that I can use to quickly release a crate. If there was, I probably would release a bunch of these. I also probably would release all the futures- crates, because I don't work I that namespace anymore.\nAgain, pretty much all of this becomes moot with some sort of crate namespacing.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1656032158",
                                    "author": {
                                        "login": "carllerche"
                                    }
                                },
                                {
                                    "createdAt": "2023-07-28T17:26:32Z",
                                    "bodyText": "To @carllerche's point: I brought this up in another discussion about namespacing but I quite like the approach that .NET has. You can reserve a prefix and delegate another prefix underneat. That would for instance permit tokio to reserve tokio-X. Any package that pre-dates the reservation can continue to publish, the prefix holder could make tokio-contrib-X then again open to anyone via delegation. I still believe that this is quite a pragmatic approach that would cut down on a lot of the preemptive reservations and wouldn't change anything about how the system otherwise operates.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1656056578",
                                    "author": {
                                        "login": "mitsuhiko"
                                    }
                                },
                                {
                                    "createdAt": "2023-07-28T19:37:32Z",
                                    "bodyText": "It's okay to reserve crate names with a prefix (foo-something) if you own the crate that is the prefix (foo).\n\n\n\nOn first glance this seems like a good idea... I'm wondering if there would be any drawbacks if we allowed this?\n\nThe downside to allowing any reserved crates is that crates-io search would need to learn to exclude or deprioritize them, since they're not useful to end users (yet), and create misleading noise. On lib.rs I've a rule that if a crate has \"reserved\" in its latest version, it's basically hidden. I also check whether src/lib.rs is empty or exactly matches the template from cargo new.\nOther than that I don't think there's a downside. It matches existing informal usage, and approximates namespacing that multi-crate project authors want to do already.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1656227395",
                                    "author": {
                                        "login": "kornelski"
                                    }
                                },
                                {
                                    "createdAt": "2023-07-28T22:02:25Z",
                                    "bodyText": "I agree with @carllerche's comment on the subject of incentives and namespaces: I think that the best approach is to reduce or remove the incentive to squat on crate names in the first place.\nThat being said, I'd like to raise a point that I didn't see raised in this thread: there's a lot of value in keeping the current crate removal policy of (mostly) \"there must be a valid court order signed by a judge in a jurisdiction that the Rust Foundation operates in\". Namely, it allows the already resource-limited crates.io team to avoid making difficult judgement calls or require them to determine the veracity of different claims and instead delegate to the existing institutions responsible for adjudicating such claims. While this significantly increases the effort for resolving disputes, I think that is a feature: we have evidence from other registries that tried to resolve disputes and did so in a poor or even destructive manner.\nI think that a policy that allows people to request removal of crates that they own and there are no dependents on said crate is reasonable from a safety perspective. That being said, crates.io is fundamentally infrastructure with no viral surface, so some of the harms discussed in prior comments (especially with regard to CoC violations) are significantly reduced in the context of a package registry. This not to say that the CoC shouldn't exist or apply, it's that crates.io can and should have a different set of priorities than an intentional social space.\nI apologize for not editing this comment better, but I'll end on this thought: it's not often that we're able to solve fundamentally social problems with a technological solution, but I think we have the opportunity to do so with namespaces. I don't want to waste that opportunity.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1656375119",
                                    "author": {
                                        "login": "davidbarsky"
                                    }
                                },
                                {
                                    "createdAt": "2023-07-29T00:01:23Z",
                                    "bodyText": "On thing that confuses me here is that while the policy is based on the GitHub and the PyPi policy, it explicitly names a decision making team (and not organisation, like e.g. GitHub or the Python Foundation). This policy explicitly names the crates.io team, that is - while documented - an informal group of people with no direct relationship with the service provider (the Rust Foundation).\nI did a policy review of both crates.io and other venues together with Mozilla legal in my core days and it was a deliberate decision to never have volunteers/externals in the deciding place for such decisions, so that in case of a disagreement, complains would need to be directed to the organisation.\nI also agree with @davidbarsky.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1656475312",
                                    "author": {
                                        "login": "skade"
                                    }
                                },
                                {
                                    "createdAt": "2023-07-29T04:28:02Z",
                                    "bodyText": "Some of the arguments here (e.g., @oxalica's concerns about 'fraudulent') are along the lines of \"well, you can't define a bright-line boundary between what's fraudulent and what isn't, so we shouldn't even bother\". But you can't have a bright-line definition of many things such as spamming, harassment, or \"overly sexual\" that are in the code of conduct, and the current policy says that content that violates the code of conduct will be removed. And I don't think anyone would be in favor of saying \"well, who's to say that uploading a crate named i_want_to_kill_so_and_so is harassment?\".\nSimilarly, namespacing doesn't solve the problem either, because now you have to worry about squatting namespaces. And it's worth pointing out that npm, which does support namespaces in the form of organizations, still disallows reserving package names.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1656549953",
                                    "author": {
                                        "login": "deifactor"
                                    }
                                },
                                {
                                    "createdAt": "2023-07-29T06:55:51Z",
                                    "bodyText": "I'm not saying this necessarily is, but any policy change here runs a significant risk of being perceived as a \"road to ruin is paved with good intentions\" kind of thing. I don't have any particular suggestions on how to structure this policy to mitigate this, but something is certainly lost when relaxing the policy from removal is only done for legal reasons. I do believe that the moderation team (or whichever team is responsible) should be empowered to act in legitimate cases of spam/abuse, but also that any policy allowing elective removal of packages runs a risk of being weaponized.\nI want to offer a portion of an alternative to an aggressive policy here. Squatting is as present as it is because of a prisoner's dilemma situation: even good actors are forced to either to early reserve package names or risk them being sniped while the package is being developed (potentially in the open) but before it's fully published. If you give the good actors a way to temporarily reserve names in a way that prevents it from getting \"stolen\" but also permits releasing the name if the project doesn't go anywhere or uses a different name, you allow the good actors to break out from the squatting arms race and reduce the overall amount of problematic squatting.\nThis also permits simplifying the policy somewhat, as it is no longer necessary to define a class of \"permitted squatting;\" instead, that class of use case should be served by the reservation system.\nIs it a perfect solution? No, of course not. It's only part of a larger process, and not even fully designed. Any fully objective system can be gamed. But I legitimately think that before striving to make it easier to \"punish\" the bad actors, it's important to give the good actors a clear way to not look like bad actors.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1656579161",
                                    "author": {
                                        "login": "CAD97"
                                    }
                                },
                                {
                                    "createdAt": "2023-07-29T07:08:28Z",
                                    "bodyText": "Some of the arguments here (e.g., @oxalica's concerns about 'fraudulent') are along the lines of \"well, you can't define a bright-line boundary between what's fraudulent and what isn't, so we shouldn't even bother\". But you can't have a bright-line definition of many things such as spamming, harassment, or \"overly sexual\" that are in the code of conduct, and the current policy says that content that violates the code of conduct will be removed.\n\nWell, my general point is introducing more vague rules besides CoC cannot help, but instead being non-consensus,  confusing and introducing more power when it's abused/misused1, by either other users or decision-makers, either maliciously or non-maliciously. Package removal should always be judged case-by-case or user-by-user. Also as mentioned in this comment, crates.io team - largely a team of volunteers - are not really competent for decision-making involving legal issues.\nThus I prefer the current policy over this RFC. That is:\n\nCoC as a guideline. (Maybe propose to update CoC if necessary. If any rule only fit here specifically but not CoC, it's probably not a good rule.)\nEveryone is believed to be in good faith by default. No removal by simply \"not-in-good-faith\" without illegal evidence (phishing \"attempt\"? malicious obfuscation? malicious reserve?), and no removal by violating future rules (like this RFC).\nPreserves the right for removal by flagrant CoC violation. Delegates the legal decisions to Rust Foundation, a competent legal entity. This basically implies case-by-case consideration, only on reported.\n\ncrates.io is a place for sharing information and works. IMO, there should be as little restrictions as possible. CoC already suffices. More rules = more censorship.\nBTW, package namescope deserves its own discussion outside this policy change RFC. However, disallowing package reservations without introducing a better solution cannot automatically fix the issue. #3463 (comment) is a good candidate solution to me.\nFootnotes\n\n\nWe can see a lot of false-take-down dramas on Youtube already, leveraging many individuals not having time and resources to take legal actions against companies. I'm afraid this RFC would cause more similar troubles by more vague-but-actionable rules. \u21a9",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1656581379",
                                    "author": {
                                        "login": "oxalica"
                                    }
                                },
                                {
                                    "createdAt": "2023-07-29T08:18:11Z",
                                    "bodyText": "crates.io is a place for sharing information and works. IMO, there should be as little restrictions as possible. CoC already suffices. More rules = more censorship.\n\ncrates.io is, specifically, a package manager for the Rust ecosystem. The distinction is important; dtolnay's blogging-via-docs.rs, while funny, is not really the sort of thing crates.io is meant for. Of course, that doesn't mean that I don't want dtolnay to blog, or even that I don't want him to blog using rustdoc, just that he can do it somewhere else.\nI also don't think that bringing up legal things is necessarily relevant; for some things (DMCA, trademark) it's a legal matter, and I agree that law-competent people should be involved in those cases, but there's nothing illegal about many of the behaviors that this RFC wants to ban, or even many behaviors that are currently banned (mass-claiming package names using a bot, creating a crate named fuck_you_[username] and filling the readme with how much you hate them, etc).",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1656593943",
                                    "author": {
                                        "login": "deifactor"
                                    }
                                },
                                {
                                    "createdAt": "2023-07-29T11:14:50Z",
                                    "bodyText": "is not really the sort of thing crates.io is meant for.\n\nI am struggling to think of a more succinct example of the problems that others upthread have pointed out. The idea that an unaccountable volunteer might have the power to act on this suggestion should be hair-raising to anyone who is interested in the subject.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1656707425",
                                    "author": {
                                        "login": "urschrei"
                                    }
                                },
                                {
                                    "createdAt": "2023-07-29T13:30:48Z",
                                    "bodyText": "I agree that promising to actively mediate disputes could turn out to be burdensome.\nI think it's possible to have the cake and eat it by phrasing it as reserving the right to remove crates or change owners. Even if the team doesn't do anything, that is still valuable, because the policy will define acceptable boundaries for people who are cooperative, and will create risk/uncertainty that will make violations less attractive.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1656731680",
                                    "author": {
                                        "login": "kornelski"
                                    }
                                },
                                {
                                    "createdAt": "2023-07-29T19:24:42Z",
                                    "bodyText": "We do not allow content or activity on crates.io that:\n\nviolates the [Code of Conduct](https://www.rust-lang.org/policies/code-of-conduct) of the Rust project\n\nBy this logic I cannot use crates because I harass minorities and mentally ill people online? Tough fucking tits, I will anyway.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1656845801",
                                    "author": {
                                        "login": "0x8008"
                                    }
                                },
                                {
                                    "createdAt": "2023-07-29T22:33:53Z",
                                    "bodyText": "is not really the sort of thing crates.io is meant for.\n\nI am struggling to think of a more succinct example of the problems that others upthread have pointed out. The idea that an unaccountable volunteer might have the power to act on this suggestion should be hair-raising to anyone who is interested in the subject.\n\nI think that saying \"crates.io is only meant to host crates that are actually meant to be used either as binaries or as libraries in Rust code\" is a reasonable thing to say. I think \"off-topic\" is not the right way to phrase it, but it seems clear to me that if I were to use crates.io as a binary file host by shoving my binary blobs into a crate that does nothing and uploading them (as opposed to a crate that's legitimately intended to be used but contains binary blobs that are necessary for its execution), that's absolutely against what the service is for, in the same way that me deciding to blogpost about my day in the issues of this repo would be inappropriate.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1656936140",
                                    "author": {
                                        "login": "deifactor"
                                    }
                                },
                                {
                                    "createdAt": "2023-07-30T02:50:34Z",
                                    "bodyText": "is not really the sort of thing crates.io is meant for.\n\nI am struggling to think of a more succinct example of the problems that others upthread have pointed out. The idea that an unaccountable volunteer might have the power to act on this suggestion should be hair-raising to anyone who is interested in the subject.\n\nI think that saying \"crates.io is only meant to host crates that are actually meant to be used either as binaries or as libraries in Rust code\" is a reasonable thing to say. I think \"off-topic\" is not the right way to phrase it, but it seems clear to me that if I were to use crates.io as a binary file host by shoving my binary blobs into a crate that does nothing and uploading them (as opposed to a crate that's legitimately intended to be used but contains binary blobs that are necessary for its execution), that's absolutely against what the service is for,\n\nThis actually happens in practice quite a bit. Here's one example:\nOne of my projects currently downloads a 700 MB file, but it's been suggested we use crates.io instead. So that would mean releasing 70 crates like (project)-parameters-00..70. I personally think that's excessive use, but it would remove a single point of failure on our download server.\nBut a related project uses a similar strategy with 6 sub-crates for 52 MB of data, and includes code for an API to use the data for cryptographic operations. I don't think that's excessive use, but I can understand how someone else might.\nIf a single volunteer crates.io team member decided that 6 data crates was excessive use, that would break a lot of crates. So I'd like some safeguards, for example:\n\na requirement for a consensus team decision before making breaking changes like removals, unless specific criteria for urgency are met\nan appeals process to the team, and externally (to the Rust moderation team, and maybe the Foundation?)\ndecisions must be made publicly available, unless there's a legal or privacy reason not to\n\nThe requirements for consensus and transparency provide accountability for decisions. And if there are problems with some decisions, other members of the Rust project can provide advice, or make changes to the rules or the team.\nI think this accountability would help resolve some of the concerns around controversial \"grey area\" decisions, while still allowing routine decisions to be made quickly.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1657002089",
                                    "author": {
                                        "login": "teor2345"
                                    }
                                },
                                {
                                    "createdAt": "2023-07-30T18:07:26Z",
                                    "bodyText": "(first intentional post on this issue, although I think GitHub \"helpfully\" posted my pending review somewhere along the line, so disclosures: I'm a member of the crates.io team and on staff at the Foundation, but I'm speaking for myself here)\nSince pretty much all the recent discussion here is around crate squatting policy, I'm really just going to address that. I'm +1 on anything I don't mention below.\nFirst things first: I'm a big proponent of namespacing. There are various forms this could take (yes, I'm aware of the existing RFC), but there's plenty of prior art (PHP, Node, Go) that suggests this mostly works out OK in practice.\nSince Rust doesn't live in a namespaced world right now, though, we have to deal with what we have. And, honestly, what we have right now is a mess \u2014 call it the prisoner's dilemma, or tragedy of the commons, or whatever story you prefer, but those feel like excuses for people trying to land rush to claim the \"good\" names, regardless of whether they have an immediate use for them or not.\nThat behaviour doesn't feel like it lives up to the standards the Rust community wants or deserves when utilising a common space.\nWhen it comes to crate naming policy, there are two key points I keep coming back to:\n\nI fundamentally don't understand why someone who is the first to \"reserve\" a name should have the perpetual right to it. To me, it feels like the first person to actually use a name should be the person who gets to use and shepherd it.\nA lot of this discussion is framed in terms of ownership \u2014 and that's also the term this RFC uses \u2014 but I don't think that's the appropriate term, and we should think about this more in terms of stewardship, since the flat namespace is a common community resource.1\n\nGiven that, I think this is part of the draft policy logically follows:\n\nWe do not allow content or activity on crates.io that:\n[...]\nexists only to reserve a name for a prolonged period of time (often called \"name squatting\") without having any genuine functionality, purpose, or significant development activity on the corresponding repository\n\nAs I said upthread, defining what the prolonged period would be would probably be helpful, we could probably provide some additional tooling to make it easier for people to release crate names back to the community, and I don't think this should extend to featureful but abandoned crates without considerable further thought and care to prevent supply chain attacks and bad actors doing bad things. But that doesn't mean the policy shouldn't handle this more clearly, and \u2014 for me \u2014 this strikes the right balance.\nFootnotes\n\n\nI might end up writing a blog post about this in more detail, but here's the thought experiment that I keep coming back to: C has been around for over 50 years, and I think we all agree that we want Rust to have that level of success and longevity. If networked package systems had existed in the 1970s, and a bunch of Bell Labs employees had reserved names in perpetuity, what effect would that have had on the C ecosystem? I can't imagine it would have been positive. \u21a9",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1657233027",
                                    "author": {
                                        "login": "LawnGnome"
                                    }
                                },
                                {
                                    "createdAt": "2023-07-30T18:55:33Z",
                                    "bodyText": "@LawnGnome I think you do hit the problem I have with the discussion around name squatting on the head:\n\nTo me, it feels like the first person to actually use a name should be the person who gets to use and shepherd it.\n\nThe issue I see is that what the people behind crates.io think of use and what is used out there could be at odds with the stability guarantees of crates.io. I don't think anyone would argue that a 0.1.0 or 0.0.0 release of a crate with an empty source file, or the default main/lib would be anything but a placeholder. But beyond that? To me it gets very hairy very fast. As carl's comment above showed is that any departure of the status quo is not only easily gamed, it is also (IMO) quasi impossible to uphold the idea of crates.io being an immutable store for legitimate code and allow the removal or change of existing crates.\n\nAbove you replied that in 25 months you have received \"162 [messages] related to transfer requests for squatted crates, or more general complaints about users who have published placeholder crates\" so about two peer week. Is this the \"unsustainable levels\" the RFC claims? I am doing my best to not sound sarcastic, but why not be frank and spell out what exactly the issue is? An analysis of short/common names that are 'squatted'? Even better when it is determined if the owner is still active and/or willing to transfer ownership? While it seems that most are aware in the rust ecosystem that crates.io has a landgrab-style policy, it has not stopped AFAIK the ecosystem to grow just fine? The complaints about the lack of namespacing are just as old as the current policy I am sure.\n\n\nThat behaviour doesn't feel like it lives up to the standards the Rust community wants or deserves when utilising a common space.\n\nHow about giving that community the tools needed to utilize that common space effectively? If we assume that most situations of 'name squatting' is not malicious, but purely because you'd rather not have a name grabbed out under you then why not try and help alleviate this situation? Allow people reserving crate names for a few weeks, where if they don't publish a version in that time it goes back to the common pool. And for those crates that have already been claimed, allow abandoning the name so that the crates.io team can then handle the successor (and whatever all of that entails?).\nI'd consider this to be much more in spirit of a Rust Community, it'd also conserve the crates.io team as stewards of their part of the project rather than being the decision makers of what code is 'unacceptable' w.r.t. squatting.\n\n\nhere's the thought experiment that I keep coming back to\n\nRegarding your thought experiment: In that world, code from the 1970s that has compiled then, would still compile today. Because the platform upheld its main guarantee: Just be immutable. That some arbitrary byte sequences can't be used to address code is a tradeoff sure, but I don't think its one that is worth losing immutability over.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1657241720",
                                    "author": {
                                        "login": "TheNeikos"
                                    }
                                },
                                {
                                    "createdAt": "2023-07-30T23:25:38Z",
                                    "bodyText": "If networked package systems had existed in the 1970s, and a bunch of Bell Labs employees had reserved names in perpetuity, what effect would that have had on the C ecosystem?\n\nC does have a bunch of reserved names. In typical C fashion, this reservation is completely unenforced, and avoiding the potential disastrous fallout of name collisions falls entirely to the developer.\nC reserved names\n\nNames with external linkage beginning with an underscore\nNames beginning with an underscore followed by a capital letter or another underscore\nNames beginning by the standard library\nNames beginning with is or to followed by a lowercase letter\nNames beginning with str or wcs followed by a lowercase letter\nNames beginning with cr_\nNames beginning with atomic_ or memory_ followed by a lowercase letter\nNames beginning with cnd_, mtx_, thrd_ or tss_ followed by a lowercase letter\nNames beginning with int or uint and ending with _t\nNames beginning with E followed by a number or uppercase letter\nNames beginning with FE_ followed by an uppercase letter\nNames beginning with INT or UINT and ending with _MAX, _MIN, or _C\nNames beginning with LC_ or FP_ followed by an uppercase letter\nNames behinning with MATH_ followed by an uppercase letter\nNames beginning with SIG or SIG_ followed by an uppercase letter\nNames beginning with TIME_ or ATOMIC_ followed by an uppercase letter\n\nAs of C23 most of these names that don't start with an underscore are merely \"potentially reserved,\" meaning that your program is guaranteed to actually still work if your implementation doesn't provide functionality with that name, and name clashes are merely not portable rather than unbound UB.\nGNU C additionally reserves\n\nNames ending with _t\nNames beginning with mem followed by a lowercase letter\nNames prefixed with d_, l_, F_, O_, S_, or gr_\nNames suffixed with _MAX\nNames prefixed with pw_, sa_, SA_, st_, tms_, c_, V, I, O, or TC\nNames prefixed with B followed by a digit\n\n\n\nThis might not be as impactful since not just anybody could reserve identifier prefixes across all user programs, but there's certainly no lack of names reserved by the early C definers. And it's not like they're particularly undesirable names, either; only the first 6 characters are guaranteed to be significant for externally linked names! (Prior to C99, which raised this to 31 significant characters.)\nA better analogy would be linux system package managers, which started to exist around 1993. And even then isn't that great of an analogy given the well documented difficulty of getting C libraries to play well together. Name collisions between libraries in C is far from a nonissue.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1657292520",
                                    "author": {
                                        "login": "CAD97"
                                    }
                                },
                                {
                                    "createdAt": "2023-07-31T05:57:06Z",
                                    "bodyText": "I want to make a programming language that compiles to Rust and want to use crates.io to store packages of this language. The idea is that both Rust code can depend on crates written in this language, and the language can depend on packages written in Rust.\nDoes this policy allows that?",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1657694246",
                                    "author": {
                                        "login": "dlight"
                                    }
                                },
                                {
                                    "createdAt": "2023-07-31T10:10:10Z",
                                    "bodyText": "since you seem keen on making an example of me\n\n@carllerche if it came off like this then I would like to apologize. this was certainly not my intention. I was trying to provide some context, but apparently that was not as helpful to the conversation as intended.\nI think with the justifications that you have given above the crates.io team would probably agree to the majority of them.\nI want to reiterate that it is absolutely not our intention to take crate names away from anyone with a good reason for keeping them and we would not do so without contacting the owners first. We do however want to clarify the rules so that in situations like with https://crates.io/users/swmon, https://crates.io/users/marlonhanks and https://crates.io/users/andres-roman we are allowed to remove these spam crates without having to wait for weeks for a response from intentionally malicious users. If anyone has suggestions on how we can phrase this better in the proposal, please do let us know!\nTechnically, with the Code of Conduct declaring spam as \"not welcome\", we could already flag such crates as spam and remove them, but that is quite open to interpretation and part of the reason for this RFC is to make these \"open for interpretation\" parts a bit more explicit.\n@skade I'm not sure if you are referring to a specific part of the proposal. I mostly replaced all mentions of the PyPI team with the crates.io team and the Python Foundation with the Rust Foundation, so there shouldn't be too many differences in that regard compared to the policy that the Python Package Index is using.\n@dlight if the packages that you upload to crates.io are usable from Rust and cargo then I don't see a reason why they shouldn't be allowed :)",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1658072721",
                                    "author": {
                                        "login": "Turbo87"
                                    }
                                },
                                {
                                    "createdAt": "2023-07-31T11:13:37Z",
                                    "bodyText": "We do however want to clarify the rules so that in situations like with crates.io/users/swmon, crates.io/users/marlonhanks and crates.io/users/andres-roman we are allowed to remove these spam crates without having to wait for weeks for a response from intentionally malicious users. If anyone has suggestions on how we can phrase this better in the proposal, please do let us know!\n\nI can see how this would be a problem, particularly if there is a larger volume of spam, or it becomes automated. I'm happy to help re-phrase the rules, but I'm missing some context:\n\nwhat is the current volume of spam? How does it impact the team and the wider ecosystem?\nwhat risk or harm would be prevented by removing crates sooner, rather than waiting a few weeks to get no response?\n\nEdit: it might help to put some of this information in the RFC, so people who read it can see why the changes are justified.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1658163696",
                                    "author": {
                                        "login": "teor2345"
                                    }
                                },
                                {
                                    "createdAt": "2023-07-31T16:14:35Z",
                                    "bodyText": "what is the current volume of spam? How does it impact the team and the wider ecosystem?\n\nA fourth (if I had to guess off the top of my head) of the crates I've tried to start up have been taken on crates.io, I'd definitely say that's impacting the ecosystem. Not to mention that I end up cargo adding a crate that I think is the one I want, when in reality it's one with a slightly different name because of squatting. Not a great UX.\n\nwhat risk or harm would be prevented by removing crates sooner, rather than waiting a few weeks to get no response?\n\nUsers would feel dissatisfied by the Rust ecosystem, and wouldn't feel like it would be as welcoming. All they see is a crate that hasn't been used (or developed on at all) in months or even years, and nothing being done to prevent it. If they wait a few weeks only to get no response, that will only hurt it even more.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1658706972",
                                    "author": {
                                        "login": "orowith2os"
                                    }
                                },
                                {
                                    "createdAt": "2023-07-31T17:48:44Z",
                                    "bodyText": "there's a lot of value in keeping the current crate removal policy of (mostly) \"there must be a valid court order signed by a judge in a jurisdiction that the Rust Foundation operates in\". Namely, it allows the already resource-limited crates.io team to avoid making difficult judgement calls or require them to determine the veracity of different claims and instead delegate to the existing institutions responsible for adjudicating such claims.\n\nThis seems like such a natural solution for us programmers. Don't over-attribute responsability.\nThere is probably something to be said about name-squatting, so a change in policy is warranted, but you will not resolve the problem of people wanting to develop in private as some others have pointed out. (That is not without spreading the resources of the crates' team thin).\nThe current proposal is vague and does not seem ready to be implemented. There are no warranties of good faith usage of such vague proposals in 5 or 10 years. This is how distributed systems progressively get more and more centralized.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1658878600",
                                    "author": {
                                        "login": "Moti-Velz"
                                    }
                                },
                                {
                                    "createdAt": "2023-08-01T08:15:20Z",
                                    "bodyText": "what is the current volume of spam? How does it impact the team and the wider ecosystem?\n\nA fourth (if I had to guess off the top of my head) of the crates I've tried to start up have been taken on crates.io, I'd definitely say that's impacting the ecosystem. Not to mention that I end up cargo adding a crate that I think is the one I want, when in reality it's one with a slightly different name because of squatting. Not a great UX.\n\nYou're absolutely right, this is significant usability issue. Could it be tackled by having a better search interface, or external crate recommendation or reputation systems?\nIt's also a potential security issue, if someone name-squats a similar name, and provides a compatible API, but is has different underlying behaviour. It doesn't even have to be malicious - forks can fail to fix bugs or introduce subtle behaviour changes.\nBut it's tricky to deal with the those kinds of security issues at the registry level without centralising control. Instead, we can have robust security reporting and warning systems.\n\n\nwhat risk or harm would be prevented by removing crates sooner, rather than waiting a few weeks to get no response?\n\nUsers would feel dissatisfied by the Rust ecosystem, and wouldn't feel like it would be as welcoming. All they see is a crate that hasn't been used (or developed on at all) in months or even years, and nothing being done to prevent it. If they wait a few weeks only to get no response, that will only hurt it even more.\n\nIf the issue has already existed for months or years, what is the additional harm of waiting a few weeks to make sure the removal is justified?\nThis is a social engineering tradeoff, because we're trying to balance two harms:\n\nmistaken removal which causes distrust in the decision-makers and the overall ecosystem reliability\nslow removal which causes usability issues and distrust in the ecosystem packages\n\n@orowith2os what is the minimum delay that gives people enough time to make sure the removal is justified? For some volunteers, anything shorter than 1 week can become a difficult deadline to meet.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1659803190",
                                    "author": {
                                        "login": "teor2345"
                                    }
                                },
                                {
                                    "createdAt": "2023-08-01T17:18:46Z",
                                    "bodyText": "You're absolutely right, this is significant usability issue. Could it be tackled by having a better search interface, or external crate recommendation or reputation systems?\n\nI'd love it if Rust were to separate itself from crates.io more - i.e. cargo add dependency@crates.io. Then users could choose their own repositories that they trust, and it would possibly take the burden off of the crates.io team a bit. There are also a few more suggestions, but that would require an RFC of its own.\n\nwhat is the minimum delay that gives people enough time to make sure the removal is justified? For some volunteers, anything shorter than 1 week can become a difficult deadline to meet.\n\nTwo weeks to a month would be ideal, but I understand if it takes longer; not all of us have so much free time. This is a complicated issue, and imo caused by the centralization of the Rust ecosystem.\nHaving things more like Go, where you can easily specify dependencies from other repositories, might help. Then you can have crates.io be two things - a crates repository, and a search index for other (as appropriate) crate repositories. Again, needs an RFC of its own.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1660771849",
                                    "author": {
                                        "login": "orowith2os"
                                    }
                                },
                                {
                                    "createdAt": "2023-08-01T22:52:03Z",
                                    "bodyText": "Many rules seem reasonable and obvious.\nBut some of them are strange and incomprehensible, leaving a \u201cbackdoor\u201d for decisions\nFor example:\n\nis false, inaccurate, or intentionally deceptive information and likely to adversely affect the public interest (including health, safety, election integrity, and civic participation)\n\nHow and who been determined what\u2019s is false information? It\u2019s statement most unclear. What if it's obvious to me and most of the authorities in the Rust community that the crates.io team says it's not true? Write down on paper how this will be determined. Because so crates.io has the right to remove packages for no clear reason to the owner of that package or for personal reasons from someone at crates.io\nNotes on conversations above:\nPeople repeat it many times: flat namespace.\nIt might be nice to have namespaces for things like reservation in my own namespace, if we had them we wouldn't have this holywar\n@Turbo87 I just trying to understand you, why your takes so aggressive? Editing comments which another person said, deleting your own to lose context\nPlease be kind and courteous. There\u2019s no need to be mean or rude. - Rust Code of Conduct 2023",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1661205616",
                                    "author": {
                                        "login": "Reglament989"
                                    }
                                },
                                {
                                    "createdAt": "2023-08-01T23:01:09Z",
                                    "bodyText": "I think @teor2345's list of safeguards in this comment is absolutely a good idea.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1661214481",
                                    "author": {
                                        "login": "deifactor"
                                    }
                                },
                                {
                                    "createdAt": "2023-08-01T23:14:21Z",
                                    "bodyText": "People repeat it many times: flat namespace.\nIt might be nice to have namespaces for things like reservation in my own namespace, if we had them we wouldn't have this holywar\n\n@Reglament989 this is a more appropriate place for namespace-related discussion: #3243",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1661226527",
                                    "author": {
                                        "login": "tarcieri"
                                    }
                                },
                                {
                                    "createdAt": "2023-08-02T00:54:15Z",
                                    "bodyText": "Having things more like Go, where you can easily specify dependencies from other repositories,\n\nCargo has always supported dependencies on git repositories, as well as supports alternative registries. You can change what registry is used by default when not specifying a registry, either on a per workspace or a global basis.\nThe only limitation per say is that crates-io is the default registry used if you don't specify an alternate default, and crates-io doesn't accept packages with cargo dependencies on crates not available through crates-io.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1661301829",
                                    "author": {
                                        "login": "CAD97"
                                    }
                                },
                                {
                                    "createdAt": "2023-08-02T01:30:35Z",
                                    "bodyText": "Cargo has always supported dependencies on git repositories,\n\nI said \"easily\". Ideally I would run cargo add https://website.com/git/repo@1.0 and it would add it with all the necessary details automatically. Afaik, that can't be easily done.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1661328744",
                                    "author": {
                                        "login": "orowith2os"
                                    }
                                },
                                {
                                    "createdAt": "2023-08-02T03:00:07Z",
                                    "bodyText": "Good to see someone competent put in the hard work of addressing name squatting (and so much more). I had a go at it (just name squatting alone) about a year ago and immediately got myself into insufferable legalese swamp. Ended up admitting defeat and abandoning the effort, which was the ultimate irony. But I digress.\nWhat I want to say is that as someone who has actually tried doing a small subset of this before, I can appreciate the enormous difficulty in writing a ruleset \"appropriately strict\" (as in not overreaching, yet enforceable). Although the proposal has plenty of room for improvement (as you would expect from such a daunting initiative), it's unquestionable that it was written in good faith and represents a very respectable amount of hard work. I feel like it's important for us in the community to explicitly recognise the effort regardless of whether this policy update goes through.\nAnyways, I wrote this because I saw the number of downvotes (83 at the time of writing) is much more than the number of people who meaningfully engaged in the conversation (37 at the time of writing). Reminds me of a line from Django Unchained:\n\nWell fuck all y'all! I'm going home! You know, I watched my wife work all day gettin' thirty bags together for you ungrateful sons of bitches! And all I can hear is criticize, criticize, criticize! From now on, don't ask me or mine for nothin'!",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1661416120",
                                    "author": {
                                        "login": "cyqsimon"
                                    }
                                },
                                {
                                    "createdAt": "2023-08-02T05:15:39Z",
                                    "bodyText": "I said \"easily\". Ideally I would run cargo add https://website.com/git/repo@1.0 and it would add it with all the necessary details automatically. Afaik, that can't be easily done.\n\ncargo add --git https://website.com/git/repo --tag 1.0 works, (assuming the 1.0 tag points at the checkout you want), though IMO cargo add https://website.com/git/repo should activate some \"that's not a package name, but it does look like a git remote\" logic (or at least say \"you probably want --git\" in the error message).",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1661508271",
                                    "author": {
                                        "login": "deifactor"
                                    }
                                },
                                {
                                    "createdAt": "2023-08-02T08:29:46Z",
                                    "bodyText": "it's unquestionable that it was written in good faith\n\nI think the title still looks like it's not honestly communicating what this RFC is about. It doesn't mention name squatting or the changes to acceptable content.\nI already mentioned this a week ago: #3463 (comment).",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1661745152",
                                    "author": {
                                        "login": "tbu-"
                                    }
                                },
                                {
                                    "createdAt": "2023-08-02T11:49:11Z",
                                    "bodyText": "I hope this doesn't come as unprofessional, but how can the rust foundation not see what they are doing to the community, or do they not care? Since rust is what it is because of the community, without crates like tokio, diesel, sqlx, axum, rayon, serde, anyhow and many others, rust wouldn't be anything close compared to what it is now, look at javascript, it's not a well designed language, but it is very popular because of its community.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1662065960",
                                    "author": {
                                        "login": "PaulDotSH"
                                    }
                                },
                                {
                                    "createdAt": "2023-08-02T13:11:59Z",
                                    "bodyText": "As someone who has written and worked on statutes and policies in some other contexts, great job! This RFC captures a lot of details in a mostly clear and concise way.\nOn the topic of crate namespaces I agree that this RFC (including squatting rules) is still relevant even if namespaces are implemented, though the squatting rules would then need to be applied mainly to namespaces rather than crates. It is probably worth considering how that would work, but not relevant to this RFC.\nThe only part imo. that drags it down is the list of disallowed content or activity. The intention does come through and looks quite reasonable, but the level of detail and redundant entries/rules make it both intimidating and confusing where it doesn't need to be. (I suspect this, as much as the controversy of crate squatting solutions, has brought out this amount of worry and discussion.)\nI'll have a try at writing an alternate listing with the same meaning in fewer and shorter rules later tonight, for your consideration.\nIf you find that a shorter listing cannot fully explain the distinctions you intend I suggest you give some examples or write a FAQ instead of making the rules too detailed, to both give the policy better readability and make it better prepared for problems the crates.io team will face in the future.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1662188789",
                                    "author": {
                                        "login": "sidju"
                                    }
                                },
                                {
                                    "createdAt": "2023-08-02T13:18:39Z",
                                    "bodyText": "the squatting rules would then need to be applied mainly to namespaces rather than crates. It is probably worth considering how that would work\n\n@sidju per #3243, which is arguably the most promising RFC for adding namespaces, there is no distinction: namespaces are crates in that scheme.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1662199355",
                                    "author": {
                                        "login": "tarcieri"
                                    }
                                },
                                {
                                    "createdAt": "2023-08-02T14:50:09Z",
                                    "bodyText": "@PaulDotSH This RFC is coming from the crates.io team, which is part of the Rust Project. The foundation does not open, influence, or make decisions around RFCs. This is purely a project matter. We will continue to provide support to the crates.io team in whatever form they need, but policies like this are entirely at their discretion.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1662354787",
                                    "author": {
                                        "login": "sgrif"
                                    }
                                },
                                {
                                    "createdAt": "2023-08-03T19:11:50Z",
                                    "bodyText": "I hope this doesn't come as unprofessional, but how can the rust foundation not see what they are doing to the community, or do they not care?\n\nThis RFC was not proposed by the Foundation.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1664495495",
                                    "author": {
                                        "login": "Jules-Bertholet"
                                    }
                                },
                                {
                                    "createdAt": "2023-08-13T15:37:59Z",
                                    "bodyText": "I think that download counts for crates are (mostly) useless since one genuine build system with bad caching can inflate downloads. I think this would fall more in line with API abuse, where for example a given host could be banned for repeatedly requesting crates when they should be properly caching their downloads.\n\nMostly useless? It's a metric that many people use when deciding between package A + B. How do you determine the defacto standard when selecting one? If you aren't close to the scene, you might not know.\nIt's even a sortable field on crates.io that I am sure if someone were to go \"hmm I need a global event bus, let me search on crates\" they would subsequently make a decision based on downloads. \"Oh this one has 100k+ and the rest have <1000? This one must be the one to use!\"\nYou can deny this all you want but it is absolutely the reality, and how tech-tubers and other people compare when spreading the word.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1676394699",
                                    "author": {
                                        "login": "ewrogers"
                                    }
                                },
                                {
                                    "createdAt": "2023-08-13T15:41:53Z",
                                    "bodyText": "This RFC was not proposed by the Foundation.\n\nThe problem isn't who is gets proposed by, it's who gets to enforce it. And I think the Rust Foundation has shown that they are hardly impartial, unbiased, or trustworthy with the series of events that have happened over the years. Funny that election integrity would be mentioned when they actively went against their own democratic vote results to do what they wanted.\nThe fact that a programming language has a PROBLEMATIC_CONSTANTS section explicitly defined because, god forbid, someone use 0x8008135... just goes to show the focus on absurd things. It sounds like a very close-knit group of people who think in a certain mentality that would enforce the rules in a largely biased way.\nThe same kind of mentality that specifically uses words like \"good faith\" (vague, and only used as a cop-out by people in a certain political slant) and cites things like \"election integrity\" and \"medical information\" in the context of \"public good\" is a very loud dogwhistle.\nMy point is that while the Rust Foundation may not have written this proposal, I do think it aligns with their views and how they would then moderate based on it would also reflect that. Programming and a package manager does not need to be the battleground for political and ideological holy wars.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1676395542",
                                    "author": {
                                        "login": "ewrogers"
                                    }
                                },
                                {
                                    "createdAt": "2023-08-13T15:48:37Z",
                                    "bodyText": "I hope this doesn't come as unprofessional, but how can the rust foundation not see what they are doing to the community, or do they not care? Since rust is what it is because of the community, without crates like tokio, diesel, sqlx, axum, rayon, serde, anyhow and many others, rust wouldn't be anything close compared to what it is now, look at javascript, it's not a well designed language, but it is very popular because of its community.\n\nIf those authors disagree with the proposal and rules that will inevitably change, they could yank every version in protest. Or I guess if they want their repo nuked, just put some example on \"how to use tokio to tally election results\" or \"using diesel to store vaccine side effects\" and it will be subsequently nuked.\nThere will be at least one maintainer of a very popular crate that feels this way and causes a left-pad situation (or it happens from overzealous enforcement). Or does it become \"we can't delete this package despite it potentially violating the rules because it's very mainstream\"? Selective enforcement decisions based on ecosystem ripple effect? Doesn't sound fair to begin with.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1676397070",
                                    "author": {
                                        "login": "ewrogers"
                                    }
                                },
                                {
                                    "createdAt": "2023-08-13T16:03:30Z",
                                    "bodyText": "Many rules seem reasonable and obvious. But some of them are strange and incomprehensible, leaving a \u201cbackdoor\u201d for decisions For example:\n\nis false, inaccurate, or intentionally deceptive information and likely to adversely affect the public interest (including health, safety, election integrity, and civic participation)\n\nHow and who been determined what\u2019s is false information? It\u2019s statement most unclear. What if it's obvious to me and most of the authorities in the Rust community that the crates.io team says it's not true? Write down on paper how this will be determined. Because so crates.io has the right to remove packages for no clear reason to the owner of that package or for personal reasons from someone at crates.io\n\nI would argue this is by design. The challenging of certain things is not allowed and even if you do not do it specifically, you can be guilty by association because \"you should know better\". Squeaky wheels, and all that.\nFor example, I make a library in 2015 for mocking news/tweets similar to faker in JS. My library is focused on headlines, content, and things like that so I name my library fake-news. Great for unit testing, UI mockups, you name it. No one bats an eye, tons of people start using it.\nThen suddenly in $CURRENT_YEAR, people start complaining that my library name triggers them. That I must have meant something else when I made it, and \"why did I pick this name anyways?\". People call for my library to be renamed out of \"bad faith\" and \"he knew what he was doing\". Others call for it to be removed entirely because \"there's no place for misinformation\".\nThe entire point is that things change. Innocent things can become incredibly controversial (almost over night at times) and now that author has to either be forced to rename their package, or even have it deleted? Why? Because crates.io should be some kind of arbiter of \"truth\" and \"good faith\"?",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1676400269",
                                    "author": {
                                        "login": "ewrogers"
                                    }
                                },
                                {
                                    "createdAt": "2023-08-13T16:13:34Z",
                                    "bodyText": "@ewrogers Please refrain from making consecutive comments; it's trivial to combine them into one. Everyone subscribed to this issue gets an email for every comment you make.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1676402510",
                                    "author": {
                                        "login": "jhpratt"
                                    }
                                },
                                {
                                    "createdAt": "2023-08-13T16:25:02Z",
                                    "bodyText": "The Foundation does not enforce crates.io policies.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1676404911",
                                    "author": {
                                        "login": "ChrisDenton"
                                    }
                                },
                                {
                                    "createdAt": "2023-08-19T06:13:53Z",
                                    "bodyText": "@ewrogers Please refrain from making consecutive comments; it's trivial to combine them into one. Everyone subscribed to this issue gets an email for every comment you make.\n\nMy apologies, I got a bit \"over-passionate\" in here with the back to back comments. It is just a bit frustrating seeing one of the best programming languages in the last decade get mired with self-inflicted drama to no real benefit.\n\nThe Foundation does not enforce crates.io policies.\n\nWhile that's technically true, we're getting into hair-splitting tactics in order to defend a very nebulous policy. You can go to the RustLang's Goverance page and see the Teams very clearly defined here.\nIt is no secret that the Rust Foundation works closely with the Rust Project (and teams mentioned above). Funding has to come from somewhere for initiatives and, in return, the Rust Project gives feedback to the Rust Foundation about what the community wants.\nThis is very clearly a symbiotic, bidirectional relationship. You would be hard-pressed to convince the community that these two groups work in isolation and that policy changes between the two \"absolutely would not\" affect the other. Especially not after the recent RustConf debacle, resignations, mod team disenfranchisement, trademark issues, comment editing...\nEven in a perfect world where there was no bad juju swirling, moderation and review for additional rules will absolutely require more people working that process and raise additional questions:\n\nAre these moderators/reviewers paid or volunteer?\nIf paid, who is paying them?\nHow much additional financial burden is that on the team/foundation?\nIs that really the most impactful use of resources?\nWhat does the review process look like?\nCan it be disputed or appealed?\nCan it be reversed if found to be done in error?\nWhat happens if reversed, is everything restored or do things like download stats reset?\nWhat happens if removed, effectively a supply chain attack downstream? (see: left-pad)\n\nIt also seems like the lack of proper namespacing is the biggest problem with crates.io today. Most of these issues could be resolved after that's fixed, or at least be far less problematic.\nI'm really confused as to why something like a policy change (with controversial rules) would be a higher priority than fixing the flat namespace issue that benefits everyone. It's almost like Rust groups are asking for (more) trouble in the community instead of fixing what's glaringly absent.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1684850962",
                                    "author": {
                                        "login": "ewrogers"
                                    }
                                },
                                {
                                    "createdAt": "2023-08-21T15:57:04Z",
                                    "bodyText": "In light with the recent serde event and this discussion on zulip it would be good to have a policy on embedding executable binaries in crates, especially on non-portable ones.\nThis probably needs several criteria\n\npublished files must be cross-platform formats or at least compatible with cross-compilation.\ne.g. target-specific header files are fine, target-specific binary libs are not.\nThis avoids scalability problems of having to download large binaries for dozens of targets even though the user might only need the one for his current target. E.g. an arm-linux user shouldn't be burdened with downloading x86-windows, arm-windows, arm-apple, etc. etc. files thrown into a crate.\nopen question: are firmware, bootloader and similar blobs allowed? if yes, they probably should go into target-specific crates so they can be optional dependencies\nnon-executable, cross-platform binary artifacts shouldn't exceed the source code size by orders of magnitude. E.g. a few PNGs are fine, gigabytes of game assets or machine learning weights are not.\n(I think this is already covered by existing points, I'm just restating it here for context)\neven when portable, any executable code (anything on the chomsky hierarchy, yes including finite state machines) whose outputs feed into non-sandboxed execution on a host machine should not be shipped in binary form. Crates that have reasons to violate this rule should clearly document that and should have documented procedures to reproduce or check provenance of the binaries.\nThis allows fonts, SVGs containing animation code or WASM blobs that don't have their output executed.\nThis means if a crate ships executable binaries that are not auditable this would be a reason for removal. If they are auditable but still somewhat opaque (e.g. small distributable pieces from a proprietary SDK) this would be generally discouraged but not reason for immediate removal and might be flagged as such in future security information.\nThe stance could change if we had reproducibility infrastructure, e.g. as in this proposasl",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1686596458",
                                    "author": {
                                        "login": "the8472"
                                    }
                                },
                                {
                                    "createdAt": "2023-08-21T16:42:25Z",
                                    "bodyText": "That seems like a big policy decision all on its own. Maybe it needs a separate RFC to work out all the details.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1686668548",
                                    "author": {
                                        "login": "ChrisDenton"
                                    }
                                },
                                {
                                    "createdAt": "2023-08-21T18:10:29Z",
                                    "bodyText": "The RFC could list that as an open question/potential future change then.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1686798671",
                                    "author": {
                                        "login": "the8472"
                                    }
                                },
                                {
                                    "createdAt": "2023-08-21T22:26:10Z",
                                    "bodyText": "I'm really confused as to why something like a policy change (with controversial rules) would be a higher priority than fixing the flat namespace issue that benefits everyone.\n\nIf it was that simple, I suspect we'd already have namespaces. Given the lengthy history of #3243 and its various preceding issues and discussions, blocking on a namespace decision to be agreed upon and implemented doesn't help the crates.io team with today's issues.\nAdditionally, I don't think it's an either-or thing: squatting can just as easily occur at the namespace level as it does today at the crate level. I'm a fan of namespaced crates, and think it will improve things if and when implemented, but we're still going to have to develop policies to deal with namespaces just as much as we have to have policies around the flat namespace today.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1687133035",
                                    "author": {
                                        "login": "LawnGnome"
                                    }
                                },
                                {
                                    "createdAt": "2023-08-22T21:09:54Z",
                                    "bodyText": "If it was that simple, I suspect we'd already have namespaces. Given the lengthy history of #3243 and its various preceding issues and discussions, blocking on a namespace decision to be agreed upon and implemented doesn't help the crates.io team with today's issues.\n\nBut it actually does, by making it a high priority to focus on as a blocker. The custom namespace feature fixes a lot of the issues that I have seen mentioned here. I would say the RFC is essentially split between \"addressing squatting\" and \"content moderation\" concerns.\nFor the former, namespaces absolutely would help and the maintainer of tokio (who apparently has been called out in quite an interesting manner) would benefit from this. Imagine all of the async packages being able to live there instead of colliding with others. Easy win.\nThen you have the corporate/trademark angle where if a big company wanted to contribute they could easily claim the @company/package namespace without having to worry about collisions. Take the maui crate which seems to be reserved by someone for future use. Imagine if Microsoft wanted to bring MAUI bindings for Rust, now it would be an issue. But if they could get @microsoft/maui it would be a non-issue.\nIt unlocks nearly unlimited crate names compared to what we have now, and other package managers have taken this approach.\n\nAdditionally, I don't think it's an either-or thing: squatting can just as easily occur at the namespace level as it does today at the crate level. I'm a fan of namespaced crates, and think it will improve things if and when implemented, but we're still going to have to develop policies to deal with namespaces just as much as we have to have policies around the flat namespace today.\n\nSquatting at the namespace could still happen but would be much, much less common. Developing common-sense rules around that would be much easier as well. No one would argue against rules that disallow pushing your own non-sanctioned crate to @tokio/ or reserving a namespace like @apple.\nThe issue I have is attempting to write rules that solve a problem that will eventually be solved in a much better anyways, and those rules are far more nebulous and controversial than the future rules will be. It just asks, what's the rush?\nIs this really such a big problem currently that we need to hammer a half-baked solution? In most cases you should be able to reach out to the developer and get the crate name released to you.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1688936604",
                                    "author": {
                                        "login": "ewrogers"
                                    }
                                },
                                {
                                    "createdAt": "2023-08-22T21:33:55Z",
                                    "bodyText": "Namespacing is not directly related to this PR.\nNo namespacing proposal gets rid of the toplevel namespace. In fact, #3423 uses crates as namespaces. But even if it didn\u2019t, namespaces themselves can still be namesquatted, so again, as much as proponents of namespacing like to argue it would help namesquatting, the best it can do is move the problem around.\n#3423 is the correct place to discuss namespacing, and I would like to kindly request people stop discussing it on this issue because it is off-topic and every reply pings myriad observers who care about the actual content of this thread.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1688961659",
                                    "author": {
                                        "login": "tarcieri"
                                    }
                                },
                                {
                                    "createdAt": "2023-08-23T08:54:12Z",
                                    "bodyText": "Is this really such a big problem currently that we need to hammer a half-baked solution? In most cases you should be able to reach out to the developer and get the crate name released to you.\n\nI find that half-baked solution is a bit unfair and misrepresents the effort put into this proposal. In my opinion this RFC covers a bit more than dealing with just squatting and for this reason I believe it's worth pushing this proposal forward anyway",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1689555911",
                                    "author": {
                                        "login": "apiraino"
                                    }
                                },
                                {
                                    "createdAt": "2023-08-24T18:45:44Z",
                                    "bodyText": "Unrelated to the ongoing topic of enforcement and line-drawing, I recently had to implement functionality which makes use of the crates.io API/index, but was somewhat confused about where https://index.crates.io fit into the ecosystem.\nSince it was not explicitly mentioned in either the Data Access or Crawlers, I was not sure what the usage policy for it was, and ended up using the crates.io API, since the GitHub repository would be inaccessible for my use case.\nFollowing a brief chat on zulip I learnt that using https://index.crates.io was actually preferable.\nI think the Data Access section should explicitly mention that https://index.crates.io is also available, and should be used before resorting to the crates.io API.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1692232405",
                                    "author": {
                                        "login": "MathiasPius"
                                    }
                                },
                                {
                                    "createdAt": "2023-09-05T08:25:37Z",
                                    "bodyText": "after a long vacation and another week of gathering the energy to go back to this RFC I just went through most of the threads and comments once more and integrated most of the feedback into the proposal.\nif you have feedback on specific parts of the proposal I would like to recommend opening a thread on the diff, which makes it much easier discuss and ultimately resolve particular issues, compared to one-off comments in the main thread of this PR :)",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1706167229",
                                    "author": {
                                        "login": "Turbo87"
                                    }
                                },
                                {
                                    "createdAt": "2023-09-07T16:59:47Z",
                                    "bodyText": "While this discussion is ongoing, can we possibly consider allowing registered crates.io users to flag \"suspicious\" crates and users? I've recently stumbled upon this user:\nhttps://crates.io/users/r3v2d0g?page=8&sort=downloads\nThe guy has 407 crates published, with pretty much all of them having no content of any sort. And there is no mechanism to do anything about it. Maybe some sort of \"flag as suspect\" button (even if it has no effect) could be a good start?",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1710496567",
                                    "author": {
                                        "login": "alexpyattaev"
                                    }
                                },
                                {
                                    "createdAt": "2023-09-15T15:56:59Z",
                                    "bodyText": "At our crates.io team meeting today we discussed this RFC. Since there hadn't been any major objections in the past couple of days since the latest update of the RFC, we decided to move forward with it, aka. moving it to final comment period (FCP).\nLet's hope I'm using this bot correctly:\n@rfcbot fcp merge\nThanks everyone for the discussion and all of the suggestions to improve the proposal!",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1721509119",
                                    "author": {
                                        "login": "Turbo87"
                                    }
                                },
                                {
                                    "createdAt": "2023-09-15T15:57:00Z",
                                    "bodyText": "Team member @Turbo87 has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n @JohnTitor\n @LawnGnome\n @Turbo87\n @carols10cents\n @jtgeibel\n @mdtro\n\nNo concerns currently listed.\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\nSee this document for info about what commands tagged team members can give me.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1721509150",
                                    "author": {
                                        "login": "rfcbot"
                                    }
                                },
                                {
                                    "createdAt": "2023-09-15T17:46:41Z",
                                    "bodyText": "I mentioned this on Zulip a while back and it's not clear to me that I got my point across. I'll re-state it here: I personally think this proposed policy change needs to be broadcast more widely than it has been. (If efforts have been made in this regard toward broadcasting this change, then my apologies. I'm just not aware of them.)\nI think that the revisions that have been made since I last read it result in a better policy. In particular, I'm happy about the removal of the rule against false/inaccurate/deceptive crates. However, the squatting rule still looks incredibly broad to me and, from my interpretation of it, it looks like it's going to have a very large blast radius.\nI asked about the plan for getting feedback from stakeholders. I tried CC'ing a couple above about it. Otherwise, I think a blog post on the official Rust blog would go a long way toward inviting folks to give their opinion about this.\nAnother path to go here, perhaps in addition, is to identify some subset of existing crates that will be impacted by this policy change. Then reach out to the folks owning those crates and invite them to provide feedback.\nI realize that inviting more feedback into this thread, especially during an FCP, is a draining process. This is why I tried suggesting this a long time ago. The risk of not reaching out to stakeholders is that this policy passes, crates are removed and folks feel disenfranchised because they didn't realize this proposal existed in the first place. Maybe that doesn't happen and everyone who really needs to know about this proposal already knows, but maybe not. That's why I use the phrase \"risk mitigation\" here.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1721635892",
                                    "author": {
                                        "login": "BurntSushi"
                                    }
                                },
                                {
                                    "createdAt": "2023-09-15T20:54:19Z",
                                    "bodyText": "As someone who worked at NPM Inc, I thought their package policy was pretty decent in practice: if you have an empty package with nothing in it, with no real downloads to speak of besides the standard bot ones, and you've let the package sit around for a long time, you try and contact the author first, and if they don't respond after a while, you email support and they double-check everything before transferring you the package.\nPackages that have real dependents or downloads or content, even if they've been abandoned for years, should never be transferred.\nThis policy worked very well in practice, imo, and I was definitely someone who engaged with it pretty often, both as someone whose package names other people wanted, and someone who wanted specific package names that were already taken.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1721854445",
                                    "author": {
                                        "login": "zkat"
                                    }
                                },
                                {
                                    "createdAt": "2023-09-16T04:12:39Z",
                                    "bodyText": "Packages that have real dependents or downloads or content, even if they've been abandoned for years, should never be transferred.\n\nSomeone being able to only maintain it (not change its purpose, but purely ensure bugfixes land, features may be out of scope) would be nice here too, I will say. I've also seen a few crates here n there that I wanted to update to modern Rust (2018 -> 2021) but was unable to, due to the owner(s) not being available nor interested.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1722128093",
                                    "author": {
                                        "login": "orowith2os"
                                    }
                                },
                                {
                                    "createdAt": "2023-09-17T16:54:38Z",
                                    "bodyText": "Small suggestions:\n\"exists only to reserve a name for a prolonged period of time (often called \"name squatting\") without having any genuine functionality, purpose, or significant development activity on the corresponding repository\"  is indeed quite broad, especially since \"prolonged period of time\" is never defined. Suggest we define that as 6 months that is plenty long enough for any legitimate case.\n\"is related to inauthentic interactions, such as fake accounts and automated inauthentic activity\" - my brain fails to figure out when this would apply.\n\"is abusing the package index for purposes it was not intended\" is a catch-all policy, which could be applied to just about anything. One could argue, that a library that only works on one specific microcontroller is abuse of crates.io as people who do not have that controller can not use the library, so it violates crates.io policy.\n\"infringes any proprietary right of any party, including patent, trademark, trade secret, copyright, right of publicity, or other right\" - this is quite a sketchy thing, as there are plenty of media codecs and other stuff that does that exact thing. Like, all the hundreds of libraries that touch certain popular media formats would all become outlaws.\nOn question Should the crates.io policies forbid embedding executable binaries in the crate files? my take is a clear \"no\". A company like Intel may want to make their stuff available in binary form only. The case of malicious content is already covered in the document.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1722518502",
                                    "author": {
                                        "login": "alexpyattaev"
                                    }
                                },
                                {
                                    "createdAt": "2023-09-19T08:58:12Z",
                                    "bodyText": "On question Should the crates.io policies forbid embedding executable binaries in the crate files? my take is a clear \"no\". A company like Intel may want to make their stuff available in binary form only. The case of malicious content is already covered in the document.\n\nI disagree strongly (IMO Intel can distribute closed-source binary blobs elsewhere if that's what they want to do), which then prompted me to look into whether we have any requirements for crates on crates.io to be open-source-licensed. And it seems we don't? That's surprising to me (and concerning, too). Did I miss something or do we truly allow non-open-source crates (including source-available-but-it's-not-a-free-license) on crates.io?",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1725101452",
                                    "author": {
                                        "login": "RalfJung"
                                    }
                                },
                                {
                                    "createdAt": "2023-09-19T13:34:09Z",
                                    "bodyText": "The point of crates.io is to be a convenient place to store crates. There is nothing nice about having to fetch a piece of proprietary binary from hell-knows-where in contrast to crates.io. Also links to vendor sites have a nasty tendency to die, or get polluted with bloat/spy ware.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1725562805",
                                    "author": {
                                        "login": "alexpyattaev"
                                    }
                                },
                                {
                                    "createdAt": "2023-09-19T13:54:29Z",
                                    "bodyText": "There's nothing nice about fetching a piece of proprietary binary, period. Hence I would like to be sure it doesn't happen without my explicit consent. Ideally I can just trust crates.io to not inflict such crates on me.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1725629373",
                                    "author": {
                                        "login": "RalfJung"
                                    }
                                },
                                {
                                    "createdAt": "2023-09-19T15:18:51Z",
                                    "bodyText": "@BurntSushi as mentioned on Zulip, I've opened a PR for a short announcement blog post. the PR is currently awaiting review from others on the crates.io team, since I don't want to just merge this unilaterally.\n@zkat thanks! what you describe is pretty much what we are currently doing and want to continue.\n@orowith2os unfortunately, I'm not sure how that would work in practice, since we can only give people the permission to push code or not, but we can't restrict what type of changes they can publish. in any case this is a little out of scope for the RFC :)\n@alexpyattaev as mentioned before, if you have feedback on specific parts of the RFC it would be best to open threads on the diff so that we can discuss them individually without cluttering the main PR comment thread.\n@RalfJung @alexpyattaev while I agree that this is a discussion worth having, it is out of scope for this RFC. the policy will not be set in stone after this RFC and we can always update it with such things.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1725875065",
                                    "author": {
                                        "login": "Turbo87"
                                    }
                                },
                                {
                                    "createdAt": "2023-09-21T16:47:59Z",
                                    "bodyText": "we have referred to this line of code as \"violence\" before: https://docs.rs/hexchat-unsafe-plugin/latest/src/hexchat_unsafe_plugin/lib.rs.html#2254 (as in \"tell the cis we're coming for them\" \ud83e\udd37 )\nonly way to know is to bring it up and ask, so: does that count as infringing?\nfurther: does spite count as violence? most of our crates were made out of spite: we saw something that we didn't think was good enough and we wanted to make something better. (we feel like it would suck if crates.io actually banned these... spite can be a powerful motivator)\nalso: how does the new policy handle hostile forks, if at all?",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1729948840",
                                    "author": {
                                        "login": "SoniEx2"
                                    }
                                },
                                {
                                    "createdAt": "2023-09-22T09:08:08Z",
                                    "bodyText": "does that count as infringing?\n\nI don't see anything violent or otherwise infringing in there\n\ndoes spite count as violence?\n\nI don't think it does\n\nhow does the new policy handle hostile forks, if at all?\n\nit depends a bit on the level of hostility, but unless there are e.g. valid copyright issues with the fork the crates.io team would not step in\nalso, as written above, please do open threads on the diff to keep this main discussion thread somewhat manageable :)",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1731079065",
                                    "author": {
                                        "login": "Turbo87"
                                    }
                                },
                                {
                                    "createdAt": "2023-09-22T16:03:24Z",
                                    "bodyText": "https://www.law.cornell.edu/uscode/text/18/16",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1731668489",
                                    "author": {
                                        "login": "Jules-Bertholet"
                                    }
                                },
                                {
                                    "createdAt": "2023-09-24T11:13:54Z",
                                    "bodyText": "I'm generally in favor, as long as it does not prevent us from immediately acting on actual name squatting \"attacks\". In the past couple of weeks we had several cases of people squatting hundreds of crates name. I don't think it would be practical if we had to contact these people first and give them a couple of weeks to respond before we could act on this.\n\nJust a reminder that non-automated squatting is explicitly currently allowed by policy (otherwise this update wouldn't be necessary).\nIt would be odd not to respect in good faith a behavior that is currently allowed.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1732547530",
                                    "author": {
                                        "login": "trevyn"
                                    }
                                },
                                {
                                    "createdAt": "2023-09-28T06:10:16Z",
                                    "bodyText": "Based on comments by @tux3 I would recommend that, where possible, wording is changed to emphasize that the intent has to be malicious, rather than the code. For example, code that is minified for compactness (or to speed up build for example) should be treated differently from code that is minified deliberately to hide an exploit. It is the ill intent that should be punished, not the fact of uploading a specific bit of content.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1738528395",
                                    "author": {
                                        "login": "alexpyattaev"
                                    }
                                },
                                {
                                    "createdAt": "2023-09-28T23:18:51Z",
                                    "bodyText": "Based on comments by @tux3 I would recommend that, where possible, wording is changed to emphasize that the intent has to be malicious, rather than the code. For example, code that is minified for compactness (or to speed up build for example) should be treated differently from code that is minified deliberately to hide an exploit. It is the ill intent that should be punished, not the fact of uploading a specific bit of content.\n\nI agree on context being important - however, I'd personally consider obfuscation of, say, build.rs files to be almost always a risk for hidden malicious intent.\nI would mildly prefer we start with a stance of disallowing all obfuscation, with carve-outs for specific cases where it is easy to tell that it isn't malicious.\nHowever, I think any discouragement of obfuscation is better than nothing, even if it is weaker than what the policy says now.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1740115424",
                                    "author": {
                                        "login": "samlh"
                                    }
                                },
                                {
                                    "createdAt": "2023-10-02T06:28:38Z",
                                    "bodyText": "When namespacing? I don't understand people's pathological hatred of optionally having crate namespaces. It's pretty important for large scale businesses rather than constantly under squatter risk. It's better for security. I just don't get why rust is not grown up in this regard? What's the advantage of delaying the inevitable another decade? The current decision harms the adoption of rust by enterprises.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1742460934",
                                    "author": {
                                        "login": "gilescope"
                                    }
                                },
                                {
                                    "createdAt": "2023-10-02T07:10:24Z",
                                    "bodyText": "Please refrain from off-topic comments that concern unrelated questions.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1742502771",
                                    "author": {
                                        "login": "RalfJung"
                                    }
                                },
                                {
                                    "createdAt": "2023-10-05T09:11:33Z",
                                    "bodyText": "@trevyn the current crates.io policy refers to the Rust project code of conduct which says:\n\nLikewise any spamming, trolling, flaming, baiting or other attention-stealing behavior is not welcome.\n\nand squatting large numbers of crate names without meaningful content or a plan to use them for anything could be seen as \"spamming\". in other words: \"non-automated squatting is explicitly currently allowed by policy\" is only correct to a degree that does not amount to \"spamming\".\n@alexpyattaev @samlh again, pleeeease comment on or open new threads on the diff. otherwise this main PR thread will become an even bigger mess than it already is... \ud83d\ude4f",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1748448613",
                                    "author": {
                                        "login": "Turbo87"
                                    }
                                },
                                {
                                    "createdAt": "2023-10-27T15:13:24Z",
                                    "bodyText": "\ud83d\udd14 This is now entering its final comment period, as per the review above. \ud83d\udd14",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1783085089",
                                    "author": {
                                        "login": "rfcbot"
                                    }
                                },
                                {
                                    "createdAt": "2023-11-06T15:16:44Z",
                                    "bodyText": "The final comment period, with a disposition to merge, as per the review above, is now complete.\nAs the automated representative of the governance process, I would like to thank the author for their work and everyone else who contributed.\nThis will be merged soon.",
                                    "url": "https://github.com/rust-lang/rfcs/pull/3463#issuecomment-1795067445",
                                    "author": {
                                        "login": "rfcbot"
                                    }
                                }
                            ]
                        },
                        "reviews": {
                            "edges": [
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            - is false, inaccurate, or intentionally deceptive information and likely to\n          \n          \n            \n              adversely affect the public interest (including health, safety, election\n          \n          \n            \n              integrity, and civic participation)\n          \n          \n            \n            - is intentionally deceptive\n          \n      \n    \n    \n  \n\nThis clause, as written, presupposes that:\n\nThe crates.io team can define \"public interest\", an extremely nebulous term encompassing countless thorny questions that have nothing to do with Rust or crates.io.\nThe crates.io team is equipped to evaluate the truthiness of any statement, about any imaginable subject, whether or not it has any relation with Rust or crates.io.\n\nThese are not questions that the crates.io team is equipped to answer, or has any business answering.",
                                                        "author": {
                                                            "login": "Jules-Bertholet"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1272451848",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "To note why I strongly disagree with your analysis:\nTerms like these are designed to be vague as a feature, not a bug. The Rust project will not maliciously remove crates that they disagree with, since they rely on the goodwill of the community to exist in the first place. The goal here is to be able to remove crates that lie in the grey area of \"not necessarily discriminatory, but likely to cause harm.\"\nThis does not prevent these projects from existing, or using Rust. It simply prevents them from being publicly listed on crates.io, using up crates.io resources, and indirectly reflecting on the moral status of Rust as a project.\nImagine if someone released firmware for a war drone, for example. It's highly likely that people would use this for public harm, although it's also difficult to say that this is discriminatory. Even if you think that war is necessary, militia across the globe can surely afford their own crate registries to host their own code, and the Rust project shouldn't be a part of that.",
                                                        "author": {
                                                            "login": "clarfonthey"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1272817579",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "The term \"sexually obscene\" here should not be used since it isn't very specific and is in the present day being used to discriminate against gay, trans, and otherwise queer people.\nAdditionally, the juxtaposition with \"sexually obscene\" and sexual abuse should not be used, and these should be separate bullet points. The goal of limiting sexual content on crates.io (for example, would something like buttplug.io be allowed?) is orthogonal to simply preventing the abuse and exploitation of others, especially minors.",
                                                        "author": {
                                                            "login": "clarfonthey"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1272820617",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I think that this point could probably be elaborated better, since it's not clear what is \"off-topic\" for a software hosting platform. It's implied that the goal is to avoid others exploiting the platform, but I wouldn't necessarily call that \"off-topic.\"",
                                                        "author": {
                                                            "login": "clarfonthey"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1272821013",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I would add the term \"squatting\" explicitly here since it's a commonly used phrase and I believe it's important here.",
                                                        "author": {
                                                            "login": "clarfonthey"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1272821236",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I think this should be clarified and linked directly to the section on DMCA takedowns, etc. listed below. While I understand that the goal is complying with the necessary laws, I think that these should be explicitly clarified as whose laws (presumably the US) since they otherwise vary a lot by country.\nThese types of clauses can easily be exploited by malicious actors even within the scope of existing laws, and while complying with the law is necessary, I would prefer to avoid giving people the impression that the scope of this is broader than that.",
                                                        "author": {
                                                            "login": "clarfonthey"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1272823828",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "This also should be clarified based upon jurisdiction. For example, it is unlawful to be gay in some countries, but that should not be against crates.io guidelines.",
                                                        "author": {
                                                            "login": "clarfonthey"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1272824072",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "This section should be a bit more clear on the rules against squatting mentioned in the original terms list. While I understand the desire to simply deter squatting rather than explicitly forbidding it, it should be clear what would happen in the case where someone's crate is deleted but contains no meaningful content.",
                                                        "author": {
                                                            "login": "clarfonthey"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1272824825",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Worth adding a caveat to this section about responsible disclosure to crate authors, since this is only for cargo and crates.io themselves. Just something simple like, you should look at the documentation for individual crates on how individual authors prefer to disclose vulnerabilities.",
                                                        "author": {
                                                            "login": "clarfonthey"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1272825806",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I think that it's fair to say that content deletion is permanent, but I think that it's a bit harsh to assume that all actions are permanent. For example, if someone's account gets compromised, it makes sense to temporarily suspend their account until the original author regains control, but the implication here is that you will never get your account back if this happens.",
                                                        "author": {
                                                            "login": "clarfonthey"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1272826781",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "In the U.S. at least (can't speak to other countries), there are laws on the books that use the term \"obscene\", and a wealth of case law defining it. Crates.io is likely affected by some of these laws, and (I would expect) needs to have an anti-obscenity policy in order to stay on the right side of them.\n\nin the present day being used to discriminate against gay, trans, and otherwise queer people.\n\nThe words \"an\", \"the\", \"like\", and \"as\" are also used to discriminate against gay, trans, and otherwise queer people. Words are tools, they can be used for many purposes and most have different meaning depending on context.",
                                                        "author": {
                                                            "login": "Jules-Bertholet"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1272840906",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Does this policy disallow rg?",
                                                        "author": {
                                                            "login": "BurntSushi"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1272845522",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I think it would be best if whoever is in charge here first reaches out to the crate owners to seek a possible explanation. I have a couple crates reserved due to the likely possibility of future development and crate-splitting, and having them taken away without any input on my end feels wrong.",
                                                        "author": {
                                                            "login": "jhpratt"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1272847785",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "The Rust project will not maliciously remove crates that they disagree with, since they rely on the goodwill of the community to exist in the first place.\n\nThe issue is not that the crates.io team might be malicious, it's that they might be totally out of their depth. A hypothetical scenario:\nSomeone uses Rust as part of a statistical analysis of the results of Nigeria's 2019 presidential election. The analysis concludes that there were significant irregularities that may have affected the results. The Rust code is published on crates.io under the crate name nigeria_fraud_analysis.\nSomeone else claims to refute these claims with a competing analysis, also using Rust, and with code published to crates.io under the name election-2019-ng.\nBoth crate authors contact the crates.io team, each asking that the other's crate be removed for violating the policy. The author of nigeria_fraud_analysis claims that election-2019-ng is being used to unfairly exonerate a corrupt and undemocratic regime, \"adversely affecting the public interest\" by suppressing genuine \"civic participation.\" Conversely, election-2019-ng's author accuses his counterpart of sowing unjustified doubt about Nigerian democracy, which is contrary to crates.io's \"election integrity\" policy.\nHow can the crates.io team possibly hope to make the correct determination in this instance? It does not matter whether their intentions are pure; they are not experts in Nigerian politics, and therefore wholly unequipped to judge this case.\n\nThe goal here is to be able to remove crates that lie in the grey area of \"not necessarily discriminatory, but likely to cause harm.\"\n\nIf you run Rust code on a computer powered by electricity produced with fossil fuels, you cause harm from climate change. If you release a library for encrypted messaging, criminals could use it to hide their evil acts, which will cause harm. Any tool can be used for a nefarious purpose, and if it is popular enough it likely will be. See also Douglas Crockford on the JSON license.\n\nImagine if someone released firmware for a war drone, for example.\n\nI would be very surprised if firmware with exclusively military applications was released on any public platform; such code would be a classified state secret. What is far more likely is someone releasing firmware for a consumer drone that has potential military applications, though the firmware author probably doesn't intend it.",
                                                        "author": {
                                                            "login": "Jules-Bertholet"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1272857451",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "The issues I'm talking about explicitly include laws in the US. That said, if you're citing a particular legal precedent, I would say it's better to explicitly cite said precedent, rather than just implicitly.",
                                                        "author": {
                                                            "login": "clarfonthey"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1272876948",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Someone uses Rust as part of a statistical analysis of the results of Nigeria's 2019 presidential election. The analysis concludes that there were significant irregularities that may have affected the results. The Rust code is published on crates.io under the crate name nigeria_fraud_analysis.\nSomeone else claims to refute these claims with a competing analysis, also using Rust, and with code published to crates.io under the name election-2019-ng.\nBoth crate authors contact the crates.io team, each asking that the other's crate be removed for violating the policy. The author of nigeria_fraud_analysis claims that election-2019-ng is being used to unfairly exonerate a corrupt and undemocratic regime, \"adversely affecting the public interest\" by suppressing genuine \"civic participation.\" Conversely, election-2019-ng's author accuses his counterpart of sowing unjustified doubt about Nigerian democracy, which is contrary to crates.io's \"election integrity\" policy.\nHow can the crates.io team possibly hope to make the correct determination in this instance? It does not matter whether their intentions are pure; they are not experts in Nigerian politics, and therefore wholly unequipped to judge this case.\n\nI think that it's worth clarifying that I don't think research like this is suitable for crates.io in the first place. If you're uploading your tools to do the analysis, that makes sense, but the analysis itself isn't really fit for the registry.\nThat said, I think that \"negligently\" is a suitable qualifier for false/inaccurate, since there's a difference between someone being genuinely wrong and negligently wrong. For example, if you were to publish vaccine_analysis and talked about the original paper by disgraced doctor Andrew Wakefield and used it as evidence for vaccines being bad, that would be negligently wrong.\n\nIf you run Rust code on a computer powered by electricity produced with fossil fuels, you cause harm from climate change. If you release a library for encrypted messaging, criminals could use it to hide their evil acts, which will cause harm. Any tool can be used for a nefarious purpose, and if it is popular enough it likely will be. See also Douglas Crockford on the JSON license.\n\nThis is a bad-faith argument I won't engage with. Yes, we all live in a society. This does not mean it's impossible to remove unilaterally harmful content from a service which is offered for free especially when it is not the only medium for distributing software.\n\nI would be very surprised if firmware with exclusively military applications was released on any public platform; such code would be a classified state secret. What is far more likely is someone releasing firmware for a consumer drone that has potential military applications, though the firmware author probably doesn't intend it.\n\nThis relates again to the previous argument. If your firmware code is more likely to do harm than good, then it is liable to be removed. The example you give would not fit these criteria since the harm has to be added as additional code.",
                                                        "author": {
                                                            "login": "clarfonthey"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1272880903",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Regarding @BurntSushi's example, it would make the most sense to either a) explicitly allow squatting names that are used to prevent impersonation, or the probably better b) provide a native mechanism to alias names for this usage. Since impersonation is against the terms (and thus, no one could reasonably use the alias but him) although I think that the hack of an always-failing crate should be reproduced in a more well-defined method.",
                                                        "author": {
                                                            "login": "clarfonthey"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1272881852",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "so, if someone were to write a library for filtering out porn, they couldn't put it on crates.io, since it relates to sexually obscene things?",
                                                        "author": {
                                                            "login": "programmerjake"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1272888709",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I think you're misreading; I read it as obscene or relating to abuse, not relating to obscenity or abuse.",
                                                        "author": {
                                                            "login": "clarfonthey"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1273028933",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "ok, then what about a library to filter out or detect abuse? that's relating to abuse...",
                                                        "author": {
                                                            "login": "programmerjake"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1273082230",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "as I've written below, we would most likely use https://docs.github.com/en/site-policy/acceptable-use-policies/github-sexually-obscene-content as a guideline on what counts and what doesn't. \"a library for filtering out porn\" is absolutely valid IMHO, though what might be difficult is publishing pornographic material in the crate file as test data.",
                                                        "author": {
                                                            "login": "Turbo87"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1273083018",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I agree. We usually lock the user accounts, but we don't have such a quarantine mechanism for crates yet. This part was copied over from the PyPI policies if I remember correctly. Do you have a suggestion on how to rephrase it?",
                                                        "author": {
                                                            "login": "Turbo87"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1273085052",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "that sounds like a good idea to me. do you have a specific wording in mind already?",
                                                        "author": {
                                                            "login": "Turbo87"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1273086221",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "the desire to simply deter squatting rather than explicitly forbidding it\n\nI'm not sure I understand this. The proposal explicitly forbids reserving names without content. \ud83e\udd14\n\nit should be clear what would happen in the case where someone's crate is deleted but contains no meaningful content\n\ncan you elaborate what you mean by this? again, not sure I understand what you're saying, sorry \ud83d\ude48",
                                                        "author": {
                                                            "login": "Turbo87"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1273088533",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "ok, then I think the text should be revised to essentially state that:\n\n\"We do not allow sexually themed or suggestive content that serves little or no purpose other than to solicit an erotic or shocking response\"\n\nimho the libraries described in both of my comments should be allowed (as long as they don't distributed sexual material for e.g. test cases)",
                                                        "author": {
                                                            "login": "programmerjake"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1273090459",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Suggested change\n      \n    \n    \n      \n          \n            \n            - is unlawful or promotes unlawful activities\n          \n          \n            \n            - is unlawful or promotes unlawful activities incurring legal liability in the countries the Rust Foundation officially operates in\n          \n      \n    \n    \n  \n\non Zulip the suggestion above came up, which might help? (the Rust Foundation is the official legal entity operating crates.io)",
                                                        "author": {
                                                            "login": "Turbo87"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1273091883",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Do you have any specific suggestions for this? I felt that the \"For issues such as DMCA violations [...]\" part below the list was sufficient \ud83e\udd14",
                                                        "author": {
                                                            "login": "Turbo87"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1273094316",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "@clarfonthey to react on your initial statement: as a non-native english speaker I can tell you that \"reserving names\" is way easier to understand than \"name squatting\". I know the term since I've been involved with this stuff for quite some time, but otherwise I probably wouldn't know what it means.\n@jhpratt rg is a good example since it includes a long README file explaining the purpose of the reservation. if such a legitimate explanation is given we most likely wouldn't delete a crate without warning or discussion.",
                                                        "author": {
                                                            "login": "Turbo87"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1273097903",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "examples that come to mind are crates that misuse the README as a way to advertise a product or company or if someone decides to publish a novel on crates.io because it would technically be possible.",
                                                        "author": {
                                                            "login": "Turbo87"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1273101868",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "So\u2026no more dtolnay blog? Asking for clarity \u2014 I don't think it should be allowed.",
                                                        "author": {
                                                            "login": "jhpratt"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1273104832",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "as mentioned below, our guideline here is https://docs.github.com/en/site-policy/acceptable-use-policies/github-sexually-obscene-content.\n\nthese should be separate bullet points\n\nI'm open to that if it helps to make those points clearer. Any suggestions on the wording?",
                                                        "author": {
                                                            "login": "Turbo87"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1273104967",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "@Turbo87 Granted, but it's frequently more subtle than that. I have time-formatting reserved with no explanation on crates.io. Personally I won't be pushing a \"release\" just to update that page, regardless of change in policy. But if someone asked me directly, I could clearly state why it's reserved and what needs to happen (on the language side of things) before I make use of the name.",
                                                        "author": {
                                                            "login": "jhpratt"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1273108970",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "This clause, as written, presupposes that:\n\nThe crates.io team can define \"public interest\", an extremely nebulous term encompassing countless thorny questions that have nothing to do with Rust or crates.io.\nThe crates.io team is equipped to evaluate the truthiness of any statement, about any imaginable subject, whether or not it has any relation with Rust or crates.io.\n\nThese are not questions that the crates.io team is equipped to answer, or has any business answering.\n\nI agree that the crates.io team can not \"evaluate the truthiness of any statement\", but there are ones that we can reasonably evaluate and in those cases I think it is fine for the team to have a way to act on deceptive information.\nhttps://docs.github.com/en/site-policy/acceptable-use-policies/github-misinformation-and-disinformation can also be used as a rough guide for this rule.",
                                                        "author": {
                                                            "login": "Turbo87"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1273109411",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "So\u2026no more dtolnay blog? Asking for clarity \u2014 I don't think it should be allowed.\n\nas much as I appreciate the creativity, I don't think this is a use case we should support.\n\n\"is abusing the package index for purposes it was not intended\"\n\nwhile \"abuse\" might be a bit strong in this case, it is definitely not the intended purpose of crates.io and docs.rs \ud83d\ude05",
                                                        "author": {
                                                            "login": "Turbo87"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1273115013",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "This is a bad-faith argument I won't engage with.\n\nEverything I wrote represents what I genuinely believe, I have better things to do than lie about my views on crates.io policies.  (Seriously, what would the point even be? I have only negligible skin in the game here.)\n\nIf your firmware code is more likely to do harm than good\n\nCode is a series of bits, it cannot do anything on its own. Human beings can use code to do good or bad things.\n\nHere's another hypothetical:\nSomeone releases a library crate foolib to crates.io. The crate becomes extremely popular, with many millions of downloads, and deployments in production at major corporations. Unfortunately, the crate author negligently tried to \"roll their own crypto\", even though they were not at all qualified to do so. Contrary to the false claims made by the library author, foolib is insecure. Criminals find the vulnerability, and exploit it to steal millions of dollars as well as people's private health records. foolib's author did not intend to deceive, they were merely foolish and inexperienced, and didn't expect their software to be used so widely. But their negligent falsehoods have contributed to massive, demonstrable harm.\nHow should the crates.io team apply the policy here? It's plausible that they should do something, but what?",
                                                        "author": {
                                                            "login": "Jules-Bertholet"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1273199426",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I agree that the crates.io team can not \"evaluate the truthiness of any statement\", but there are ones that we can reasonably evaluate\n\nThis worries me, because \"statements the crates.io team can reasonably evaluate\" depends on the backgrounds of whoever happens to be on the crates.io team at the moment. For example, by sheer coincidence, maybe there are two well-informed Nigerians on the team, and both agree that one of the analyses is obvious bunk. But (in this hypothetical) there are no Tanzanians working on crates.io, so the team is only able to apply its policies with respect to Nigerian elections and not Tanzanian ones. Such an arbitrary standard seems undesirable to me.",
                                                        "author": {
                                                            "login": "Jules-Bertholet"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1273209050",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "@dtolnay do you have thoughts on this?",
                                                        "author": {
                                                            "login": "BurntSushi"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1273431968",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I would be in favour of simply clarifying that you're following GitHub's policy, and/or mirroring that policy under the foundation and linking that. Since, my understanding is that a majority of the issues are legal in nature and are best resolved by the foundation who specifically exist to solve them, rather than a publicly voted-on policy.",
                                                        "author": {
                                                            "login": "clarfonthey"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1273925407",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "@Turbo87 I should clarify I wasn't suggesting to replace the term, simply add in a reference to squatting so people who might be searching for it might notice. Something like:\n\nexists only to reserve a name for a prolonged period of time (often called squatting) without having any genuine functionality or significant development activity on the corresponding repository\n\nAdditionally, to cement in the rg example, perhaps we could clarify as:\n\n... genuine purpose, functionality, or significant development activity on the corresponding repository\n\nsince it's arguable that his case doesn't have any functionality or development activity, but it does have a genuine purpose.",
                                                        "author": {
                                                            "login": "clarfonthey"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1273928697",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I personally would add a direct reference to that policy here, since it feels more like this is in addition to that policy, rather than reinforcing it.",
                                                        "author": {
                                                            "login": "clarfonthey"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1273929444",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I think that's very reasonable!",
                                                        "author": {
                                                            "login": "clarfonthey"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1273929777",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "All good!\nWhat I'm thinking of is cases like @BurntSushi's rg example. We can make the case that it's only reserving the name, but the usage is legitimate.\nI think there should be a distinction clarified that it's deemed more acceptable to delete crates with no content without warning if they break the \"squatting\" policy, whereas crates with content that are deleted would be presumably be taken more seriously, notifying the owner of the rule-breakage when doing so.",
                                                        "author": {
                                                            "login": "clarfonthey"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1273933214",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I'm on my phone right now, so, I'll just add a quick paragraph and you can incorporate it:\n\nNote that this policy only applies to official Rust projects like crates.io and cargo, and not individual crates. The Rust Foundation is not responsible for the disclosure of vulnerabilities to specific crates, and if any issues are found, you should see guidance from the crate owners and their specific policies instead.\n\n(EDIT: Proper change listed here.)",
                                                        "author": {
                                                            "login": "clarfonthey"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1273935787",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Sure, here's a quick draft.\n\nIn all cases, content and account deletion is permanent and there is no basis to reverse these moderation actions taken by the crates.io team. Account suspension may be lifted at the team's discretion however, for example in the case of someone's account being compromised.",
                                                        "author": {
                                                            "login": "clarfonthey"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1273937958",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "As I mentioned in an earlier comment, I think directly linking GitHub's policy here and/or creating a Foundation policy based on it would be a good approach here. The page GitHub posted does a good job of explaining what's okay and what isn't.",
                                                        "author": {
                                                            "login": "clarfonthey"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1273938987",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "so, if I created an empty crate named jacob_lifshay or programmerjake that would be valid because they have the genuine purpose of preventing others from impersonating me? (they could have another genuine purpose of namespacing crates i publish, but let's ignore that for this question)",
                                                        "author": {
                                                            "login": "programmerjake"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1273943631",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Properly incorporating the suggestion from here:\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            \n          \n          \n            \n            Note that this policy only applies to official Rust projects like crates.io and\n          \n          \n            \n            cargo, and not individual crates. The Rust Foundation is not responsible for the\n          \n          \n            \n            disclosure of vulnerabilities to specific crates, and if any issues are found, you\n          \n          \n            \n            should seek guidance from individual crate owners and their specific policies instead.",
                                                        "author": {
                                                            "login": "clarfonthey"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1274087959",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Tying together the suggestions I mentioned:\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n            - exists only to reserve a name for a prolonged period of time without having\n          \n          \n            \n              any genuine functionality or significant development activity on the\n          \n          \n            \n              corresponding repository\n          \n          \n            \n            - exists only to reserve a name for a prolonged period of time (\"squatting\")\n          \n          \n            \n              without having any genuine functionality, purpose, or significant development\n          \n          \n            \n              activity on the corresponding repository",
                                                        "author": {
                                                            "login": "clarfonthey"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1274089514",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Proper suggestion:\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n            While the majority of interactions between individuals in the Rust community\n          \n          \n            \n            falls within our policies, violations of those policies do occur at times.\n          \n          \n            \n            When they do, the crates.io team may need to take enforcement action to address\n          \n          \n            \n            the violations. In all cases, these actions are permanent and there is no basis\n          \n          \n            \n            to reverse a moderation action taken by the crates.io team.\n          \n          \n            \n            While the majority of interactions between individuals in the Rust community\n          \n          \n            \n            falls within our policies, violations of those policies do occur at times.\n          \n          \n            \n            When they do, the crates.io team may need to take enforcement action to address\n          \n          \n            \n            the violations. In all cases, content and account deletion is permanent and there\n          \n          \n            \n            is no basis to reverse these moderation actions taken by the crates.io team.\n          \n          \n            \n            Account suspension may be lifted at the team's discretion however, for example in\n          \n          \n            \n            the case of someone's account being compromised.",
                                                        "author": {
                                                            "login": "clarfonthey"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1274092185",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "The Rust Foundation is not responsible for the disclosure of any vulnerability, that's the Security Response WG's role for the Rust project.",
                                                        "author": {
                                                            "login": "pietroalbini"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1274170515",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "what do you mean when you say \"direct reference\"?",
                                                        "author": {
                                                            "login": "Turbo87"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1274736126",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I've included the above suggestion, but replacing the foundation with the crates.io team and the Security Response WG :)",
                                                        "author": {
                                                            "login": "Turbo87"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1274745857",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "thanks, I've added a link to GitHub for now :)",
                                                        "author": {
                                                            "login": "Turbo87"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1274746753",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "thanks, I've updated the text with your suggestion :)",
                                                        "author": {
                                                            "login": "Turbo87"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1274747588",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "\u2705",
                                                        "author": {
                                                            "login": "Turbo87"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1274748084",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "added \u2705",
                                                        "author": {
                                                            "login": "Turbo87"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1274748991",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "So using the other comment from jurisdiction, maybe we could use the same language clarifying the Rust Foundation as the legal entity here:\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n            - infringes any proprietary right of any party, including patent, trademark,\n          \n          \n            \n              trade secret, copyright, right of publicity, or other right\n          \n          \n            \n            - infringes any proprietary right of any party, including patent, trademark,\n          \n          \n            \n              trade secret, copyright, right of publicity, or other right in the countries\n          \n          \n            \n              the Rust Foundation officially operates in\n          \n      \n    \n    \n  \n\nI realised after re-reading it, there's no actual DMCA policy listed, it just says that the Rust Foundation is the legal entity in charge of making decisions. So, maybe it's fine to just clarify that here.",
                                                        "author": {
                                                            "login": "clarfonthey"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1275620389",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "There's a potential conflict between the proprietary rights (or impersonation) rules and the name-squatting rule. For example, a trademark owner might reserve that crate name as a way of protecting their legal ownership of that name in a specific jurisdiction. Since they are the legal owner, giving the unused name to someone else could cause legal issues for crates.io or the new owner.\nHow will the crates.io team resolve such conflicts? Do we need to allow legal owners of a name to squat that name?",
                                                        "author": {
                                                            "login": "teor2345"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1275927289",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "2a9a604",
                                                            "authoredDate": "2023-07-26T10:22:40Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I think there might be some context missing here. The previous paragraph implies that this activity is prevented on crates.io servers. But without that context, this could accidentally be read as a ban on crates that implement (automated) cryptocurrency mining or potentially spammy mailouts.\nThe qualifiers \"automated excessive bulk\" and \"coordinated inauthentic\" might be enough by themselves. But they weren't immediately clear to me.\n  \n    \n      \n        Suggested change\n      \n    \n    \n      \n          \n            \n            - is other automated excessive bulk activity and coordinated inauthentic\n          \n          \n            \n            - is using our servers for other automated excessive bulk activity or coordinated inauthentic",
                                                        "author": {
                                                            "login": "teor2345"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1275933750",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "2a9a604",
                                                            "authoredDate": "2023-07-26T10:22:40Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "the desire to simply deter squatting rather than explicitly forbidding it\n\nI'm not sure I understand this. The proposal explicitly forbids reserving names without content. \ud83e\udd14\n\nWhat about a project that is planned or in progress, but hasn't been published to crates.io yet?\nFor example, I worked on a project which had content, but publishing that content to crates.io was a lower priority. So we reserved the crate names a few years ago, put the alpha versions on GitHub, then published to crates.io at the end of the beta series.",
                                                        "author": {
                                                            "login": "teor2345"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1275938534",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "We had a situation where another developer forked an unpublished crate from our public GitHub, then published it on crates.io. In that specific case, we had used a generic crate name, so we were able to choose a similar new name.\nBut what would happen if they had used the name of our project as a crate name? Would that be considered impersonating the project?",
                                                        "author": {
                                                            "login": "teor2345"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1275942584",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "2a9a604",
                                                            "authoredDate": "2023-07-26T10:22:40Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "My understanding is that the crates.io team is part of the Rust project, so conflicts over team decisions can be handled by the moderation team:\nhttps://github.com/rust-lang/rfcs/blob/master/text/3392-leadership-council.md#conflicts-involving-teams-or-project-members\nBut I'm not sure if I understand the new process correctly, or if the Rust project crates.io team is the same as the crates.io team in this RFC.\nWhatever the formal process is, I would suggest giving people a way to ask for decisions to be clarified or reviewed by the team, and an external review process. In my experience, they help build confidence in the decision-making process, and they allow significant conflicts to be handled outside the operational team.",
                                                        "author": {
                                                            "login": "teor2345"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1275957673",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "2a9a604",
                                                            "authoredDate": "2023-07-26T10:22:40Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "With rust-bus, there used to be a co-owner invited to make a similar statement -- such a co-owner (whose name might be \"Crate can be transferred at the crates.io team's discretion\") would both be less intrusive on README files (which always run a risk of being overloaded) and easier to manage (for it can be added and removed without publishing a new release).\nThe rust-bus initiative has been closed, but my impression is that that was more a matter of finding a team of suitable people than of the technical implementation.",
                                                        "author": {
                                                            "login": "chrysn"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1276125737",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "2a9a604",
                                                            "authoredDate": "2023-07-26T10:22:40Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Please note that this section was copied directly from https://crates.io/policies, so there is nothing changing here. I'd prefer for the discussion to focus primarily on the things that were added/changed :)",
                                                        "author": {
                                                            "login": "Turbo87"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1276145505",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "2a9a604",
                                                            "authoredDate": "2023-07-26T10:22:40Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "you are absolutely correct with this statement.\n\nif the Rust project crates.io team is the same as the crates.io team in this RFC\n\nyes, they are the same. currently not everyone in the crates.io team is involved in answering our support emails, but everyone would generally be allowed to do so if they wanted.\n\nI would suggest giving people a way to ask for decisions to be clarified or reviewed by the team, and an external review process.\n\nthe way to ask for clarifications/reviews is the support email address (help@crates.io). in cases where that isn't sufficient the mod team could step in.",
                                                        "author": {
                                                            "login": "Turbo87"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1276163662",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "2a9a604",
                                                            "authoredDate": "2023-07-26T10:22:40Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "as I mentioned below, reserving a crate name is allowed by these proposed rules if there is a linked repository where development activity can be verified.\n\nBut what would happen if they had used the name of our project as a crate name? Would that be considered impersonating the project?\n\nI think this would have to be decided on a case-by-case basis after contacting the user and seeing the contents of what was published. I fear that having a fixed ruleset for such a situation would just cause this malicious user to look for the loophole in the ruleset and apply that.\nalso, for context: the described situation has unfortunately happened a bunch of times over the past couple of months/years and is part of why we are proposing new policies that would allow us to potentially act in such cases.",
                                                        "author": {
                                                            "login": "Turbo87"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1276171292",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "2a9a604",
                                                            "authoredDate": "2023-07-26T10:22:40Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "assuming that the crate only exists because of the trademark, but there is no linked repository or development activity of any kind:\nwe would contact the owner if a name transfer request comes in and if this results in a conflict the legal support of the Rust Foundation would need to tell us if the trademark is valid or not.\nthe owner should probably also include a README in the placeholder version explaining that this crate is reserved for trademark reasons, since reservations without READMEs or descriptions often look like spam/name squatting.",
                                                        "author": {
                                                            "login": "Turbo87"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1276177644",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "2a9a604",
                                                            "authoredDate": "2023-07-26T10:22:40Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Fine with me, please mark this as resolved (I'll be unsubscribed unless pinged).\nIt may benefit the further processing of this to visually separate changed and unmodified sections to avoid noise like this.",
                                                        "author": {
                                                            "login": "chrysn"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1276228113",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "2a9a604",
                                                            "authoredDate": "2023-07-26T10:22:40Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "This seems incorrect - does this need a carveout for the download-crate and sparse registry endpoint?",
                                                        "author": {
                                                            "login": "riking"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1276830584",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "2a9a604",
                                                            "authoredDate": "2023-07-26T10:22:40Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "This seems like a reasonable response, it would be useful to include a summary (or at least a name ownership exception) in this part of the policy RFC.",
                                                        "author": {
                                                            "login": "teor2345"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1277063233",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "2a9a604",
                                                            "authoredDate": "2023-07-26T10:22:40Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "It seems like specifically warning people against forking crates and publishing them under the original name might be helpful?\nThe person who forked our crate also removed all the commit history and licensing, because they didn't understand either the legal or moral authorship requirements. So it seems like something that might need to be spelt out clearly and directly.",
                                                        "author": {
                                                            "login": "teor2345"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1277065417",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "2a9a604",
                                                            "authoredDate": "2023-07-26T10:22:40Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Or perhaps a carve-out for usage via cargo itself?",
                                                        "author": {
                                                            "login": "teor2345"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1277065810",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "2a9a604",
                                                            "authoredDate": "2023-07-26T10:22:40Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I agree with what you've said, but it seems inconsistent with the current wording:\n\nIn all cases, content and account deletion is permanent and there is no basis to reverse these moderation actions taken by the crates.io team.\n\nI suggest something like:\nContent and account deletion moderation actions taken by the crates.io team\ncan be appealed to help@crates.io or the Rust moderation team (TODO: link or email)\n(Unfortunately I'm on mobile so I can't make multi-line suggestions!)",
                                                        "author": {
                                                            "login": "teor2345"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1277066811",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "2a9a604",
                                                            "authoredDate": "2023-07-26T10:22:40Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I think the \"without any purpose\" change above also resolves my specific concern here.",
                                                        "author": {
                                                            "login": "teor2345"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1277165059",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "does this need a carveout for the download-crate and sparse registry endpoint?\n\nthe sparse registry is not technically part of the API (crates.io/api/), but you are right that we should probably exclude the download endpoint. this section was mostly adapted from https://crates.io/policies#crawlers, but since the crawler context isn't as strong anymore such an exception makes sense.\nthanks for the suggestion!",
                                                        "author": {
                                                            "login": "Turbo87"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1277203432",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "2a9a604",
                                                            "authoredDate": "2023-07-26T10:22:40Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "is discriminatory toward, harasses or abuses another individual or group\n\nQuestion: I read this clause against discrimination+harassment as implicitedly part of the first clause of this list (reference to the CoC). Still worth spelling it out?",
                                                        "author": {
                                                            "login": "apiraino"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1277321845",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "2a9a604",
                                                            "authoredDate": "2023-07-26T10:22:40Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "that's a fair question. I guess the CoC does indeed cover this already. The list of clauses would feel incomplete to me if we left it out though, even if it's already covered.\ndo you think it would be bad to keep it in the list if it's already covered by the CoC?",
                                                        "author": {
                                                            "login": "Turbo87"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1277334425",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "2a9a604",
                                                            "authoredDate": "2023-07-26T10:22:40Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "As the latest comments show, \"squatting\" could be arm-twisted in different ways, would it make sense to add a nuance mentioning a threshold of this kind of activity that leads to raising a flag? If left unspecified, I understand that cases with 1 or 288 crate names reserved, forever unused and without any context anywhere else will all be subject to this policy (which could be well what this policy means).\nExample of wording I am thinking of to hint at an activity threshold where discretion could be applied (emphasis mine):\n\na significant activity existing only to reserve names for a prolonged period of time [...]",
                                                        "author": {
                                                            "login": "apiraino"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1277339655",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "2a9a604",
                                                            "authoredDate": "2023-07-26T10:22:40Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I agree with you that it can stay here even if slightly redundant :)",
                                                        "author": {
                                                            "login": "apiraino"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1277341582",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "2a9a604",
                                                            "authoredDate": "2023-07-26T10:22:40Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I don't think crates.io is responsible for verifying these behaviors, or checking if it's intentional or a bug. It is simply not possible.\nLike, do you think a stray rm -rf /usr /lib/XXX is \"fraudulent\" or a bug? Eg, MrMEEE/bumblebee-Old-and-abbandoned#123 Same issue exists about \"phising attempt\" when uploading some arbitrary files which \"accidentally\" covers your whole /etc.\n\"promotes unlawful activities\" can also be (maliciously) accused to bittorrent, IPFS implementations, or youtube-dl which CAN BE used for sharing knowledge pirating files. Even if an author \"promotes piracy\" in crates' docs, I still don't think they should be taken down simply because the promotion. It's nonetheless just a thought crime.",
                                                        "author": {
                                                            "login": "oxalica"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1277523536",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "2a9a604",
                                                            "authoredDate": "2023-07-26T10:22:40Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "\"promotes\u00a0unlawful activities\" can also be (maliciously) accused to bittorrent, IPFS implementations, or youtube-dl which\u00a0CAN BE\u00a0used for\u00a0sharing knowledge\u00a0pirating files. Even if an author \"promotes piracy\" in crates' docs, I still don't think they should be taken down simply because the promotion. It's nonetheless just a thought crime.\n\n(IANAL) In the US, Brandenburg v. Ohio set the legal standard for this sort of thing. By its rules, crate docs that say \"piracy is good\" would be protected by the First Amendment, but \"here's how to use this crate to commit crimes, it's blazingly fast with a pleasant API\" would potentially run afoul of the law.",
                                                        "author": {
                                                            "login": "Jules-Bertholet"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1277708469",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "2a9a604",
                                                            "authoredDate": "2023-07-26T10:22:40Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Would the Rust Foundation be in charge of determining what is and isn't a patent/trademark/copyright violation here?",
                                                        "author": {
                                                            "login": "jonas-schievink"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1277816185",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "The current terms\nFor issues such as DMCA violations, trademark and copyright infringement, Crates.io will respect the [Rust Foundation](https://foundation.rust-lang.org/)'s legal decisions with regards to content that is hosted.\n\nAre a very succinct and good formulation, that was actually worked out with Mozilla legal back in the time.\nThe reasoning was to avoid any decision-making (and therefore potential liability) to come close to volunteer team.\nI would also not trust the crates.io team - largely a team of volunteers - to make any such a decisions competently.",
                                                        "author": {
                                                            "login": "skade"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1278055961",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "CHANGES_REQUESTED",
                                        "bodyText": "I have a hard time following this document. It does not have a motivation that is in relation to the crass departure of the previous held policy values.\nTo me this reads like a solution in search of a problem, and don't really feel like it can be adequately discussed on why this change would be necessary. Simply stating it as such does not seem sufficient to.\nIt is quite difficult to discuss the necessity of such a change without the expected goal from it. As it stands, this would increase the amount of work the crates.io team would have to do, since now anyone could go hunting for 'squatted' project names and request a transfer, pinky promising that yes, they will surely make good use of it. Opposed to the expected current amount of... 0.\nOn top of that, with making the 'lived rules more precise' you now create situations where people can simply disagree with your interpretation or worldview as written in the policy. Also not a reduction of work load, of what I assume the 'unsustainable' is referring to in the text.\nI am particularly troubled by the comments that were then brought up wrt to existing crates and the need to justify any form of 'fairness' for their apparent squatting of names. This is exactly the kind of discussion I expect to arise due to the lack of explanation in the motivation.\nBytes are cheap, names don't mean as much as people think and I do think that for infrastructure as critical as crates.io to take this step without explaining more would be particularly troublesome.",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "\"outgrown\" what? This seems fairly nebulous for such a large change in policy.\nAre names running out? Is disk space getting low?",
                                                        "author": {
                                                            "login": "TheNeikos"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1278045238",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "2a9a604",
                                                            "authoredDate": "2023-07-26T10:22:40Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "It says \"unsustainable\" here, in what sense?\nThe current policies literally says: \"We do not have any policies to define 'squatting', and so will not hand over ownership of a package for that reason.\"\nSo what exactly is unsustainable? Is doing 'nothing' problematic? If you do nothing, what will crates.io look like in another 10 years? Will it be so much worse than now if this proposal were not accepted?",
                                                        "author": {
                                                            "login": "TheNeikos"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1278048839",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "2a9a604",
                                                            "authoredDate": "2023-07-26T10:22:40Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "It is mostly codifying the existing practices of the team, except for being more strict regarding name squatting.\n\nSo, you are saying that currently the crates.io team is transferring ownership of projects for 'name squatting'?\nDespite what the policy specifies/promises?",
                                                        "author": {
                                                            "login": "TheNeikos"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1278055845",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "2a9a604",
                                                            "authoredDate": "2023-07-26T10:22:40Z"
                                                        }
                                                    }
                                                },
                                                {
                                                    "node": {
                                                        "bodyText": "This seems like a very strong departure from the current rules, and so far  this document does not explain why this change is deemed necessary.",
                                                        "author": {
                                                            "login": "TheNeikos"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1278074337",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "2a9a604",
                                                            "authoredDate": "2023-07-26T10:22:40Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "As a practical example - we do actually reserve the names ferrous-systems (company names are similar to trademark) and ferrocene for that reason.",
                                                        "author": {
                                                            "login": "skade"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1278090493",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "2a9a604",
                                                            "authoredDate": "2023-07-26T10:22:40Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I'd point out that, in the US at least, trademarks are limited to specific industries. For example, there's Apple the computer company and Apple the record label.\nI can understand a crate called apple that competes in some way with one of them being taken down after it's uploaded for trademark reasons, but it might not be justified to have that name taken up simply to protect a trademark that's limited in scope. If I wanted to create a crate that was about growing actual apples as in the fruit, why shouldn't I be able to name it apple?\nCan the Rust Foundation's lawyers perhaps be consulted while writing this policy?",
                                                        "author": {
                                                            "login": "ChaiTRex"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1278174173",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "2a9a604",
                                                            "authoredDate": "2023-07-26T10:22:40Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I'm seeing quite a few squatters taking up names that haven't moved for years that I'd like to use, fwiw.",
                                                        "author": {
                                                            "login": "orowith2os"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1278190743",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "2a9a604",
                                                            "authoredDate": "2023-07-26T10:22:40Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I'm a huge fan of anti-squatting mechanisms, but this seems like it goes a step further than that. If a crate does exist and does have a legitimate purpose (and is not just squatted), I don't think it's a good idea in general for crates.io to be making a determination about whether the maintainer is sufficiently active to be \"allowed\" to keep it, nor should it be making a determination about suitable new maintainers.\nOtherwise, that seems like a recipe for supply-chain attacks.",
                                                        "author": {
                                                            "login": "joshtriplett"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1278194670",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "2a9a604",
                                                            "authoredDate": "2023-07-26T10:22:40Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Is this specifically an \"or\"? As in, it's valid to reserve a name with genuine functionality OR purpose OR significant development activity?\nIf so, this seems like an extremely reasonable policy.\nIf not, I think this is too strict. It should suffice to have genuine functionality, or to serve a purpose, or to have significant development activity.",
                                                        "author": {
                                                            "login": "joshtriplett"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1278198280",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "2a9a604",
                                                            "authoredDate": "2023-07-26T10:22:40Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Apple is a useful example here, because Apple Computer goes after a lot of fruit-related trademarks:\nhttps://www.wired.com/story/apple-vs-apples-trademark-battle/",
                                                        "author": {
                                                            "login": "teor2345"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1278250057",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "2a9a604",
                                                            "authoredDate": "2023-07-26T10:22:40Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Code is a series of bits, it cannot do anything on its own. Human beings can use code to do good or bad things.\n\n\"Guns don't kill people\" is not the great argument you seem to think it is.\nTechnology is never value-neutral. The Rust project is not value-neutral. Being value-neutral is neither attainable nor desirable.\n\nSuch an arbitrary standard seems undesirable to me.\n\nIt's fair to disagree with the proposed wording, but let's be clear: An acceptable use policy is not trying to solve a technical problem, but a social one, and some degree of \"fuzziness\" comes with the territory. Every single bullet point in this list is an arbitrary standard in the limit, and that's unavoidable.",
                                                        "author": {
                                                            "login": "kwi-dk"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1278288297",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Removing licensing information means the crate \"infringes any proprietary right of any party, including [...] copyright\", so that's already clear cut in the proposal.\n(Using the name of a project as a crate name without the project's permission is definitely moving into trademark infringement territory, whether the trademark is registered or not, but that's admittedly a bit more nebulous, and a clear rule might be in order.)",
                                                        "author": {
                                                            "login": "kwi-dk"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1278289895",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "2a9a604",
                                                            "authoredDate": "2023-07-26T10:22:40Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "While that makes it a reasonable policy in the context of wanting squatting to be gone. The reason for this change has not been elucidated, and is IMO the much more important part.",
                                                        "author": {
                                                            "login": "TheNeikos"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1278294233",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "2a9a604",
                                                            "authoredDate": "2023-07-26T10:22:40Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "An acceptable use policy is not trying to solve a technical problem, but a social one, and some degree of \"fuzziness\" comes with the territory.\n\nYes, I agree. And the social problem of \"some people believe untrue things\" is well outside of the crates.io team's competencies. It should not be attempting to solve this social problem, there are other organizations in society that have an actual chance of succeeding.",
                                                        "author": {
                                                            "login": "Jules-Bertholet"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1278318361",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "This link should probably be rehosted or directly copied in, as an official policy document being susceptible to link rot sounds like a bad idea.",
                                                        "author": {
                                                            "login": "GnomedDev"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1278334605",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "2a9a604",
                                                            "authoredDate": "2023-07-26T10:22:40Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "@orowith2os mentioned that she has tried to use crate names that had been squatted for years with no activity.",
                                                        "author": {
                                                            "login": "deifactor"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1278444994",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "2a9a604",
                                                            "authoredDate": "2023-07-26T10:22:40Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Removing licensing information means the crate \"infringes any proprietary right of any party, including [...] copyright\", so that's already clear cut in the proposal.\n\nIt's technically true that we could have asked for a takedown from crates.io under this policy. But instead we submitted a PR to their repo with the correct license info, which they accepted.\nSo it's clear cut, but perhaps not actually the desired first action?\n\n(Using the name of a project as a crate name without the project's permission is definitely moving into trademark infringement territory, whether the trademark is registered or not, but that's admittedly a bit more nebulous, and a clear rule might be in order.)\n\nYes, I think a clear rule about project names and prefixes would be helpful.",
                                                        "author": {
                                                            "login": "teor2345"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1278480540",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "2a9a604",
                                                            "authoredDate": "2023-07-26T10:22:40Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Would the Rust Foundation be in charge of determining what is and isn't a patent/trademark/copyright violation here?\n\nNo, but they would be in charge of handling requests regarding those violations. Since all these requests are legal in nature, they must be forwarded to some legal entity -- the Foundation is that legal entity, even though most likely they would simply forward the requests to the volunteer team to actually remove any infringing content.\nEffectively, while they aren't in charge of determining violations (that's the entire legal system's job), they would be the ones on the hook for any violations that aren't resolved, and so it's in their best interest to handle any requests for removal that aren't obviously abusing the system (e.g. some random person says \"remove this crate, I don't like it\" without any legal grounds).",
                                                        "author": {
                                                            "login": "clarfonthey"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1278597212",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "What about a project that is planned or in progress, but hasn't been published to crates.io yet?\n\nThis is actually part of the reason why I think the policy should be a bit more specific when removing \"empty\" crates. In this hypothetical case, the crates.io team might remove the empty version, but when the project then submits the real version, there won't be any harm done, since that would simply upload the new version while the older, empty version is still deleted.\nDeleting these crates, except in cases where the moderation team decides to take further action (e.g. banning someone's account), should effectively be a harmless decision since nothing of value is actually deleted, and no further restrictions are put in place.",
                                                        "author": {
                                                            "login": "clarfonthey"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1278597735",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "5ea4917",
                                                            "authoredDate": "2023-07-24T13:35:48Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Note that the \"purpose\" note I suggested earlier, which is now included in this item, should cover the cases being suggested here. I would argue that someone squatting a crate for the express purpose of protecting their trademark would be a legitimate purpose, even if there's no development activity on that crate.",
                                                        "author": {
                                                            "login": "clarfonthey"
                                                        },
                                                        "url": "https://github.com/rust-lang/rfcs/pull/3463#discussion_r1278598002",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "2a9a604",
                                                            "authoredDate": "2023-07-26T10:22:40Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "textMatches": [
                        {
                            "property": "comments.body"
                        }
                    ]
                }
            ],
            "pageInfo": {
                "endCursor": "Y3Vyc29yOjM=",
                "hasNextPage": false,
                "hasPreviousPage": false,
                "startCursor": "Y3Vyc29yOjE="
            },
            "issueCount": 3
        }
    }
}