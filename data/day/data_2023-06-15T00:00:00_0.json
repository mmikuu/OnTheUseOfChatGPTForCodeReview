{
    "data": {
        "search": {
            "edges": [
                {
                    "node": {
                        "number": 377,
                        "title": "feat: allow more input types to functions, fix tests",
                        "repository": {
                            "nameWithOwner": "sashabaranov/go-openai",
                            "primaryLanguage": {
                                "name": "Go"
                            }
                        },
                        "createdAt": "2023-06-15T15:49:34Z",
                        "mergedAt": "2023-06-21T12:58:28Z",
                        "url": "https://github.com/sashabaranov/go-openai/pull/377",
                        "state": "MERGED",
                        "author": {
                            "login": "stillmatic"
                        },
                        "editor": {
                            "login": "stillmatic"
                        },
                        "body": "See discussion in #360 -- having just the bytes here is much more maintainable than trying to maintain the entire JSONSchema spec. I have tested that the OpenAI model accepts additional jsonschema params (of which there can be many).\r\n\r\nAlso, when verifying the behavior, I found that the ChatCompletion and Completion servers weren't actually trying to make completions. Converting `req.N` to a minimum of 1 should fix that.",
                        "comments": {
                            "nodes": [
                                {
                                    "createdAt": "2023-06-15T16:04:37Z",
                                    "bodyText": "I think this is a much cleaner solution! I will test it out and give feedback (I realize this is kind of a pointless comment, but I want you to know there is interest!)",
                                    "url": "https://github.com/sashabaranov/go-openai/pull/377#issuecomment-1593347794",
                                    "author": {
                                        "login": "jmacwhyte"
                                    }
                                },
                                {
                                    "createdAt": "2023-06-15T16:09:48Z",
                                    "bodyText": "Codecov Report\n\nMerging #377 (df71769) into master (b095938) will increase coverage by 0.05%.\nThe diff coverage is n/a.\n\n@@            Coverage Diff             @@\n##           master     #377      +/-   ##\n==========================================\n+ Coverage   95.26%   95.32%   +0.05%     \n==========================================\n  Files          17       17              \n  Lines         676      684       +8     \n==========================================\n+ Hits          644      652       +8     \n  Misses         22       22              \n  Partials       10       10              \n\n\n\nImpacted Files\nCoverage \u0394\n\n\n\n\n\nchat.go\n100.00% <\u00f8> (\u00f8)\n\n\n\n\n... and 2 files with indirect coverage changes",
                                    "url": "https://github.com/sashabaranov/go-openai/pull/377#issuecomment-1593355014",
                                    "author": {
                                        "login": "codecov"
                                    }
                                },
                                {
                                    "createdAt": "2023-06-16T01:59:06Z",
                                    "bodyText": "I've added back the removed interfaces to the Params field and renamed the json.RawMessage field to ParametersRaw. I feel like this is an anti-pattern though and greatly complicates the library -- I barely understand what's going on in the marshal/unmarshal functions.  While the marshaled struct is byte compatible with the OpenAI spec, it's quite unclear how we handle unmarshal, as there are two possible fields where that can be set (and if we want to maintain strict compatibility, we also need to maintain this unmarshal function, not just the marshal function).\nThe PR now also contains essentially the same fix as #375 and #373 -- my view is that so long as the option to use the structs is around, users will gradually request more and more functionality and it's better to draw a line in the sand sooner. Those 2 PR's also suggest that this code path was already broken for anyone using it, so breaking compatibility this time should not be an issue -- itwas already broken.",
                                    "url": "https://github.com/sashabaranov/go-openai/pull/377#issuecomment-1593974727",
                                    "author": {
                                        "login": "stillmatic"
                                    }
                                },
                                {
                                    "createdAt": "2023-06-16T10:05:05Z",
                                    "bodyText": "@stillmatic I agree with the ease-of-use issues. If there was only a RawMessage field, it's pretty easy for the docs to say \"put your schema (marshalled into []byte) here!\"\nIf a struct and the rawmessage are both populated, which takes precedence when the request is submitted to the API? How do we convey that to users of the libray? I'm a big fan of a \"single source of truth\" instead of having two copies of the same data, just in different formats.",
                                    "url": "https://github.com/sashabaranov/go-openai/pull/377#issuecomment-1594439091",
                                    "author": {
                                        "login": "jmacwhyte"
                                    }
                                },
                                {
                                    "createdAt": "2023-06-17T10:52:24Z",
                                    "bodyText": "@stillmatic I've submitted a PR to your repo with some improvements (including the comment @vvatanabe suggested!)",
                                    "url": "https://github.com/sashabaranov/go-openai/pull/377#issuecomment-1595707269",
                                    "author": {
                                        "login": "jmacwhyte"
                                    }
                                },
                                {
                                    "createdAt": "2023-06-17T13:56:57Z",
                                    "bodyText": "thanks @jmacwhyte ! my only issue with that is that FunctionDefine -> FunctionDefinition also breaks compatibility :)",
                                    "url": "https://github.com/sashabaranov/go-openai/pull/377#issuecomment-1595766473",
                                    "author": {
                                        "login": "stillmatic"
                                    }
                                },
                                {
                                    "createdAt": "2023-06-17T14:33:04Z",
                                    "bodyText": "thanks @jmacwhyte ! my only issue with that is that FunctionDefine -> FunctionDefinition also breaks compatibility :)\n\nHow long has FunctionDefine even existed? One day? XD\nI agree we don't want to break anything, but it's frustrating when poor word choices are rushed out the door... it makes it much harder for people to understand the code in the future.",
                                    "url": "https://github.com/sashabaranov/go-openai/pull/377#issuecomment-1595775511",
                                    "author": {
                                        "login": "jmacwhyte"
                                    }
                                },
                                {
                                    "createdAt": "2023-06-17T15:45:30Z",
                                    "bodyText": "That's basically how I feel  - the Parameters implementation with a custom struct adds quite a lot of complexity and is quite hard for future users to understand (and deprecation without removal is also confusing).\nIf we're going to break compatibility with the FunctionDefinition change (which I agree is much easier to read), we might as well break compatibility and focus only on the json.RawMessage implementation. It's only been around for 2 days, and for 1 of those days, it was broken without the items field.",
                                    "url": "https://github.com/sashabaranov/go-openai/pull/377#issuecomment-1595791597",
                                    "author": {
                                        "login": "stillmatic"
                                    }
                                },
                                {
                                    "createdAt": "2023-06-17T15:52:00Z",
                                    "bodyText": "@stillmatic Should we just put together what we think is the optimal solution, and let @sashabaranov (or another maintainer) pull it in if they want? I don't know who is making the decisions around here, I just want a library that makes my project easy to do.",
                                    "url": "https://github.com/sashabaranov/go-openai/pull/377#issuecomment-1595792665",
                                    "author": {
                                        "login": "jmacwhyte"
                                    }
                                },
                                {
                                    "createdAt": "2023-06-17T15:59:52Z",
                                    "bodyText": "@sashabaranov - my proposal is that we merge this PR as of 345214c -- that diff converts the Parameters object from a custom JSON Schema implementation to a json.RawMessage object, which is more generally supported and relieves the library maintainers from the need to implement another JSON Schema definition. It's closer to what OpenAI expects and much easier to work with using external libraries. I've written a testing and working implementation https://github.com/stillmatic/gollum/blob/main/functions.go#L16 using the github.com/invopop/jsonschema library but have confirmed that it is also compatible with the github.com/santhosh-tekuri/jsonschema/v5 library/. Tests and checks also pass completely, as the implementation is extremely simple.\nThis change is the most compatible with the rest of the golang ecosystem and the least confusing for users - a single code path with no required dependencies and clear debugging paths. It technically breaks compatibility, but I believe it is not a big deal - as discussed above, the release has not been out for very long and it was bugged most of that time. The future maintenance burden of keeping a deprecated tag around is quite high in this case and should outweigh the disruption to workflows right now.\nNote that 345214c is basically a pure revert commit - the backwards compatibility support requires 200+ LOC. Previous changes got borked from rebasing.",
                                    "url": "https://github.com/sashabaranov/go-openai/pull/377#issuecomment-1595794085",
                                    "author": {
                                        "login": "stillmatic"
                                    }
                                },
                                {
                                    "createdAt": "2023-06-17T18:42:24Z",
                                    "bodyText": "@jmacwhyte is the change you're referring to covered by https://github.com/sashabaranov/go-openai/pull/388/files?",
                                    "url": "https://github.com/sashabaranov/go-openai/pull/377#issuecomment-1595828351",
                                    "author": {
                                        "login": "stillmatic"
                                    }
                                },
                                {
                                    "createdAt": "2023-06-17T19:30:14Z",
                                    "bodyText": "@jmacwhyte is the change you're referring to covered by https://github.com/sashabaranov/go-openai/pull/388/files?\n\nNo, it is not touched by that one.\nAbove I was refering to chat.go L41",
                                    "url": "https://github.com/sashabaranov/go-openai/pull/377#issuecomment-1595841374",
                                    "author": {
                                        "login": "jmacwhyte"
                                    }
                                },
                                {
                                    "createdAt": "2023-06-18T10:47:06Z",
                                    "bodyText": "Folks, thank you so much for the great effort you are putting in here! Please excuse me if I've missed some part of the discussion. Here are a couple of thoughts after briefly studying the discussion:\n\nI'm fine with breaking API in this case\nI can see the appeal of both simplified in-library JSON Schema and json.RawMessage. Could we have a type that can take either of them and do the proper thing during marshaling? Or would it break during unmarshalling? If this approach is feasible \u2014 let's also move JSON schema stuff into a separate directory.",
                                    "url": "https://github.com/sashabaranov/go-openai/pull/377#issuecomment-1596097407",
                                    "author": {
                                        "login": "sashabaranov"
                                    }
                                },
                                {
                                    "createdAt": "2023-06-18T12:20:11Z",
                                    "bodyText": "I wonder if we could change Parameters to type any, and then during submission:\n\nIf Parameters is a []byte or string, treat it like json.RawMessage.\nIf it is anything else, run it through json.Marshal().\n\nThat way, users can pass in a preformatted schema as text, but they can also use any library that provides nested structs that are JSON compliant (and we don't have to know anything about which libraries they are using).\n@stillmatic Let me know if you want me to work on this, I'm holding off for now so we don't come up with conflicting commits.",
                                    "url": "https://github.com/sashabaranov/go-openai/pull/377#issuecomment-1596126106",
                                    "author": {
                                        "login": "jmacwhyte"
                                    }
                                },
                                {
                                    "createdAt": "2023-06-18T13:36:37Z",
                                    "bodyText": "I've pushed up a sample commit now that converts Parameters to interface{} and relies on the JSON package to handle marshaling/unmarshaling here. Tests pass using both json.RawMessage and custom structs that serialize to JSON here. This is very similar to @jmacwhyte suggestion but does not require a custom marshaller.\nIf you want to add back the JSONSchema implementation, ok, we can add that back, preferably it should note the limitations on it, but I think the PR should be good to go right afterwards.",
                                    "url": "https://github.com/sashabaranov/go-openai/pull/377#issuecomment-1596150546",
                                    "author": {
                                        "login": "stillmatic"
                                    }
                                },
                                {
                                    "createdAt": "2023-06-19T10:19:01Z",
                                    "bodyText": "@sashabaranov Sounds good to me, as long as it's simple and easy to maintain.\n@stillmatic I submitted another PR to your fork, it's quite minor but I would like it included before the final merge.",
                                    "url": "https://github.com/sashabaranov/go-openai/pull/377#issuecomment-1596918511",
                                    "author": {
                                        "login": "jmacwhyte"
                                    }
                                },
                                {
                                    "createdAt": "2023-06-20T00:10:16Z",
                                    "bodyText": "Regarding @sashabaranov 's point number 2 here, I have submitted a PR to stillmatic's fork which moves all the json schema stuff to a separate directory.",
                                    "url": "https://github.com/sashabaranov/go-openai/pull/377#issuecomment-1597897146",
                                    "author": {
                                        "login": "jmacwhyte"
                                    }
                                },
                                {
                                    "createdAt": "2023-06-20T09:08:39Z",
                                    "bodyText": "@vvatanabe hey, does it look good for you?",
                                    "url": "https://github.com/sashabaranov/go-openai/pull/377#issuecomment-1598402789",
                                    "author": {
                                        "login": "sashabaranov"
                                    }
                                },
                                {
                                    "createdAt": "2023-06-21T00:25:41Z",
                                    "bodyText": "@sashabaranov  Sorry for the late reply.\n\n\nI'm fine with breaking API in this case.\n\n\nI agree. Please note: if the API is to be changed in a way that breaks compatibility, it should be announced that these breaking changes will be made in a forthcoming minor update. Subsequently, these changes should be implemented and released in a major update. Make sure to document the breaking changes in the release notes of the major update. go-github is a good reference for this process, as it frequently makes breaking changes while following these steps.\n\n\nI can see the appeal of both simplified in-library JSON Schema and json.RawMessage.\n\n\nI agree. Changing the Parameters field to the type any would allow for a minor update to be released. When marshalling the Parameters field, we can use type assertions to differentiate []byte(json.RawMessage) or struct. The next major update should then support only []byte(json.RawMessage).",
                                    "url": "https://github.com/sashabaranov/go-openai/pull/377#issuecomment-1599769655",
                                    "author": {
                                        "login": "vvatanabe"
                                    }
                                },
                                {
                                    "createdAt": "2023-06-21T00:47:35Z",
                                    "bodyText": "Thanks for the tip on defined type vs type alias -- with that, I've added a test that covers the old behavior as well. So we should actually have 100% compatibility.\nI haven't added any custom marshaling code since this works now. I can also see the appeal of leaving it as an any field i nstead of json.RawMessage. This is not the greatest example, but imagine if msg here was a properly formed JSONSchema struct, e.g. from a custom JSONSchema library.\n\nThen, this code will marshal properly as is. The advantage is that you save a marshal step (instead of marshal struct to get bytes to pass to parameters, then marshal again). The disadvantage is that you add an unmarshal step (need to reflect to get the type). However, most people will never unmarshal this particular Request struct as they don't run their own servers, so probably better this way. We can revisit that in the future though :)\nshould be good to merge?",
                                    "url": "https://github.com/sashabaranov/go-openai/pull/377#issuecomment-1599796254",
                                    "author": {
                                        "login": "stillmatic"
                                    }
                                },
                                {
                                    "createdAt": "2023-06-21T08:19:53Z",
                                    "bodyText": "Thanks for the comments @vvatanabe , I'm learning a lot from them!\nI really like the solution we've come up with to use any for the schema. It lets developers use whatever they want, and as far as I can see it's pretty hard to use incorrectly, so there aren't really any downsides.",
                                    "url": "https://github.com/sashabaranov/go-openai/pull/377#issuecomment-1600401219",
                                    "author": {
                                        "login": "jmacwhyte"
                                    }
                                },
                                {
                                    "createdAt": "2023-06-21T09:12:07Z",
                                    "bodyText": "My apologies, I overlooked the TestChatCompletionsFunctions test. There's no need to implement a custom marshalling function. I believe the solution proposed in this PR is both simple and fitting. LGTM !\nThanks to the change to the any type, there's no need to specifically plan for a major update. This change can simply be released as part of a minor update.",
                                    "url": "https://github.com/sashabaranov/go-openai/pull/377#issuecomment-1600480856",
                                    "author": {
                                        "login": "vvatanabe"
                                    }
                                }
                            ]
                        },
                        "reviews": {
                            "edges": [
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "go-openai keeps compatible. This is breaking changes. So why not add a field like ParametersRaw?\nNote: You need to implement MarshalJSON func in FunctionDefine since the \"parameters\" tag is duplicated.",
                                                        "author": {
                                                            "login": "vvatanabe"
                                                        },
                                                        "url": "https://github.com/sashabaranov/go-openai/pull/377#discussion_r1231518018",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "c90b963",
                                                            "authoredDate": "2023-06-15T16:01:06Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "heh, yeah, was a bit sad to see the release go out before I had a chance to upstream this. I agree it's a bit undesirable to have a breaking change like this, even if the release was only out for a few hours.\nIt should be relatively straightforward to implement a custom marshaler here, but I think it's worth having the larger conversation about how this library intends to handle the Parameters field moving forward - will this library implement (and maintain) its own JSONSchemaDefine (and related structs) or not?\nIf so - then ParametersRaw is the only path forward, and I will write the custom functions. GPT-4 gets us pretty close I think: https://chat.openai.com/share/bec0bb09-41f5-4746-8b21-8e40087509b1\nIf not - then the cleanest path is to deprecate Parameters as an argument and ask people to use ParametersRaw. That's not the end of the world, but it would be much more intuitive to match the API schema.\nMy view is that the JSON Schema definition is too large to reasonably support in this library and is better suited to be handled in a specialized library. The problem with supporting a subset is that once somebody hits an edge case, then they have to completely rewrite their code here to use either the raw bytes or another library's struct that can serialize properly.",
                                                        "author": {
                                                            "login": "stillmatic"
                                                        },
                                                        "url": "https://github.com/sashabaranov/go-openai/pull/377#discussion_r1231538973",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "c90b963",
                                                            "authoredDate": "2023-06-15T16:01:06Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Type definitions such as JSONSchemaDefine are useful, but there is a trade-off with maintainability. Maintaining a JSON schema would be very costly.\nYou are right, maybe we should deprecate Parameters\uff08Eventually remove them in some version.\uff09and indicate ParametersRaw.",
                                                        "author": {
                                                            "login": "vvatanabe"
                                                        },
                                                        "url": "https://github.com/sashabaranov/go-openai/pull/377#discussion_r1231566735",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "c90b963",
                                                            "authoredDate": "2023-06-15T16:01:06Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I have been testing out this PR, and I like it a lot! I think it's a lot smoother and easier to work with, and probably easier for new devs, too (for quick testing you can just paste in a schema as a text string, instead of building one from nested Go structs!)\nI think this is the way we should do it.",
                                                        "author": {
                                                            "login": "jmacwhyte"
                                                        },
                                                        "url": "https://github.com/sashabaranov/go-openai/pull/377#discussion_r1231598482",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "c90b963",
                                                            "authoredDate": "2023-06-15T16:01:06Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I think it should also be marked as deprecated by adding // Deprecated: <why and where to go> at the very last line of comment and stated out that users should go and use ParametersRaw instead.",
                                                        "author": {
                                                            "login": "nekomeowww"
                                                        },
                                                        "url": "https://github.com/sashabaranov/go-openai/pull/377#discussion_r1232091509",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "c90b963",
                                                            "authoredDate": "2023-06-15T16:01:06Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "Could somebody please review this marshal/unmarshal code? I barely understand it, if we are going to keep Parameters and ParametersRaw then this code needs to be correct.",
                                                        "author": {
                                                            "login": "stillmatic"
                                                        },
                                                        "url": "https://github.com/sashabaranov/go-openai/pull/377#discussion_r1232425464",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "de96623",
                                                            "authoredDate": "2023-06-16T01:59:28Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "It looks okay to me. The custom marshalling is almost exactly the same as in this article.\nThe only thing I would change would be to rename FunctionDefine to FunctionDefinition...",
                                                        "author": {
                                                            "login": "jmacwhyte"
                                                        },
                                                        "url": "https://github.com/sashabaranov/go-openai/pull/377#discussion_r1232656738",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "de96623",
                                                            "authoredDate": "2023-06-16T01:59:28Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "How about adding a comment indicating that FunctionDefine type aliases are used to prevent recursion during JSON marshalling?",
                                                        "author": {
                                                            "login": "vvatanabe"
                                                        },
                                                        "url": "https://github.com/sashabaranov/go-openai/pull/377#discussion_r1232828994",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "af0920b",
                                                            "authoredDate": "2023-06-16T21:30:05Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "How about adding a comment indicating that FunctionDefine type aliases are used to prevent recursion during JSON unmarshalling?",
                                                        "author": {
                                                            "login": "vvatanabe"
                                                        },
                                                        "url": "https://github.com/sashabaranov/go-openai/pull/377#discussion_r1232829512",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "af0920b",
                                                            "authoredDate": "2023-06-16T21:30:05Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "APPROVED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": []
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "CHANGES_REQUESTED",
                                        "bodyText": "Also change FunctionCall.Arguments to type json.RawMessage.",
                                        "comments": {
                                            "edges": []
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "nit: interface{} is just any now",
                                                        "author": {
                                                            "login": "sashabaranov"
                                                        },
                                                        "url": "https://github.com/sashabaranov/go-openai/pull/377#discussion_r1233359870",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "9c34579",
                                                            "authoredDate": "2023-06-18T13:39:39Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "TIL :) still write map[string]interface{} out of habit",
                                                        "author": {
                                                            "login": "stillmatic"
                                                        },
                                                        "url": "https://github.com/sashabaranov/go-openai/pull/377#discussion_r1233369889",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "9c34579",
                                                            "authoredDate": "2023-06-18T13:39:39Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "I guess we should keep FunctionParams struct to provide a default way to specify function parameters? So in README we would recomment doing Parameters: &FunctionParams{...} or using your own json.RawMessage (as per @jmacwhyte suggestion).\n(See my second point in the earlier comment)\ncc @vvatanabe @jmacwhyte",
                                                        "author": {
                                                            "login": "sashabaranov"
                                                        },
                                                        "url": "https://github.com/sashabaranov/go-openai/pull/377#discussion_r1233682837",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "88c6846",
                                                            "authoredDate": "2023-06-18T20:04:36Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "This is a defined type; cannot use FunctionDefine for Functions fields. Compatibility can be maintained by using a type alias as follows:\ntype FunctionDefine = FunctionDefinition",
                                                        "author": {
                                                            "login": "vvatanabe"
                                                        },
                                                        "url": "https://github.com/sashabaranov/go-openai/pull/377#discussion_r1236017934",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "e7123ab",
                                                            "authoredDate": "2023-06-19T15:30:22Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "COMMENTED",
                                        "bodyText": "",
                                        "comments": {
                                            "edges": [
                                                {
                                                    "node": {
                                                        "bodyText": "thanks, TIL!",
                                                        "author": {
                                                            "login": "stillmatic"
                                                        },
                                                        "url": "https://github.com/sashabaranov/go-openai/pull/377#discussion_r1236040448",
                                                        "originalCommit": {
                                                            "abbreviatedOid": "e7123ab",
                                                            "authoredDate": "2023-06-19T15:30:22Z"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "node": {
                                        "state": "APPROVED",
                                        "bodyText": "\ud83d\udd25 Thank you for the PR!",
                                        "comments": {
                                            "edges": []
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "textMatches": [
                        {
                            "property": "comments.body"
                        }
                    ]
                }
            ],
            "pageInfo": {
                "endCursor": "Y3Vyc29yOjE=",
                "hasNextPage": false,
                "hasPreviousPage": false,
                "startCursor": "Y3Vyc29yOjE="
            },
            "issueCount": 1
        }
    }
}